// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: doublecloud/network/v1/network_connection_service.proto

package network

import (
	context "context"
	v1 "github.com/doublecloud/go-genproto/doublecloud/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NetworkConnectionService_Get_FullMethodName    = "/doublecloud.network.v1.NetworkConnectionService/Get"
	NetworkConnectionService_List_FullMethodName   = "/doublecloud.network.v1.NetworkConnectionService/List"
	NetworkConnectionService_Create_FullMethodName = "/doublecloud.network.v1.NetworkConnectionService/Create"
	NetworkConnectionService_Delete_FullMethodName = "/doublecloud.network.v1.NetworkConnectionService/Delete"
)

// NetworkConnectionServiceClient is the client API for NetworkConnectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkConnectionServiceClient interface {
	// Returns the specified Network Connection.
	Get(ctx context.Context, in *GetNetworkConnectionRequest, opts ...grpc.CallOption) (*NetworkConnection, error)
	// Retrieves a list of Network Connections of the specified Project.
	List(ctx context.Context, in *ListNetworkConnectionsRequest, opts ...grpc.CallOption) (*ListNetworkConnectionsResponse, error)
	// Creates a Network Connection.
	Create(ctx context.Context, in *CreateNetworkConnectionRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	// Deletes the specified Network Connection.
	Delete(ctx context.Context, in *DeleteNetworkConnectionRequest, opts ...grpc.CallOption) (*v1.Operation, error)
}

type networkConnectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkConnectionServiceClient(cc grpc.ClientConnInterface) NetworkConnectionServiceClient {
	return &networkConnectionServiceClient{cc}
}

func (c *networkConnectionServiceClient) Get(ctx context.Context, in *GetNetworkConnectionRequest, opts ...grpc.CallOption) (*NetworkConnection, error) {
	out := new(NetworkConnection)
	err := c.cc.Invoke(ctx, NetworkConnectionService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkConnectionServiceClient) List(ctx context.Context, in *ListNetworkConnectionsRequest, opts ...grpc.CallOption) (*ListNetworkConnectionsResponse, error) {
	out := new(ListNetworkConnectionsResponse)
	err := c.cc.Invoke(ctx, NetworkConnectionService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkConnectionServiceClient) Create(ctx context.Context, in *CreateNetworkConnectionRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, NetworkConnectionService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkConnectionServiceClient) Delete(ctx context.Context, in *DeleteNetworkConnectionRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, NetworkConnectionService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkConnectionServiceServer is the server API for NetworkConnectionService service.
// All implementations must embed UnimplementedNetworkConnectionServiceServer
// for forward compatibility
type NetworkConnectionServiceServer interface {
	// Returns the specified Network Connection.
	Get(context.Context, *GetNetworkConnectionRequest) (*NetworkConnection, error)
	// Retrieves a list of Network Connections of the specified Project.
	List(context.Context, *ListNetworkConnectionsRequest) (*ListNetworkConnectionsResponse, error)
	// Creates a Network Connection.
	Create(context.Context, *CreateNetworkConnectionRequest) (*v1.Operation, error)
	// Deletes the specified Network Connection.
	Delete(context.Context, *DeleteNetworkConnectionRequest) (*v1.Operation, error)
	mustEmbedUnimplementedNetworkConnectionServiceServer()
}

// UnimplementedNetworkConnectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkConnectionServiceServer struct {
}

func (UnimplementedNetworkConnectionServiceServer) Get(context.Context, *GetNetworkConnectionRequest) (*NetworkConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedNetworkConnectionServiceServer) List(context.Context, *ListNetworkConnectionsRequest) (*ListNetworkConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedNetworkConnectionServiceServer) Create(context.Context, *CreateNetworkConnectionRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedNetworkConnectionServiceServer) Delete(context.Context, *DeleteNetworkConnectionRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedNetworkConnectionServiceServer) mustEmbedUnimplementedNetworkConnectionServiceServer() {
}

// UnsafeNetworkConnectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkConnectionServiceServer will
// result in compilation errors.
type UnsafeNetworkConnectionServiceServer interface {
	mustEmbedUnimplementedNetworkConnectionServiceServer()
}

func RegisterNetworkConnectionServiceServer(s grpc.ServiceRegistrar, srv NetworkConnectionServiceServer) {
	s.RegisterService(&NetworkConnectionService_ServiceDesc, srv)
}

func _NetworkConnectionService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkConnectionServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkConnectionService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkConnectionServiceServer).Get(ctx, req.(*GetNetworkConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkConnectionService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworkConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkConnectionServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkConnectionService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkConnectionServiceServer).List(ctx, req.(*ListNetworkConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkConnectionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNetworkConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkConnectionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkConnectionService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkConnectionServiceServer).Create(ctx, req.(*CreateNetworkConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkConnectionService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNetworkConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkConnectionServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkConnectionService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkConnectionServiceServer).Delete(ctx, req.(*DeleteNetworkConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkConnectionService_ServiceDesc is the grpc.ServiceDesc for NetworkConnectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkConnectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "doublecloud.network.v1.NetworkConnectionService",
	HandlerType: (*NetworkConnectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _NetworkConnectionService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _NetworkConnectionService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _NetworkConnectionService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NetworkConnectionService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "doublecloud/network/v1/network_connection_service.proto",
}
