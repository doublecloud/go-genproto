// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: doublecloud/logs/v1/log_service.proto

package logs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	LogService_Read_FullMethodName = "/doublecloud.logs.v1.LogService/Read"
)

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogServiceClient interface {
	// Read logs, every log record will be streamed as separate message. Also allows
	// for 'tail -f' semantics.
	Read(ctx context.Context, in *ReadLogsRequest, opts ...grpc.CallOption) (LogService_ReadClient, error)
}

type logServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServiceClient(cc grpc.ClientConnInterface) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) Read(ctx context.Context, in *ReadLogsRequest, opts ...grpc.CallOption) (LogService_ReadClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LogService_ServiceDesc.Streams[0], LogService_Read_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &logServiceReadClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogService_ReadClient interface {
	Recv() (*ReadLogRecord, error)
	grpc.ClientStream
}

type logServiceReadClient struct {
	grpc.ClientStream
}

func (x *logServiceReadClient) Recv() (*ReadLogRecord, error) {
	m := new(ReadLogRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogServiceServer is the server API for LogService service.
// All implementations must embed UnimplementedLogServiceServer
// for forward compatibility
type LogServiceServer interface {
	// Read logs, every log record will be streamed as separate message. Also allows
	// for 'tail -f' semantics.
	Read(*ReadLogsRequest, LogService_ReadServer) error
	mustEmbedUnimplementedLogServiceServer()
}

// UnimplementedLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogServiceServer struct {
}

func (UnimplementedLogServiceServer) Read(*ReadLogsRequest, LogService_ReadServer) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedLogServiceServer) mustEmbedUnimplementedLogServiceServer() {}

// UnsafeLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServiceServer will
// result in compilation errors.
type UnsafeLogServiceServer interface {
	mustEmbedUnimplementedLogServiceServer()
}

func RegisterLogServiceServer(s grpc.ServiceRegistrar, srv LogServiceServer) {
	s.RegisterService(&LogService_ServiceDesc, srv)
}

func _LogService_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogServiceServer).Read(m, &logServiceReadServer{ServerStream: stream})
}

type LogService_ReadServer interface {
	Send(*ReadLogRecord) error
	grpc.ServerStream
}

type logServiceReadServer struct {
	grpc.ServerStream
}

func (x *logServiceReadServer) Send(m *ReadLogRecord) error {
	return x.ServerStream.SendMsg(m)
}

// LogService_ServiceDesc is the grpc.ServiceDesc for LogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "doublecloud.logs.v1.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Read",
			Handler:       _LogService_Read_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "doublecloud/logs/v1/log_service.proto",
}
