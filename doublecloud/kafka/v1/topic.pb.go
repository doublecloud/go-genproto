// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: doublecloud/kafka/v1/topic.proto

package kafka

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TopicConfig28_CleanupPolicy int32

const (
	TopicConfig28_CLEANUP_POLICY_INVALID            TopicConfig28_CleanupPolicy = 0
	TopicConfig28_CLEANUP_POLICY_DELETE             TopicConfig28_CleanupPolicy = 1
	TopicConfig28_CLEANUP_POLICY_COMPACT            TopicConfig28_CleanupPolicy = 2
	TopicConfig28_CLEANUP_POLICY_COMPACT_AND_DELETE TopicConfig28_CleanupPolicy = 3
)

// Enum value maps for TopicConfig28_CleanupPolicy.
var (
	TopicConfig28_CleanupPolicy_name = map[int32]string{
		0: "CLEANUP_POLICY_INVALID",
		1: "CLEANUP_POLICY_DELETE",
		2: "CLEANUP_POLICY_COMPACT",
		3: "CLEANUP_POLICY_COMPACT_AND_DELETE",
	}
	TopicConfig28_CleanupPolicy_value = map[string]int32{
		"CLEANUP_POLICY_INVALID":            0,
		"CLEANUP_POLICY_DELETE":             1,
		"CLEANUP_POLICY_COMPACT":            2,
		"CLEANUP_POLICY_COMPACT_AND_DELETE": 3,
	}
)

func (x TopicConfig28_CleanupPolicy) Enum() *TopicConfig28_CleanupPolicy {
	p := new(TopicConfig28_CleanupPolicy)
	*p = x
	return p
}

func (x TopicConfig28_CleanupPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopicConfig28_CleanupPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_kafka_v1_topic_proto_enumTypes[0].Descriptor()
}

func (TopicConfig28_CleanupPolicy) Type() protoreflect.EnumType {
	return &file_doublecloud_kafka_v1_topic_proto_enumTypes[0]
}

func (x TopicConfig28_CleanupPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopicConfig28_CleanupPolicy.Descriptor instead.
func (TopicConfig28_CleanupPolicy) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_kafka_v1_topic_proto_rawDescGZIP(), []int{2, 0}
}

type TopicConfig28_CompressionType int32

const (
	TopicConfig28_COMPRESSION_TYPE_INVALID      TopicConfig28_CompressionType = 0
	TopicConfig28_COMPRESSION_TYPE_UNCOMPRESSED TopicConfig28_CompressionType = 1
	TopicConfig28_COMPRESSION_TYPE_ZSTD         TopicConfig28_CompressionType = 2
	TopicConfig28_COMPRESSION_TYPE_LZ4          TopicConfig28_CompressionType = 3
	TopicConfig28_COMPRESSION_TYPE_SNAPPY       TopicConfig28_CompressionType = 4
	TopicConfig28_COMPRESSION_TYPE_GZIP         TopicConfig28_CompressionType = 5
	TopicConfig28_COMPRESSION_TYPE_PRODUCER     TopicConfig28_CompressionType = 6
)

// Enum value maps for TopicConfig28_CompressionType.
var (
	TopicConfig28_CompressionType_name = map[int32]string{
		0: "COMPRESSION_TYPE_INVALID",
		1: "COMPRESSION_TYPE_UNCOMPRESSED",
		2: "COMPRESSION_TYPE_ZSTD",
		3: "COMPRESSION_TYPE_LZ4",
		4: "COMPRESSION_TYPE_SNAPPY",
		5: "COMPRESSION_TYPE_GZIP",
		6: "COMPRESSION_TYPE_PRODUCER",
	}
	TopicConfig28_CompressionType_value = map[string]int32{
		"COMPRESSION_TYPE_INVALID":      0,
		"COMPRESSION_TYPE_UNCOMPRESSED": 1,
		"COMPRESSION_TYPE_ZSTD":         2,
		"COMPRESSION_TYPE_LZ4":          3,
		"COMPRESSION_TYPE_SNAPPY":       4,
		"COMPRESSION_TYPE_GZIP":         5,
		"COMPRESSION_TYPE_PRODUCER":     6,
	}
)

func (x TopicConfig28_CompressionType) Enum() *TopicConfig28_CompressionType {
	p := new(TopicConfig28_CompressionType)
	*p = x
	return p
}

func (x TopicConfig28_CompressionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopicConfig28_CompressionType) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_kafka_v1_topic_proto_enumTypes[1].Descriptor()
}

func (TopicConfig28_CompressionType) Type() protoreflect.EnumType {
	return &file_doublecloud_kafka_v1_topic_proto_enumTypes[1]
}

func (x TopicConfig28_CompressionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopicConfig28_CompressionType.Descriptor instead.
func (TopicConfig28_CompressionType) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_kafka_v1_topic_proto_rawDescGZIP(), []int{2, 1}
}

type TopicConfig3_CleanupPolicy int32

const (
	TopicConfig3_CLEANUP_POLICY_INVALID            TopicConfig3_CleanupPolicy = 0
	TopicConfig3_CLEANUP_POLICY_DELETE             TopicConfig3_CleanupPolicy = 1
	TopicConfig3_CLEANUP_POLICY_COMPACT            TopicConfig3_CleanupPolicy = 2
	TopicConfig3_CLEANUP_POLICY_COMPACT_AND_DELETE TopicConfig3_CleanupPolicy = 3
)

// Enum value maps for TopicConfig3_CleanupPolicy.
var (
	TopicConfig3_CleanupPolicy_name = map[int32]string{
		0: "CLEANUP_POLICY_INVALID",
		1: "CLEANUP_POLICY_DELETE",
		2: "CLEANUP_POLICY_COMPACT",
		3: "CLEANUP_POLICY_COMPACT_AND_DELETE",
	}
	TopicConfig3_CleanupPolicy_value = map[string]int32{
		"CLEANUP_POLICY_INVALID":            0,
		"CLEANUP_POLICY_DELETE":             1,
		"CLEANUP_POLICY_COMPACT":            2,
		"CLEANUP_POLICY_COMPACT_AND_DELETE": 3,
	}
)

func (x TopicConfig3_CleanupPolicy) Enum() *TopicConfig3_CleanupPolicy {
	p := new(TopicConfig3_CleanupPolicy)
	*p = x
	return p
}

func (x TopicConfig3_CleanupPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopicConfig3_CleanupPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_kafka_v1_topic_proto_enumTypes[2].Descriptor()
}

func (TopicConfig3_CleanupPolicy) Type() protoreflect.EnumType {
	return &file_doublecloud_kafka_v1_topic_proto_enumTypes[2]
}

func (x TopicConfig3_CleanupPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopicConfig3_CleanupPolicy.Descriptor instead.
func (TopicConfig3_CleanupPolicy) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_kafka_v1_topic_proto_rawDescGZIP(), []int{3, 0}
}

type TopicConfig3_CompressionType int32

const (
	TopicConfig3_COMPRESSION_TYPE_INVALID      TopicConfig3_CompressionType = 0
	TopicConfig3_COMPRESSION_TYPE_UNCOMPRESSED TopicConfig3_CompressionType = 1
	TopicConfig3_COMPRESSION_TYPE_ZSTD         TopicConfig3_CompressionType = 2
	TopicConfig3_COMPRESSION_TYPE_LZ4          TopicConfig3_CompressionType = 3
	TopicConfig3_COMPRESSION_TYPE_SNAPPY       TopicConfig3_CompressionType = 4
	TopicConfig3_COMPRESSION_TYPE_GZIP         TopicConfig3_CompressionType = 5
	TopicConfig3_COMPRESSION_TYPE_PRODUCER     TopicConfig3_CompressionType = 6
)

// Enum value maps for TopicConfig3_CompressionType.
var (
	TopicConfig3_CompressionType_name = map[int32]string{
		0: "COMPRESSION_TYPE_INVALID",
		1: "COMPRESSION_TYPE_UNCOMPRESSED",
		2: "COMPRESSION_TYPE_ZSTD",
		3: "COMPRESSION_TYPE_LZ4",
		4: "COMPRESSION_TYPE_SNAPPY",
		5: "COMPRESSION_TYPE_GZIP",
		6: "COMPRESSION_TYPE_PRODUCER",
	}
	TopicConfig3_CompressionType_value = map[string]int32{
		"COMPRESSION_TYPE_INVALID":      0,
		"COMPRESSION_TYPE_UNCOMPRESSED": 1,
		"COMPRESSION_TYPE_ZSTD":         2,
		"COMPRESSION_TYPE_LZ4":          3,
		"COMPRESSION_TYPE_SNAPPY":       4,
		"COMPRESSION_TYPE_GZIP":         5,
		"COMPRESSION_TYPE_PRODUCER":     6,
	}
)

func (x TopicConfig3_CompressionType) Enum() *TopicConfig3_CompressionType {
	p := new(TopicConfig3_CompressionType)
	*p = x
	return p
}

func (x TopicConfig3_CompressionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopicConfig3_CompressionType) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_kafka_v1_topic_proto_enumTypes[3].Descriptor()
}

func (TopicConfig3_CompressionType) Type() protoreflect.EnumType {
	return &file_doublecloud_kafka_v1_topic_proto_enumTypes[3]
}

func (x TopicConfig3_CompressionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopicConfig3_CompressionType.Descriptor instead.
func (TopicConfig3_CompressionType) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_kafka_v1_topic_proto_rawDescGZIP(), []int{3, 1}
}

// Apache Kafka Topic resource.
type Topic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the topic.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ID of the Apache Kafka cluster that the topic belongs to.
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Number of topic partitions.
	Partitions *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=partitions,proto3" json:"partitions,omitempty"`
	// Amount of copies of a topic data kept in a cluster.
	ReplicationFactor *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=replication_factor,json=replicationFactor,proto3" json:"replication_factor,omitempty"`
	// User-defined settings for a topic.
	//
	// Types that are assignable to TopicConfig:
	//
	//	*Topic_TopicConfig_2_8
	//	*Topic_TopicConfig_3
	TopicConfig isTopic_TopicConfig `protobuf_oneof:"topic_config"`
	// True if topic has SLA guaranties
	IsHa bool `protobuf:"varint,8,opt,name=is_ha,json=isHa,proto3" json:"is_ha,omitempty"`
}

func (x *Topic) Reset() {
	*x = Topic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_kafka_v1_topic_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Topic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topic) ProtoMessage() {}

func (x *Topic) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_kafka_v1_topic_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topic.ProtoReflect.Descriptor instead.
func (*Topic) Descriptor() ([]byte, []int) {
	return file_doublecloud_kafka_v1_topic_proto_rawDescGZIP(), []int{0}
}

func (x *Topic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Topic) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *Topic) GetPartitions() *wrapperspb.Int64Value {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *Topic) GetReplicationFactor() *wrapperspb.Int64Value {
	if x != nil {
		return x.ReplicationFactor
	}
	return nil
}

func (m *Topic) GetTopicConfig() isTopic_TopicConfig {
	if m != nil {
		return m.TopicConfig
	}
	return nil
}

func (x *Topic) GetTopicConfig_2_8() *TopicConfig28 {
	if x, ok := x.GetTopicConfig().(*Topic_TopicConfig_2_8); ok {
		return x.TopicConfig_2_8
	}
	return nil
}

func (x *Topic) GetTopicConfig_3() *TopicConfig3 {
	if x, ok := x.GetTopicConfig().(*Topic_TopicConfig_3); ok {
		return x.TopicConfig_3
	}
	return nil
}

func (x *Topic) GetIsHa() bool {
	if x != nil {
		return x.IsHa
	}
	return false
}

type isTopic_TopicConfig interface {
	isTopic_TopicConfig()
}

type Topic_TopicConfig_2_8 struct {
	TopicConfig_2_8 *TopicConfig28 `protobuf:"bytes,5,opt,name=topic_config_2_8,json=topicConfig28,proto3,oneof"`
}

type Topic_TopicConfig_3 struct {
	TopicConfig_3 *TopicConfig3 `protobuf:"bytes,7,opt,name=topic_config_3,json=topicConfig3,proto3,oneof"`
}

func (*Topic_TopicConfig_2_8) isTopic_TopicConfig() {}

func (*Topic_TopicConfig_3) isTopic_TopicConfig() {}

type TopicSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the topic.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Number of topic partitions
	Partitions *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=partitions,proto3" json:"partitions,omitempty"`
	// Amount of copies of a topic data kept in a cluster.
	ReplicationFactor *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=replication_factor,json=replicationFactor,proto3" json:"replication_factor,omitempty"`
	// User-defined settings for a topic.
	//
	// Types that are assignable to TopicConfig:
	//
	//	*TopicSpec_TopicConfig_2_8
	//	*TopicSpec_TopicConfig_3
	TopicConfig isTopicSpec_TopicConfig `protobuf_oneof:"topic_config"`
}

func (x *TopicSpec) Reset() {
	*x = TopicSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_kafka_v1_topic_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicSpec) ProtoMessage() {}

func (x *TopicSpec) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_kafka_v1_topic_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicSpec.ProtoReflect.Descriptor instead.
func (*TopicSpec) Descriptor() ([]byte, []int) {
	return file_doublecloud_kafka_v1_topic_proto_rawDescGZIP(), []int{1}
}

func (x *TopicSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TopicSpec) GetPartitions() *wrapperspb.Int64Value {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *TopicSpec) GetReplicationFactor() *wrapperspb.Int64Value {
	if x != nil {
		return x.ReplicationFactor
	}
	return nil
}

func (m *TopicSpec) GetTopicConfig() isTopicSpec_TopicConfig {
	if m != nil {
		return m.TopicConfig
	}
	return nil
}

func (x *TopicSpec) GetTopicConfig_2_8() *TopicConfig28 {
	if x, ok := x.GetTopicConfig().(*TopicSpec_TopicConfig_2_8); ok {
		return x.TopicConfig_2_8
	}
	return nil
}

func (x *TopicSpec) GetTopicConfig_3() *TopicConfig3 {
	if x, ok := x.GetTopicConfig().(*TopicSpec_TopicConfig_3); ok {
		return x.TopicConfig_3
	}
	return nil
}

type isTopicSpec_TopicConfig interface {
	isTopicSpec_TopicConfig()
}

type TopicSpec_TopicConfig_2_8 struct {
	TopicConfig_2_8 *TopicConfig28 `protobuf:"bytes,4,opt,name=topic_config_2_8,json=topicConfig28,proto3,oneof"`
}

type TopicSpec_TopicConfig_3 struct {
	TopicConfig_3 *TopicConfig3 `protobuf:"bytes,6,opt,name=topic_config_3,json=topicConfig3,proto3,oneof"`
}

func (*TopicSpec_TopicConfig_2_8) isTopicSpec_TopicConfig() {}

func (*TopicSpec_TopicConfig_3) isTopicSpec_TopicConfig() {}

type TopicConfig28 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Retention policy to use on old log segments.
	CleanupPolicy TopicConfig28_CleanupPolicy `protobuf:"varint,1,opt,name=cleanup_policy,json=cleanupPolicy,proto3,enum=doublecloud.kafka.v1.TopicConfig28_CleanupPolicy" json:"cleanup_policy,omitempty"`
	// Specify the final compression type for a given topic.
	CompressionType TopicConfig28_CompressionType `protobuf:"varint,2,opt,name=compression_type,json=compressionType,proto3,enum=doublecloud.kafka.v1.TopicConfig28_CompressionType" json:"compression_type,omitempty"`
	// This configuration controls the maximum size a partition (which consists of log
	// segments) can grow to before
	// we will discard old log segments to free up space if we are using the "delete"
	// retention policy
	RetentionBytes *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=retention_bytes,json=retentionBytes,proto3" json:"retention_bytes,omitempty"`
	// This configuration controls the maximum time we will retain a log before we will
	// discard old log segments
	// to free up space if we are using the "delete" retention policy.
	RetentionMs *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=retention_ms,json=retentionMs,proto3" json:"retention_ms,omitempty"`
	// The largest record batch size allowed in topic.
	MaxMessageBytes *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=max_message_bytes,json=maxMessageBytes,proto3" json:"max_message_bytes,omitempty"`
}

func (x *TopicConfig28) Reset() {
	*x = TopicConfig28{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_kafka_v1_topic_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicConfig28) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicConfig28) ProtoMessage() {}

func (x *TopicConfig28) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_kafka_v1_topic_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicConfig28.ProtoReflect.Descriptor instead.
func (*TopicConfig28) Descriptor() ([]byte, []int) {
	return file_doublecloud_kafka_v1_topic_proto_rawDescGZIP(), []int{2}
}

func (x *TopicConfig28) GetCleanupPolicy() TopicConfig28_CleanupPolicy {
	if x != nil {
		return x.CleanupPolicy
	}
	return TopicConfig28_CLEANUP_POLICY_INVALID
}

func (x *TopicConfig28) GetCompressionType() TopicConfig28_CompressionType {
	if x != nil {
		return x.CompressionType
	}
	return TopicConfig28_COMPRESSION_TYPE_INVALID
}

func (x *TopicConfig28) GetRetentionBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.RetentionBytes
	}
	return nil
}

func (x *TopicConfig28) GetRetentionMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.RetentionMs
	}
	return nil
}

func (x *TopicConfig28) GetMaxMessageBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxMessageBytes
	}
	return nil
}

type TopicConfig3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Retention policy to use on old log segments.
	CleanupPolicy TopicConfig3_CleanupPolicy `protobuf:"varint,1,opt,name=cleanup_policy,json=cleanupPolicy,proto3,enum=doublecloud.kafka.v1.TopicConfig3_CleanupPolicy" json:"cleanup_policy,omitempty"`
	// Specify the final compression type for a given topic.
	CompressionType TopicConfig3_CompressionType `protobuf:"varint,2,opt,name=compression_type,json=compressionType,proto3,enum=doublecloud.kafka.v1.TopicConfig3_CompressionType" json:"compression_type,omitempty"`
	// This configuration controls the maximum size a partition (which consists of log
	// segments) can grow to before
	// we will discard old log segments to free up space if we are using the "delete"
	// retention policy
	RetentionBytes *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=retention_bytes,json=retentionBytes,proto3" json:"retention_bytes,omitempty"`
	// This configuration controls the maximum time we will retain a log before we will
	// discard old log segments
	// to free up space if we are using the "delete" retention policy.
	RetentionMs *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=retention_ms,json=retentionMs,proto3" json:"retention_ms,omitempty"`
	// The largest record batch size allowed in topic.
	MaxMessageBytes *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=max_message_bytes,json=maxMessageBytes,proto3" json:"max_message_bytes,omitempty"`
}

func (x *TopicConfig3) Reset() {
	*x = TopicConfig3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_kafka_v1_topic_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicConfig3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicConfig3) ProtoMessage() {}

func (x *TopicConfig3) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_kafka_v1_topic_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicConfig3.ProtoReflect.Descriptor instead.
func (*TopicConfig3) Descriptor() ([]byte, []int) {
	return file_doublecloud_kafka_v1_topic_proto_rawDescGZIP(), []int{3}
}

func (x *TopicConfig3) GetCleanupPolicy() TopicConfig3_CleanupPolicy {
	if x != nil {
		return x.CleanupPolicy
	}
	return TopicConfig3_CLEANUP_POLICY_INVALID
}

func (x *TopicConfig3) GetCompressionType() TopicConfig3_CompressionType {
	if x != nil {
		return x.CompressionType
	}
	return TopicConfig3_COMPRESSION_TYPE_INVALID
}

func (x *TopicConfig3) GetRetentionBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.RetentionBytes
	}
	return nil
}

func (x *TopicConfig3) GetRetentionMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.RetentionMs
	}
	return nil
}

func (x *TopicConfig3) GetMaxMessageBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxMessageBytes
	}
	return nil
}

var File_doublecloud_kafka_v1_topic_proto protoreflect.FileDescriptor

var file_doublecloud_kafka_v1_topic_proto_rawDesc = []byte{
	0x0a, 0x20, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x14, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x03, 0x0a, 0x05, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4e,
	0x0a, 0x10, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x32,
	0x5f, 0x38, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x38, 0x48, 0x00, 0x52,
	0x0d, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x38, 0x12, 0x4a,
	0x0a, 0x0e, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x33,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x33, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x33, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73,
	0x5f, 0x68, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x48, 0x61, 0x42,
	0x0e, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4a,
	0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0xda, 0x02, 0x0a, 0x09, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x4e, 0x0a, 0x10, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x32, 0x5f, 0x38, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x38, 0x48,
	0x00, 0x52, 0x0d, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x38,
	0x12, 0x4a, 0x0a, 0x0e, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x33, 0x48, 0x00, 0x52, 0x0c,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x33, 0x42, 0x0e, 0x0a, 0x0c,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4a, 0x04, 0x08, 0x05,
	0x10, 0x06, 0x22, 0x85, 0x06, 0x0a, 0x0d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x32, 0x38, 0x12, 0x58, 0x0a, 0x0e, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32,
	0x38, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x0d, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x5e,
	0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x38, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44,
	0x0a, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6d, 0x61,
	0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x89, 0x01,
	0x0a, 0x0d, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43,
	0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55,
	0x50, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x43, 0x54,
	0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x41, 0x4e, 0x44,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x22, 0xde, 0x01, 0x0a, 0x0f, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x18, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x43,
	0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x5a, 0x53, 0x54, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4d,
	0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x5a,
	0x34, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x50, 0x59, 0x10, 0x04,
	0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x5a, 0x49, 0x50, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x43,
	0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52, 0x10, 0x06, 0x22, 0x82, 0x06, 0x0a, 0x0c, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x33, 0x12, 0x57, 0x0a, 0x0e, 0x63,
	0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x33, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x5d, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32,
	0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x33, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x6d, 0x61, 0x78,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x19, 0x0a, 0x15, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43,
	0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x41, 0x43, 0x54, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4c, 0x45, 0x41, 0x4e,
	0x55, 0x50, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x43,
	0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x22, 0xde,
	0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x5a, 0x53, 0x54, 0x44, 0x10, 0x02, 0x12, 0x18,
	0x0a, 0x14, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x5a, 0x34, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x50,
	0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4e, 0x41,
	0x50, 0x50, 0x59, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x5a, 0x49, 0x50, 0x10, 0x05,
	0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52, 0x10, 0x06, 0x42,
	0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2f, 0x76, 0x31, 0x3b, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_doublecloud_kafka_v1_topic_proto_rawDescOnce sync.Once
	file_doublecloud_kafka_v1_topic_proto_rawDescData = file_doublecloud_kafka_v1_topic_proto_rawDesc
)

func file_doublecloud_kafka_v1_topic_proto_rawDescGZIP() []byte {
	file_doublecloud_kafka_v1_topic_proto_rawDescOnce.Do(func() {
		file_doublecloud_kafka_v1_topic_proto_rawDescData = protoimpl.X.CompressGZIP(file_doublecloud_kafka_v1_topic_proto_rawDescData)
	})
	return file_doublecloud_kafka_v1_topic_proto_rawDescData
}

var file_doublecloud_kafka_v1_topic_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_doublecloud_kafka_v1_topic_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_doublecloud_kafka_v1_topic_proto_goTypes = []interface{}{
	(TopicConfig28_CleanupPolicy)(0),   // 0: doublecloud.kafka.v1.TopicConfig28.CleanupPolicy
	(TopicConfig28_CompressionType)(0), // 1: doublecloud.kafka.v1.TopicConfig28.CompressionType
	(TopicConfig3_CleanupPolicy)(0),    // 2: doublecloud.kafka.v1.TopicConfig3.CleanupPolicy
	(TopicConfig3_CompressionType)(0),  // 3: doublecloud.kafka.v1.TopicConfig3.CompressionType
	(*Topic)(nil),                      // 4: doublecloud.kafka.v1.Topic
	(*TopicSpec)(nil),                  // 5: doublecloud.kafka.v1.TopicSpec
	(*TopicConfig28)(nil),              // 6: doublecloud.kafka.v1.TopicConfig28
	(*TopicConfig3)(nil),               // 7: doublecloud.kafka.v1.TopicConfig3
	(*wrapperspb.Int64Value)(nil),      // 8: google.protobuf.Int64Value
}
var file_doublecloud_kafka_v1_topic_proto_depIdxs = []int32{
	8,  // 0: doublecloud.kafka.v1.Topic.partitions:type_name -> google.protobuf.Int64Value
	8,  // 1: doublecloud.kafka.v1.Topic.replication_factor:type_name -> google.protobuf.Int64Value
	6,  // 2: doublecloud.kafka.v1.Topic.topic_config_2_8:type_name -> doublecloud.kafka.v1.TopicConfig28
	7,  // 3: doublecloud.kafka.v1.Topic.topic_config_3:type_name -> doublecloud.kafka.v1.TopicConfig3
	8,  // 4: doublecloud.kafka.v1.TopicSpec.partitions:type_name -> google.protobuf.Int64Value
	8,  // 5: doublecloud.kafka.v1.TopicSpec.replication_factor:type_name -> google.protobuf.Int64Value
	6,  // 6: doublecloud.kafka.v1.TopicSpec.topic_config_2_8:type_name -> doublecloud.kafka.v1.TopicConfig28
	7,  // 7: doublecloud.kafka.v1.TopicSpec.topic_config_3:type_name -> doublecloud.kafka.v1.TopicConfig3
	0,  // 8: doublecloud.kafka.v1.TopicConfig28.cleanup_policy:type_name -> doublecloud.kafka.v1.TopicConfig28.CleanupPolicy
	1,  // 9: doublecloud.kafka.v1.TopicConfig28.compression_type:type_name -> doublecloud.kafka.v1.TopicConfig28.CompressionType
	8,  // 10: doublecloud.kafka.v1.TopicConfig28.retention_bytes:type_name -> google.protobuf.Int64Value
	8,  // 11: doublecloud.kafka.v1.TopicConfig28.retention_ms:type_name -> google.protobuf.Int64Value
	8,  // 12: doublecloud.kafka.v1.TopicConfig28.max_message_bytes:type_name -> google.protobuf.Int64Value
	2,  // 13: doublecloud.kafka.v1.TopicConfig3.cleanup_policy:type_name -> doublecloud.kafka.v1.TopicConfig3.CleanupPolicy
	3,  // 14: doublecloud.kafka.v1.TopicConfig3.compression_type:type_name -> doublecloud.kafka.v1.TopicConfig3.CompressionType
	8,  // 15: doublecloud.kafka.v1.TopicConfig3.retention_bytes:type_name -> google.protobuf.Int64Value
	8,  // 16: doublecloud.kafka.v1.TopicConfig3.retention_ms:type_name -> google.protobuf.Int64Value
	8,  // 17: doublecloud.kafka.v1.TopicConfig3.max_message_bytes:type_name -> google.protobuf.Int64Value
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_doublecloud_kafka_v1_topic_proto_init() }
func file_doublecloud_kafka_v1_topic_proto_init() {
	if File_doublecloud_kafka_v1_topic_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_doublecloud_kafka_v1_topic_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Topic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_kafka_v1_topic_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_kafka_v1_topic_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicConfig28); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_kafka_v1_topic_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicConfig3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_doublecloud_kafka_v1_topic_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Topic_TopicConfig_2_8)(nil),
		(*Topic_TopicConfig_3)(nil),
	}
	file_doublecloud_kafka_v1_topic_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*TopicSpec_TopicConfig_2_8)(nil),
		(*TopicSpec_TopicConfig_3)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_doublecloud_kafka_v1_topic_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_doublecloud_kafka_v1_topic_proto_goTypes,
		DependencyIndexes: file_doublecloud_kafka_v1_topic_proto_depIdxs,
		EnumInfos:         file_doublecloud_kafka_v1_topic_proto_enumTypes,
		MessageInfos:      file_doublecloud_kafka_v1_topic_proto_msgTypes,
	}.Build()
	File_doublecloud_kafka_v1_topic_proto = out.File
	file_doublecloud_kafka_v1_topic_proto_rawDesc = nil
	file_doublecloud_kafka_v1_topic_proto_goTypes = nil
	file_doublecloud_kafka_v1_topic_proto_depIdxs = nil
}
