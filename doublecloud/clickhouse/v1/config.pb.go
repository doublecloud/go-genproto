// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: doublecloud/clickhouse/v1/config.proto

package clickhouse

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClickhouseConfig_LogLevel int32

const (
	ClickhouseConfig_LOG_LEVEL_DEFAULT     ClickhouseConfig_LogLevel = 0
	ClickhouseConfig_LOG_LEVEL_TRACE       ClickhouseConfig_LogLevel = 1
	ClickhouseConfig_LOG_LEVEL_DEBUG       ClickhouseConfig_LogLevel = 2
	ClickhouseConfig_LOG_LEVEL_INFORMATION ClickhouseConfig_LogLevel = 3
	ClickhouseConfig_LOG_LEVEL_WARNING     ClickhouseConfig_LogLevel = 4
	ClickhouseConfig_LOG_LEVEL_ERROR       ClickhouseConfig_LogLevel = 5
)

// Enum value maps for ClickhouseConfig_LogLevel.
var (
	ClickhouseConfig_LogLevel_name = map[int32]string{
		0: "LOG_LEVEL_DEFAULT",
		1: "LOG_LEVEL_TRACE",
		2: "LOG_LEVEL_DEBUG",
		3: "LOG_LEVEL_INFORMATION",
		4: "LOG_LEVEL_WARNING",
		5: "LOG_LEVEL_ERROR",
	}
	ClickhouseConfig_LogLevel_value = map[string]int32{
		"LOG_LEVEL_DEFAULT":     0,
		"LOG_LEVEL_TRACE":       1,
		"LOG_LEVEL_DEBUG":       2,
		"LOG_LEVEL_INFORMATION": 3,
		"LOG_LEVEL_WARNING":     4,
		"LOG_LEVEL_ERROR":       5,
	}
)

func (x ClickhouseConfig_LogLevel) Enum() *ClickhouseConfig_LogLevel {
	p := new(ClickhouseConfig_LogLevel)
	*p = x
	return p
}

func (x ClickhouseConfig_LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClickhouseConfig_LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_clickhouse_v1_config_proto_enumTypes[0].Descriptor()
}

func (ClickhouseConfig_LogLevel) Type() protoreflect.EnumType {
	return &file_doublecloud_clickhouse_v1_config_proto_enumTypes[0]
}

func (x ClickhouseConfig_LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClickhouseConfig_LogLevel.Descriptor instead.
func (ClickhouseConfig_LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_config_proto_rawDescGZIP(), []int{0, 0}
}

type ClickhouseConfig_Kafka_SecurityProtocol int32

const (
	ClickhouseConfig_Kafka_SECURITY_PROTOCOL_INVALID        ClickhouseConfig_Kafka_SecurityProtocol = 0
	ClickhouseConfig_Kafka_SECURITY_PROTOCOL_PLAINTEXT      ClickhouseConfig_Kafka_SecurityProtocol = 1
	ClickhouseConfig_Kafka_SECURITY_PROTOCOL_SSL            ClickhouseConfig_Kafka_SecurityProtocol = 2
	ClickhouseConfig_Kafka_SECURITY_PROTOCOL_SASL_PLAINTEXT ClickhouseConfig_Kafka_SecurityProtocol = 3
	ClickhouseConfig_Kafka_SECURITY_PROTOCOL_SASL_SSL       ClickhouseConfig_Kafka_SecurityProtocol = 4
)

// Enum value maps for ClickhouseConfig_Kafka_SecurityProtocol.
var (
	ClickhouseConfig_Kafka_SecurityProtocol_name = map[int32]string{
		0: "SECURITY_PROTOCOL_INVALID",
		1: "SECURITY_PROTOCOL_PLAINTEXT",
		2: "SECURITY_PROTOCOL_SSL",
		3: "SECURITY_PROTOCOL_SASL_PLAINTEXT",
		4: "SECURITY_PROTOCOL_SASL_SSL",
	}
	ClickhouseConfig_Kafka_SecurityProtocol_value = map[string]int32{
		"SECURITY_PROTOCOL_INVALID":        0,
		"SECURITY_PROTOCOL_PLAINTEXT":      1,
		"SECURITY_PROTOCOL_SSL":            2,
		"SECURITY_PROTOCOL_SASL_PLAINTEXT": 3,
		"SECURITY_PROTOCOL_SASL_SSL":       4,
	}
)

func (x ClickhouseConfig_Kafka_SecurityProtocol) Enum() *ClickhouseConfig_Kafka_SecurityProtocol {
	p := new(ClickhouseConfig_Kafka_SecurityProtocol)
	*p = x
	return p
}

func (x ClickhouseConfig_Kafka_SecurityProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClickhouseConfig_Kafka_SecurityProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_clickhouse_v1_config_proto_enumTypes[1].Descriptor()
}

func (ClickhouseConfig_Kafka_SecurityProtocol) Type() protoreflect.EnumType {
	return &file_doublecloud_clickhouse_v1_config_proto_enumTypes[1]
}

func (x ClickhouseConfig_Kafka_SecurityProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClickhouseConfig_Kafka_SecurityProtocol.Descriptor instead.
func (ClickhouseConfig_Kafka_SecurityProtocol) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_config_proto_rawDescGZIP(), []int{0, 1, 0}
}

type ClickhouseConfig_Kafka_SaslMechanism int32

const (
	ClickhouseConfig_Kafka_SASL_MECHANISM_INVALID       ClickhouseConfig_Kafka_SaslMechanism = 0
	ClickhouseConfig_Kafka_SASL_MECHANISM_GSSAPI        ClickhouseConfig_Kafka_SaslMechanism = 1
	ClickhouseConfig_Kafka_SASL_MECHANISM_PLAIN         ClickhouseConfig_Kafka_SaslMechanism = 2
	ClickhouseConfig_Kafka_SASL_MECHANISM_SCRAM_SHA_256 ClickhouseConfig_Kafka_SaslMechanism = 3
	ClickhouseConfig_Kafka_SASL_MECHANISM_SCRAM_SHA_512 ClickhouseConfig_Kafka_SaslMechanism = 4
)

// Enum value maps for ClickhouseConfig_Kafka_SaslMechanism.
var (
	ClickhouseConfig_Kafka_SaslMechanism_name = map[int32]string{
		0: "SASL_MECHANISM_INVALID",
		1: "SASL_MECHANISM_GSSAPI",
		2: "SASL_MECHANISM_PLAIN",
		3: "SASL_MECHANISM_SCRAM_SHA_256",
		4: "SASL_MECHANISM_SCRAM_SHA_512",
	}
	ClickhouseConfig_Kafka_SaslMechanism_value = map[string]int32{
		"SASL_MECHANISM_INVALID":       0,
		"SASL_MECHANISM_GSSAPI":        1,
		"SASL_MECHANISM_PLAIN":         2,
		"SASL_MECHANISM_SCRAM_SHA_256": 3,
		"SASL_MECHANISM_SCRAM_SHA_512": 4,
	}
)

func (x ClickhouseConfig_Kafka_SaslMechanism) Enum() *ClickhouseConfig_Kafka_SaslMechanism {
	p := new(ClickhouseConfig_Kafka_SaslMechanism)
	*p = x
	return p
}

func (x ClickhouseConfig_Kafka_SaslMechanism) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClickhouseConfig_Kafka_SaslMechanism) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_clickhouse_v1_config_proto_enumTypes[2].Descriptor()
}

func (ClickhouseConfig_Kafka_SaslMechanism) Type() protoreflect.EnumType {
	return &file_doublecloud_clickhouse_v1_config_proto_enumTypes[2]
}

func (x ClickhouseConfig_Kafka_SaslMechanism) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClickhouseConfig_Kafka_SaslMechanism.Descriptor instead.
func (ClickhouseConfig_Kafka_SaslMechanism) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_config_proto_rawDescGZIP(), []int{0, 1, 1}
}

type ClickhouseConfig_Compression_Method int32

const (
	ClickhouseConfig_Compression_METHOD_INVALID ClickhouseConfig_Compression_Method = 0
	ClickhouseConfig_Compression_METHOD_LZ4     ClickhouseConfig_Compression_Method = 1
	ClickhouseConfig_Compression_METHOD_ZSTD    ClickhouseConfig_Compression_Method = 2
	ClickhouseConfig_Compression_METHOD_LZ4HC   ClickhouseConfig_Compression_Method = 3
)

// Enum value maps for ClickhouseConfig_Compression_Method.
var (
	ClickhouseConfig_Compression_Method_name = map[int32]string{
		0: "METHOD_INVALID",
		1: "METHOD_LZ4",
		2: "METHOD_ZSTD",
		3: "METHOD_LZ4HC",
	}
	ClickhouseConfig_Compression_Method_value = map[string]int32{
		"METHOD_INVALID": 0,
		"METHOD_LZ4":     1,
		"METHOD_ZSTD":    2,
		"METHOD_LZ4HC":   3,
	}
)

func (x ClickhouseConfig_Compression_Method) Enum() *ClickhouseConfig_Compression_Method {
	p := new(ClickhouseConfig_Compression_Method)
	*p = x
	return p
}

func (x ClickhouseConfig_Compression_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClickhouseConfig_Compression_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_clickhouse_v1_config_proto_enumTypes[3].Descriptor()
}

func (ClickhouseConfig_Compression_Method) Type() protoreflect.EnumType {
	return &file_doublecloud_clickhouse_v1_config_proto_enumTypes[3]
}

func (x ClickhouseConfig_Compression_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClickhouseConfig_Compression_Method.Descriptor instead.
func (ClickhouseConfig_Compression_Method) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_config_proto_rawDescGZIP(), []int{0, 3, 0}
}

// ClickHouse server configuration.
type ClickhouseConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel                                  ClickhouseConfig_LogLevel                   `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=doublecloud.clickhouse.v1.ClickhouseConfig_LogLevel" json:"log_level,omitempty"`
	MaxConnections                            *wrapperspb.Int64Value                      `protobuf:"bytes,2,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	MaxConcurrentQueries                      *wrapperspb.Int64Value                      `protobuf:"bytes,3,opt,name=max_concurrent_queries,json=maxConcurrentQueries,proto3" json:"max_concurrent_queries,omitempty"`
	KeepAliveTimeout                          *durationpb.Duration                        `protobuf:"bytes,4,opt,name=keep_alive_timeout,json=keepAliveTimeout,proto3" json:"keep_alive_timeout,omitempty"`
	UncompressedCacheSize                     *wrapperspb.Int64Value                      `protobuf:"bytes,5,opt,name=uncompressed_cache_size,json=uncompressedCacheSize,proto3" json:"uncompressed_cache_size,omitempty"`
	MarkCacheSize                             *wrapperspb.Int64Value                      `protobuf:"bytes,6,opt,name=mark_cache_size,json=markCacheSize,proto3" json:"mark_cache_size,omitempty"`
	MaxTableSizeToDrop                        *wrapperspb.Int64Value                      `protobuf:"bytes,7,opt,name=max_table_size_to_drop,json=maxTableSizeToDrop,proto3" json:"max_table_size_to_drop,omitempty"`
	MaxPartitionSizeToDrop                    *wrapperspb.Int64Value                      `protobuf:"bytes,8,opt,name=max_partition_size_to_drop,json=maxPartitionSizeToDrop,proto3" json:"max_partition_size_to_drop,omitempty"`
	Timezone                                  *wrapperspb.StringValue                     `protobuf:"bytes,9,opt,name=timezone,proto3" json:"timezone,omitempty"`
	BackgroundPoolSize                        *wrapperspb.Int64Value                      `protobuf:"bytes,10,opt,name=background_pool_size,json=backgroundPoolSize,proto3" json:"background_pool_size,omitempty"`
	BackgroundSchedulePoolSize                *wrapperspb.Int64Value                      `protobuf:"bytes,11,opt,name=background_schedule_pool_size,json=backgroundSchedulePoolSize,proto3" json:"background_schedule_pool_size,omitempty"`
	BackgroundFetchesPoolSize                 *wrapperspb.Int64Value                      `protobuf:"bytes,12,opt,name=background_fetches_pool_size,json=backgroundFetchesPoolSize,proto3" json:"background_fetches_pool_size,omitempty"`
	BackgroundMovePoolSize                    *wrapperspb.Int64Value                      `protobuf:"bytes,13,opt,name=background_move_pool_size,json=backgroundMovePoolSize,proto3" json:"background_move_pool_size,omitempty"`
	BackgroundCommonPoolSize                  *wrapperspb.Int64Value                      `protobuf:"bytes,14,opt,name=background_common_pool_size,json=backgroundCommonPoolSize,proto3" json:"background_common_pool_size,omitempty"`
	BackgroundMergesMutationsConcurrencyRatio *wrapperspb.Int64Value                      `protobuf:"bytes,15,opt,name=background_merges_mutations_concurrency_ratio,json=backgroundMergesMutationsConcurrencyRatio,proto3" json:"background_merges_mutations_concurrency_ratio,omitempty"`
	TotalMemoryProfilerStep                   *wrapperspb.Int64Value                      `protobuf:"bytes,16,opt,name=total_memory_profiler_step,json=totalMemoryProfilerStep,proto3" json:"total_memory_profiler_step,omitempty"`
	MergeTree                                 *ClickhouseConfig_MergeTree                 `protobuf:"bytes,17,opt,name=merge_tree,json=mergeTree,proto3" json:"merge_tree,omitempty"`
	Compression                               []*ClickhouseConfig_Compression             `protobuf:"bytes,18,rep,name=compression,proto3" json:"compression,omitempty"`
	GraphiteRollup                            map[string]*ClickhouseConfig_GraphiteRollup `protobuf:"bytes,19,rep,name=graphite_rollup,json=graphiteRollup,proto3" json:"graphite_rollup,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Kafka                                     *ClickhouseConfig_Kafka                     `protobuf:"bytes,20,opt,name=kafka,proto3" json:"kafka,omitempty"`
	KafkaTopics                               map[string]*ClickhouseConfig_Kafka          `protobuf:"bytes,21,rep,name=kafka_topics,json=kafkaTopics,proto3" json:"kafka_topics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Rabbitmq                                  *ClickhouseConfig_Rabbitmq                  `protobuf:"bytes,22,opt,name=rabbitmq,proto3" json:"rabbitmq,omitempty"`
	TotalMemoryTrackerSampleProbability       *wrapperspb.DoubleValue                     `protobuf:"bytes,23,opt,name=total_memory_tracker_sample_probability,json=totalMemoryTrackerSampleProbability,proto3" json:"total_memory_tracker_sample_probability,omitempty"`
	BackgroundMessageBrokerSchedulePoolSize   *wrapperspb.Int64Value                      `protobuf:"bytes,24,opt,name=background_message_broker_schedule_pool_size,json=backgroundMessageBrokerSchedulePoolSize,proto3" json:"background_message_broker_schedule_pool_size,omitempty"`
	QueryLogRetentionSize                     *wrapperspb.Int64Value                      `protobuf:"bytes,25,opt,name=query_log_retention_size,json=queryLogRetentionSize,proto3" json:"query_log_retention_size,omitempty"`
	QueryLogRetentionTime                     *durationpb.Duration                        `protobuf:"bytes,26,opt,name=query_log_retention_time,json=queryLogRetentionTime,proto3" json:"query_log_retention_time,omitempty"`
	QueryThreadLogEnabled                     *wrapperspb.BoolValue                       `protobuf:"bytes,27,opt,name=query_thread_log_enabled,json=queryThreadLogEnabled,proto3" json:"query_thread_log_enabled,omitempty"`
	QueryThreadLogRetentionSize               *wrapperspb.Int64Value                      `protobuf:"bytes,28,opt,name=query_thread_log_retention_size,json=queryThreadLogRetentionSize,proto3" json:"query_thread_log_retention_size,omitempty"`
	QueryThreadLogRetentionTime               *durationpb.Duration                        `protobuf:"bytes,29,opt,name=query_thread_log_retention_time,json=queryThreadLogRetentionTime,proto3" json:"query_thread_log_retention_time,omitempty"`
	QueryViewsLogEnabled                      *wrapperspb.BoolValue                       `protobuf:"bytes,30,opt,name=query_views_log_enabled,json=queryViewsLogEnabled,proto3" json:"query_views_log_enabled,omitempty"`
	QueryViewsLogRetentionSize                *wrapperspb.Int64Value                      `protobuf:"bytes,31,opt,name=query_views_log_retention_size,json=queryViewsLogRetentionSize,proto3" json:"query_views_log_retention_size,omitempty"`
	QueryViewsLogRetentionTime                *durationpb.Duration                        `protobuf:"bytes,32,opt,name=query_views_log_retention_time,json=queryViewsLogRetentionTime,proto3" json:"query_views_log_retention_time,omitempty"`
	PartLogRetentionSize                      *wrapperspb.Int64Value                      `protobuf:"bytes,33,opt,name=part_log_retention_size,json=partLogRetentionSize,proto3" json:"part_log_retention_size,omitempty"`
	PartLogRetentionTime                      *durationpb.Duration                        `protobuf:"bytes,34,opt,name=part_log_retention_time,json=partLogRetentionTime,proto3" json:"part_log_retention_time,omitempty"`
	MetricLogEnabled                          *wrapperspb.BoolValue                       `protobuf:"bytes,35,opt,name=metric_log_enabled,json=metricLogEnabled,proto3" json:"metric_log_enabled,omitempty"`
	MetricLogRetentionSize                    *wrapperspb.Int64Value                      `protobuf:"bytes,36,opt,name=metric_log_retention_size,json=metricLogRetentionSize,proto3" json:"metric_log_retention_size,omitempty"`
	MetricLogRetentionTime                    *durationpb.Duration                        `protobuf:"bytes,37,opt,name=metric_log_retention_time,json=metricLogRetentionTime,proto3" json:"metric_log_retention_time,omitempty"`
	AsynchronousMetricLogEnabled              *wrapperspb.BoolValue                       `protobuf:"bytes,38,opt,name=asynchronous_metric_log_enabled,json=asynchronousMetricLogEnabled,proto3" json:"asynchronous_metric_log_enabled,omitempty"`
	AsynchronousMetricLogRetentionSize        *wrapperspb.Int64Value                      `protobuf:"bytes,39,opt,name=asynchronous_metric_log_retention_size,json=asynchronousMetricLogRetentionSize,proto3" json:"asynchronous_metric_log_retention_size,omitempty"`
	AsynchronousMetricLogRetentionTime        *durationpb.Duration                        `protobuf:"bytes,40,opt,name=asynchronous_metric_log_retention_time,json=asynchronousMetricLogRetentionTime,proto3" json:"asynchronous_metric_log_retention_time,omitempty"`
	TraceLogEnabled                           *wrapperspb.BoolValue                       `protobuf:"bytes,41,opt,name=trace_log_enabled,json=traceLogEnabled,proto3" json:"trace_log_enabled,omitempty"`
	TraceLogRetentionSize                     *wrapperspb.Int64Value                      `protobuf:"bytes,42,opt,name=trace_log_retention_size,json=traceLogRetentionSize,proto3" json:"trace_log_retention_size,omitempty"`
	TraceLogRetentionTime                     *durationpb.Duration                        `protobuf:"bytes,43,opt,name=trace_log_retention_time,json=traceLogRetentionTime,proto3" json:"trace_log_retention_time,omitempty"`
	TextLogEnabled                            *wrapperspb.BoolValue                       `protobuf:"bytes,44,opt,name=text_log_enabled,json=textLogEnabled,proto3" json:"text_log_enabled,omitempty"`
	TextLogRetentionSize                      *wrapperspb.Int64Value                      `protobuf:"bytes,45,opt,name=text_log_retention_size,json=textLogRetentionSize,proto3" json:"text_log_retention_size,omitempty"`
	TextLogRetentionTime                      *durationpb.Duration                        `protobuf:"bytes,46,opt,name=text_log_retention_time,json=textLogRetentionTime,proto3" json:"text_log_retention_time,omitempty"`
	TextLogLevel                              ClickhouseConfig_LogLevel                   `protobuf:"varint,47,opt,name=text_log_level,json=textLogLevel,proto3,enum=doublecloud.clickhouse.v1.ClickhouseConfig_LogLevel" json:"text_log_level,omitempty"`
	OpentelemetrySpanLogEnabled               *wrapperspb.BoolValue                       `protobuf:"bytes,48,opt,name=opentelemetry_span_log_enabled,json=opentelemetrySpanLogEnabled,proto3" json:"opentelemetry_span_log_enabled,omitempty"`
	OpentelemetrySpanLogRetentionSize         *wrapperspb.Int64Value                      `protobuf:"bytes,49,opt,name=opentelemetry_span_log_retention_size,json=opentelemetrySpanLogRetentionSize,proto3" json:"opentelemetry_span_log_retention_size,omitempty"`
	OpentelemetrySpanLogRetentionTime         *durationpb.Duration                        `protobuf:"bytes,50,opt,name=opentelemetry_span_log_retention_time,json=opentelemetrySpanLogRetentionTime,proto3" json:"opentelemetry_span_log_retention_time,omitempty"`
	SessionLogEnabled                         *wrapperspb.BoolValue                       `protobuf:"bytes,51,opt,name=session_log_enabled,json=sessionLogEnabled,proto3" json:"session_log_enabled,omitempty"`
	SessionLogRetentionSize                   *wrapperspb.Int64Value                      `protobuf:"bytes,52,opt,name=session_log_retention_size,json=sessionLogRetentionSize,proto3" json:"session_log_retention_size,omitempty"`
	SessionLogRetentionTime                   *durationpb.Duration                        `protobuf:"bytes,53,opt,name=session_log_retention_time,json=sessionLogRetentionTime,proto3" json:"session_log_retention_time,omitempty"`
	ZookeeperLogEnabled                       *wrapperspb.BoolValue                       `protobuf:"bytes,54,opt,name=zookeeper_log_enabled,json=zookeeperLogEnabled,proto3" json:"zookeeper_log_enabled,omitempty"`
	ZookeeperLogRetentionSize                 *wrapperspb.Int64Value                      `protobuf:"bytes,55,opt,name=zookeeper_log_retention_size,json=zookeeperLogRetentionSize,proto3" json:"zookeeper_log_retention_size,omitempty"`
	ZookeeperLogRetentionTime                 *durationpb.Duration                        `protobuf:"bytes,56,opt,name=zookeeper_log_retention_time,json=zookeeperLogRetentionTime,proto3" json:"zookeeper_log_retention_time,omitempty"`
	AsynchronousInsertLogEnabled              *wrapperspb.BoolValue                       `protobuf:"bytes,57,opt,name=asynchronous_insert_log_enabled,json=asynchronousInsertLogEnabled,proto3" json:"asynchronous_insert_log_enabled,omitempty"`
	AsynchronousInsertLogRetentionSize        *wrapperspb.Int64Value                      `protobuf:"bytes,58,opt,name=asynchronous_insert_log_retention_size,json=asynchronousInsertLogRetentionSize,proto3" json:"asynchronous_insert_log_retention_size,omitempty"`
	AsynchronousInsertLogRetentionTime        *durationpb.Duration                        `protobuf:"bytes,59,opt,name=asynchronous_insert_log_retention_time,json=asynchronousInsertLogRetentionTime,proto3" json:"asynchronous_insert_log_retention_time,omitempty"`
}

func (x *ClickhouseConfig) Reset() {
	*x = ClickhouseConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig) ProtoMessage() {}

func (x *ClickhouseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_config_proto_rawDescGZIP(), []int{0}
}

func (x *ClickhouseConfig) GetLogLevel() ClickhouseConfig_LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return ClickhouseConfig_LOG_LEVEL_DEFAULT
}

func (x *ClickhouseConfig) GetMaxConnections() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxConnections
	}
	return nil
}

func (x *ClickhouseConfig) GetMaxConcurrentQueries() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxConcurrentQueries
	}
	return nil
}

func (x *ClickhouseConfig) GetKeepAliveTimeout() *durationpb.Duration {
	if x != nil {
		return x.KeepAliveTimeout
	}
	return nil
}

func (x *ClickhouseConfig) GetUncompressedCacheSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.UncompressedCacheSize
	}
	return nil
}

func (x *ClickhouseConfig) GetMarkCacheSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.MarkCacheSize
	}
	return nil
}

func (x *ClickhouseConfig) GetMaxTableSizeToDrop() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxTableSizeToDrop
	}
	return nil
}

func (x *ClickhouseConfig) GetMaxPartitionSizeToDrop() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxPartitionSizeToDrop
	}
	return nil
}

func (x *ClickhouseConfig) GetTimezone() *wrapperspb.StringValue {
	if x != nil {
		return x.Timezone
	}
	return nil
}

func (x *ClickhouseConfig) GetBackgroundPoolSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.BackgroundPoolSize
	}
	return nil
}

func (x *ClickhouseConfig) GetBackgroundSchedulePoolSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.BackgroundSchedulePoolSize
	}
	return nil
}

func (x *ClickhouseConfig) GetBackgroundFetchesPoolSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.BackgroundFetchesPoolSize
	}
	return nil
}

func (x *ClickhouseConfig) GetBackgroundMovePoolSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.BackgroundMovePoolSize
	}
	return nil
}

func (x *ClickhouseConfig) GetBackgroundCommonPoolSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.BackgroundCommonPoolSize
	}
	return nil
}

func (x *ClickhouseConfig) GetBackgroundMergesMutationsConcurrencyRatio() *wrapperspb.Int64Value {
	if x != nil {
		return x.BackgroundMergesMutationsConcurrencyRatio
	}
	return nil
}

func (x *ClickhouseConfig) GetTotalMemoryProfilerStep() *wrapperspb.Int64Value {
	if x != nil {
		return x.TotalMemoryProfilerStep
	}
	return nil
}

func (x *ClickhouseConfig) GetMergeTree() *ClickhouseConfig_MergeTree {
	if x != nil {
		return x.MergeTree
	}
	return nil
}

func (x *ClickhouseConfig) GetCompression() []*ClickhouseConfig_Compression {
	if x != nil {
		return x.Compression
	}
	return nil
}

func (x *ClickhouseConfig) GetGraphiteRollup() map[string]*ClickhouseConfig_GraphiteRollup {
	if x != nil {
		return x.GraphiteRollup
	}
	return nil
}

func (x *ClickhouseConfig) GetKafka() *ClickhouseConfig_Kafka {
	if x != nil {
		return x.Kafka
	}
	return nil
}

func (x *ClickhouseConfig) GetKafkaTopics() map[string]*ClickhouseConfig_Kafka {
	if x != nil {
		return x.KafkaTopics
	}
	return nil
}

func (x *ClickhouseConfig) GetRabbitmq() *ClickhouseConfig_Rabbitmq {
	if x != nil {
		return x.Rabbitmq
	}
	return nil
}

func (x *ClickhouseConfig) GetTotalMemoryTrackerSampleProbability() *wrapperspb.DoubleValue {
	if x != nil {
		return x.TotalMemoryTrackerSampleProbability
	}
	return nil
}

func (x *ClickhouseConfig) GetBackgroundMessageBrokerSchedulePoolSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.BackgroundMessageBrokerSchedulePoolSize
	}
	return nil
}

func (x *ClickhouseConfig) GetQueryLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.QueryLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetQueryLogRetentionTime() *durationpb.Duration {
	if x != nil {
		return x.QueryLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetQueryThreadLogEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.QueryThreadLogEnabled
	}
	return nil
}

func (x *ClickhouseConfig) GetQueryThreadLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.QueryThreadLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetQueryThreadLogRetentionTime() *durationpb.Duration {
	if x != nil {
		return x.QueryThreadLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetQueryViewsLogEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.QueryViewsLogEnabled
	}
	return nil
}

func (x *ClickhouseConfig) GetQueryViewsLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.QueryViewsLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetQueryViewsLogRetentionTime() *durationpb.Duration {
	if x != nil {
		return x.QueryViewsLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetPartLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.PartLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetPartLogRetentionTime() *durationpb.Duration {
	if x != nil {
		return x.PartLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetMetricLogEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.MetricLogEnabled
	}
	return nil
}

func (x *ClickhouseConfig) GetMetricLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.MetricLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetMetricLogRetentionTime() *durationpb.Duration {
	if x != nil {
		return x.MetricLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetAsynchronousMetricLogEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.AsynchronousMetricLogEnabled
	}
	return nil
}

func (x *ClickhouseConfig) GetAsynchronousMetricLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.AsynchronousMetricLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetAsynchronousMetricLogRetentionTime() *durationpb.Duration {
	if x != nil {
		return x.AsynchronousMetricLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetTraceLogEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.TraceLogEnabled
	}
	return nil
}

func (x *ClickhouseConfig) GetTraceLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.TraceLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetTraceLogRetentionTime() *durationpb.Duration {
	if x != nil {
		return x.TraceLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetTextLogEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.TextLogEnabled
	}
	return nil
}

func (x *ClickhouseConfig) GetTextLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.TextLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetTextLogRetentionTime() *durationpb.Duration {
	if x != nil {
		return x.TextLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetTextLogLevel() ClickhouseConfig_LogLevel {
	if x != nil {
		return x.TextLogLevel
	}
	return ClickhouseConfig_LOG_LEVEL_DEFAULT
}

func (x *ClickhouseConfig) GetOpentelemetrySpanLogEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.OpentelemetrySpanLogEnabled
	}
	return nil
}

func (x *ClickhouseConfig) GetOpentelemetrySpanLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.OpentelemetrySpanLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetOpentelemetrySpanLogRetentionTime() *durationpb.Duration {
	if x != nil {
		return x.OpentelemetrySpanLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetSessionLogEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.SessionLogEnabled
	}
	return nil
}

func (x *ClickhouseConfig) GetSessionLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.SessionLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetSessionLogRetentionTime() *durationpb.Duration {
	if x != nil {
		return x.SessionLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetZookeeperLogEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.ZookeeperLogEnabled
	}
	return nil
}

func (x *ClickhouseConfig) GetZookeeperLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.ZookeeperLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetZookeeperLogRetentionTime() *durationpb.Duration {
	if x != nil {
		return x.ZookeeperLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetAsynchronousInsertLogEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.AsynchronousInsertLogEnabled
	}
	return nil
}

func (x *ClickhouseConfig) GetAsynchronousInsertLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.AsynchronousInsertLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetAsynchronousInsertLogRetentionTime() *durationpb.Duration {
	if x != nil {
		return x.AsynchronousInsertLogRetentionTime
	}
	return nil
}

type ClickhouseConfig_MergeTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicatedDeduplicationWindow                  *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=replicated_deduplication_window,json=replicatedDeduplicationWindow,proto3" json:"replicated_deduplication_window,omitempty"`
	ReplicatedDeduplicationWindowSeconds           *durationpb.Duration   `protobuf:"bytes,2,opt,name=replicated_deduplication_window_seconds,json=replicatedDeduplicationWindowSeconds,proto3" json:"replicated_deduplication_window_seconds,omitempty"`
	PartsToDelayInsert                             *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=parts_to_delay_insert,json=partsToDelayInsert,proto3" json:"parts_to_delay_insert,omitempty"`
	PartsToThrowInsert                             *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=parts_to_throw_insert,json=partsToThrowInsert,proto3" json:"parts_to_throw_insert,omitempty"`
	MaxReplicatedMergesInQueue                     *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=max_replicated_merges_in_queue,json=maxReplicatedMergesInQueue,proto3" json:"max_replicated_merges_in_queue,omitempty"`
	NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=number_of_free_entries_in_pool_to_lower_max_size_of_merge,json=numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge,proto3" json:"number_of_free_entries_in_pool_to_lower_max_size_of_merge,omitempty"`
	MaxBytesToMergeAtMinSpaceInPool                *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=max_bytes_to_merge_at_min_space_in_pool,json=maxBytesToMergeAtMinSpaceInPool,proto3" json:"max_bytes_to_merge_at_min_space_in_pool,omitempty"`
	MaxBytesToMergeAtMaxSpaceInPool                *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=max_bytes_to_merge_at_max_space_in_pool,json=maxBytesToMergeAtMaxSpaceInPool,proto3" json:"max_bytes_to_merge_at_max_space_in_pool,omitempty"`
	MinBytesForWidePart                            *wrapperspb.Int64Value `protobuf:"bytes,9,opt,name=min_bytes_for_wide_part,json=minBytesForWidePart,proto3" json:"min_bytes_for_wide_part,omitempty"`
	MinRowsForWidePart                             *wrapperspb.Int64Value `protobuf:"bytes,10,opt,name=min_rows_for_wide_part,json=minRowsForWidePart,proto3" json:"min_rows_for_wide_part,omitempty"`
	TtlOnlyDropParts                               *wrapperspb.BoolValue  `protobuf:"bytes,11,opt,name=ttl_only_drop_parts,json=ttlOnlyDropParts,proto3" json:"ttl_only_drop_parts,omitempty"`
	InactivePartsToDelayInsert                     *wrapperspb.Int64Value `protobuf:"bytes,12,opt,name=inactive_parts_to_delay_insert,json=inactivePartsToDelayInsert,proto3" json:"inactive_parts_to_delay_insert,omitempty"`
	InactivePartsToThrowInsert                     *wrapperspb.Int64Value `protobuf:"bytes,13,opt,name=inactive_parts_to_throw_insert,json=inactivePartsToThrowInsert,proto3" json:"inactive_parts_to_throw_insert,omitempty"`
	AllowRemoteFsZeroCopyReplication               *wrapperspb.BoolValue  `protobuf:"bytes,14,opt,name=allow_remote_fs_zero_copy_replication,json=allowRemoteFsZeroCopyReplication,proto3" json:"allow_remote_fs_zero_copy_replication,omitempty"`
	MergeWithTtlTimeout                            *durationpb.Duration   `protobuf:"bytes,15,opt,name=merge_with_ttl_timeout,json=mergeWithTtlTimeout,proto3" json:"merge_with_ttl_timeout,omitempty"`
	MergeWithRecompressionTtlTimeout               *durationpb.Duration   `protobuf:"bytes,16,opt,name=merge_with_recompression_ttl_timeout,json=mergeWithRecompressionTtlTimeout,proto3" json:"merge_with_recompression_ttl_timeout,omitempty"`
	MaxPartsInTotal                                *wrapperspb.Int64Value `protobuf:"bytes,17,opt,name=max_parts_in_total,json=maxPartsInTotal,proto3" json:"max_parts_in_total,omitempty"`
	MaxNumberOfMergesWithTtlInPool                 *wrapperspb.Int64Value `protobuf:"bytes,18,opt,name=max_number_of_merges_with_ttl_in_pool,json=maxNumberOfMergesWithTtlInPool,proto3" json:"max_number_of_merges_with_ttl_in_pool,omitempty"`
	CleanupDelayPeriod                             *durationpb.Duration   `protobuf:"bytes,19,opt,name=cleanup_delay_period,json=cleanupDelayPeriod,proto3" json:"cleanup_delay_period,omitempty"`
	NumberOfFreeEntriesInPoolToExecuteMutation     *wrapperspb.Int64Value `protobuf:"bytes,20,opt,name=number_of_free_entries_in_pool_to_execute_mutation,json=numberOfFreeEntriesInPoolToExecuteMutation,proto3" json:"number_of_free_entries_in_pool_to_execute_mutation,omitempty"`
	MaxAvgPartSizeForTooManyParts                  *wrapperspb.Int64Value `protobuf:"bytes,21,opt,name=max_avg_part_size_for_too_many_parts,json=maxAvgPartSizeForTooManyParts,proto3" json:"max_avg_part_size_for_too_many_parts,omitempty"`
	MinAgeToForceMergeSeconds                      *durationpb.Duration   `protobuf:"bytes,22,opt,name=min_age_to_force_merge_seconds,json=minAgeToForceMergeSeconds,proto3" json:"min_age_to_force_merge_seconds,omitempty"`
	MinAgeToForceMergeOnPartitionOnly              *wrapperspb.BoolValue  `protobuf:"bytes,23,opt,name=min_age_to_force_merge_on_partition_only,json=minAgeToForceMergeOnPartitionOnly,proto3" json:"min_age_to_force_merge_on_partition_only,omitempty"`
	MergeSelectingSleepMs                          *durationpb.Duration   `protobuf:"bytes,24,opt,name=merge_selecting_sleep_ms,json=mergeSelectingSleepMs,proto3" json:"merge_selecting_sleep_ms,omitempty"`
}

func (x *ClickhouseConfig_MergeTree) Reset() {
	*x = ClickhouseConfig_MergeTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig_MergeTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_MergeTree) ProtoMessage() {}

func (x *ClickhouseConfig_MergeTree) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_MergeTree.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_MergeTree) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_config_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ClickhouseConfig_MergeTree) GetReplicatedDeduplicationWindow() *wrapperspb.Int64Value {
	if x != nil {
		return x.ReplicatedDeduplicationWindow
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetReplicatedDeduplicationWindowSeconds() *durationpb.Duration {
	if x != nil {
		return x.ReplicatedDeduplicationWindowSeconds
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetPartsToDelayInsert() *wrapperspb.Int64Value {
	if x != nil {
		return x.PartsToDelayInsert
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetPartsToThrowInsert() *wrapperspb.Int64Value {
	if x != nil {
		return x.PartsToThrowInsert
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMaxReplicatedMergesInQueue() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxReplicatedMergesInQueue
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge() *wrapperspb.Int64Value {
	if x != nil {
		return x.NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMaxBytesToMergeAtMinSpaceInPool() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxBytesToMergeAtMinSpaceInPool
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMaxBytesToMergeAtMaxSpaceInPool() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxBytesToMergeAtMaxSpaceInPool
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMinBytesForWidePart() *wrapperspb.Int64Value {
	if x != nil {
		return x.MinBytesForWidePart
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMinRowsForWidePart() *wrapperspb.Int64Value {
	if x != nil {
		return x.MinRowsForWidePart
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetTtlOnlyDropParts() *wrapperspb.BoolValue {
	if x != nil {
		return x.TtlOnlyDropParts
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetInactivePartsToDelayInsert() *wrapperspb.Int64Value {
	if x != nil {
		return x.InactivePartsToDelayInsert
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetInactivePartsToThrowInsert() *wrapperspb.Int64Value {
	if x != nil {
		return x.InactivePartsToThrowInsert
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetAllowRemoteFsZeroCopyReplication() *wrapperspb.BoolValue {
	if x != nil {
		return x.AllowRemoteFsZeroCopyReplication
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMergeWithTtlTimeout() *durationpb.Duration {
	if x != nil {
		return x.MergeWithTtlTimeout
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMergeWithRecompressionTtlTimeout() *durationpb.Duration {
	if x != nil {
		return x.MergeWithRecompressionTtlTimeout
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMaxPartsInTotal() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxPartsInTotal
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMaxNumberOfMergesWithTtlInPool() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxNumberOfMergesWithTtlInPool
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetCleanupDelayPeriod() *durationpb.Duration {
	if x != nil {
		return x.CleanupDelayPeriod
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetNumberOfFreeEntriesInPoolToExecuteMutation() *wrapperspb.Int64Value {
	if x != nil {
		return x.NumberOfFreeEntriesInPoolToExecuteMutation
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMaxAvgPartSizeForTooManyParts() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxAvgPartSizeForTooManyParts
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMinAgeToForceMergeSeconds() *durationpb.Duration {
	if x != nil {
		return x.MinAgeToForceMergeSeconds
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMinAgeToForceMergeOnPartitionOnly() *wrapperspb.BoolValue {
	if x != nil {
		return x.MinAgeToForceMergeOnPartitionOnly
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMergeSelectingSleepMs() *durationpb.Duration {
	if x != nil {
		return x.MergeSelectingSleepMs
	}
	return nil
}

type ClickhouseConfig_Kafka struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityProtocol                 ClickhouseConfig_Kafka_SecurityProtocol `protobuf:"varint,1,opt,name=security_protocol,json=securityProtocol,proto3,enum=doublecloud.clickhouse.v1.ClickhouseConfig_Kafka_SecurityProtocol" json:"security_protocol,omitempty"`
	SaslMechanism                    ClickhouseConfig_Kafka_SaslMechanism    `protobuf:"varint,2,opt,name=sasl_mechanism,json=saslMechanism,proto3,enum=doublecloud.clickhouse.v1.ClickhouseConfig_Kafka_SaslMechanism" json:"sasl_mechanism,omitempty"`
	SaslUsername                     *wrapperspb.StringValue                 `protobuf:"bytes,3,opt,name=sasl_username,json=saslUsername,proto3" json:"sasl_username,omitempty"`
	SaslPassword                     *wrapperspb.StringValue                 `protobuf:"bytes,4,opt,name=sasl_password,json=saslPassword,proto3" json:"sasl_password,omitempty"`
	EnableSslCertificateVerification *wrapperspb.BoolValue                   `protobuf:"bytes,5,opt,name=enable_ssl_certificate_verification,json=enableSslCertificateVerification,proto3" json:"enable_ssl_certificate_verification,omitempty"`
	MaxPollIntervalMs                *durationpb.Duration                    `protobuf:"bytes,6,opt,name=max_poll_interval_ms,json=maxPollIntervalMs,proto3" json:"max_poll_interval_ms,omitempty"`
	SessionTimeoutMs                 *durationpb.Duration                    `protobuf:"bytes,7,opt,name=session_timeout_ms,json=sessionTimeoutMs,proto3" json:"session_timeout_ms,omitempty"`
}

func (x *ClickhouseConfig_Kafka) Reset() {
	*x = ClickhouseConfig_Kafka{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig_Kafka) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_Kafka) ProtoMessage() {}

func (x *ClickhouseConfig_Kafka) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_Kafka.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_Kafka) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_config_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ClickhouseConfig_Kafka) GetSecurityProtocol() ClickhouseConfig_Kafka_SecurityProtocol {
	if x != nil {
		return x.SecurityProtocol
	}
	return ClickhouseConfig_Kafka_SECURITY_PROTOCOL_INVALID
}

func (x *ClickhouseConfig_Kafka) GetSaslMechanism() ClickhouseConfig_Kafka_SaslMechanism {
	if x != nil {
		return x.SaslMechanism
	}
	return ClickhouseConfig_Kafka_SASL_MECHANISM_INVALID
}

func (x *ClickhouseConfig_Kafka) GetSaslUsername() *wrapperspb.StringValue {
	if x != nil {
		return x.SaslUsername
	}
	return nil
}

func (x *ClickhouseConfig_Kafka) GetSaslPassword() *wrapperspb.StringValue {
	if x != nil {
		return x.SaslPassword
	}
	return nil
}

func (x *ClickhouseConfig_Kafka) GetEnableSslCertificateVerification() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableSslCertificateVerification
	}
	return nil
}

func (x *ClickhouseConfig_Kafka) GetMaxPollIntervalMs() *durationpb.Duration {
	if x != nil {
		return x.MaxPollIntervalMs
	}
	return nil
}

func (x *ClickhouseConfig_Kafka) GetSessionTimeoutMs() *durationpb.Duration {
	if x != nil {
		return x.SessionTimeoutMs
	}
	return nil
}

type ClickhouseConfig_Rabbitmq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Vhost    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=vhost,proto3" json:"vhost,omitempty"`
}

func (x *ClickhouseConfig_Rabbitmq) Reset() {
	*x = ClickhouseConfig_Rabbitmq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig_Rabbitmq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_Rabbitmq) ProtoMessage() {}

func (x *ClickhouseConfig_Rabbitmq) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_Rabbitmq.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_Rabbitmq) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_config_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ClickhouseConfig_Rabbitmq) GetUsername() *wrapperspb.StringValue {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *ClickhouseConfig_Rabbitmq) GetPassword() *wrapperspb.StringValue {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *ClickhouseConfig_Rabbitmq) GetVhost() *wrapperspb.StringValue {
	if x != nil {
		return x.Vhost
	}
	return nil
}

type ClickhouseConfig_Compression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method           ClickhouseConfig_Compression_Method `protobuf:"varint,1,opt,name=method,proto3,enum=doublecloud.clickhouse.v1.ClickhouseConfig_Compression_Method" json:"method,omitempty"`
	MinPartSize      int64                               `protobuf:"varint,2,opt,name=min_part_size,json=minPartSize,proto3" json:"min_part_size,omitempty"`
	MinPartSizeRatio float64                             `protobuf:"fixed64,3,opt,name=min_part_size_ratio,json=minPartSizeRatio,proto3" json:"min_part_size_ratio,omitempty"`
	Level            *wrapperspb.Int64Value              `protobuf:"bytes,4,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *ClickhouseConfig_Compression) Reset() {
	*x = ClickhouseConfig_Compression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig_Compression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_Compression) ProtoMessage() {}

func (x *ClickhouseConfig_Compression) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_Compression.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_Compression) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_config_proto_rawDescGZIP(), []int{0, 3}
}

func (x *ClickhouseConfig_Compression) GetMethod() ClickhouseConfig_Compression_Method {
	if x != nil {
		return x.Method
	}
	return ClickhouseConfig_Compression_METHOD_INVALID
}

func (x *ClickhouseConfig_Compression) GetMinPartSize() int64 {
	if x != nil {
		return x.MinPartSize
	}
	return 0
}

func (x *ClickhouseConfig_Compression) GetMinPartSizeRatio() float64 {
	if x != nil {
		return x.MinPartSizeRatio
	}
	return 0
}

func (x *ClickhouseConfig_Compression) GetLevel() *wrapperspb.Int64Value {
	if x != nil {
		return x.Level
	}
	return nil
}

// Rollup settings for the GraphiteMergeTree table engine.
type ClickhouseConfig_GraphiteRollup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Patterns []*ClickhouseConfig_GraphiteRollup_Pattern `protobuf:"bytes,1,rep,name=patterns,proto3" json:"patterns,omitempty"`
}

func (x *ClickhouseConfig_GraphiteRollup) Reset() {
	*x = ClickhouseConfig_GraphiteRollup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig_GraphiteRollup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_GraphiteRollup) ProtoMessage() {}

func (x *ClickhouseConfig_GraphiteRollup) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_GraphiteRollup.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_GraphiteRollup) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_config_proto_rawDescGZIP(), []int{0, 4}
}

func (x *ClickhouseConfig_GraphiteRollup) GetPatterns() []*ClickhouseConfig_GraphiteRollup_Pattern {
	if x != nil {
		return x.Patterns
	}
	return nil
}

type ClickhouseConfig_GraphiteRollup_Pattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Regexp    *wrapperspb.StringValue                              `protobuf:"bytes,1,opt,name=regexp,proto3" json:"regexp,omitempty"`
	Function  *wrapperspb.StringValue                              `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
	Retention []*ClickhouseConfig_GraphiteRollup_Pattern_Retention `protobuf:"bytes,3,rep,name=retention,proto3" json:"retention,omitempty"`
}

func (x *ClickhouseConfig_GraphiteRollup_Pattern) Reset() {
	*x = ClickhouseConfig_GraphiteRollup_Pattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig_GraphiteRollup_Pattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_GraphiteRollup_Pattern) ProtoMessage() {}

func (x *ClickhouseConfig_GraphiteRollup_Pattern) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_GraphiteRollup_Pattern.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_GraphiteRollup_Pattern) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_config_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *ClickhouseConfig_GraphiteRollup_Pattern) GetRegexp() *wrapperspb.StringValue {
	if x != nil {
		return x.Regexp
	}
	return nil
}

func (x *ClickhouseConfig_GraphiteRollup_Pattern) GetFunction() *wrapperspb.StringValue {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *ClickhouseConfig_GraphiteRollup_Pattern) GetRetention() []*ClickhouseConfig_GraphiteRollup_Pattern_Retention {
	if x != nil {
		return x.Retention
	}
	return nil
}

type ClickhouseConfig_GraphiteRollup_Pattern_Retention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Age       int64 `protobuf:"varint,1,opt,name=age,proto3" json:"age,omitempty"`
	Precision int64 `protobuf:"varint,2,opt,name=precision,proto3" json:"precision,omitempty"`
}

func (x *ClickhouseConfig_GraphiteRollup_Pattern_Retention) Reset() {
	*x = ClickhouseConfig_GraphiteRollup_Pattern_Retention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig_GraphiteRollup_Pattern_Retention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_GraphiteRollup_Pattern_Retention) ProtoMessage() {}

func (x *ClickhouseConfig_GraphiteRollup_Pattern_Retention) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_GraphiteRollup_Pattern_Retention.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_GraphiteRollup_Pattern_Retention) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_config_proto_rawDescGZIP(), []int{0, 4, 0, 0}
}

func (x *ClickhouseConfig_GraphiteRollup_Pattern_Retention) GetAge() int64 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *ClickhouseConfig_GraphiteRollup_Pattern_Retention) GetPrecision() int64 {
	if x != nil {
		return x.Precision
	}
	return 0
}

var File_doublecloud_clickhouse_v1_config_proto protoreflect.FileDescriptor

var file_doublecloud_clickhouse_v1_config_proto_rawDesc = []byte{
	0x0a, 0x26, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xfc, 0x4d, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x51, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x44, 0x0a, 0x0f, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x51, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14,
	0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x12, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6b, 0x65, 0x65,
	0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x53, 0x0a,
	0x17, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x75, 0x6e, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4f, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x54, 0x6f, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x57, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x6f, 0x44, 0x72, 0x6f,
	0x70, 0x12, 0x38, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x5e, 0x0a, 0x1d, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x5c, 0x0a, 0x1c, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x56, 0x0a, 0x19, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x5a, 0x0a, 0x1b, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x18, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x7d, 0x0a, 0x2d,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x73, 0x5f, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x29, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x73, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x58, 0x0a, 0x1a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x72, 0x53, 0x74, 0x65, 0x70, 0x12, 0x54, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x74,
	0x72, 0x65, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x52, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x72, 0x65, 0x65, 0x12, 0x59, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x0f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70,
	0x12, 0x47, 0x0a, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x52, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x12, 0x5f, 0x0a, 0x0c, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6b,
	0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x50, 0x0a, 0x08, 0x72, 0x61,
	0x62, 0x62, 0x69, 0x74, 0x6d, 0x71, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74,
	0x6d, 0x71, 0x52, 0x08, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x6d, 0x71, 0x12, 0x72, 0x0a, 0x27,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x23, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x7a, 0x0a, 0x2c, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x27, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x54, 0x0a, 0x18,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x52, 0x0a, 0x18, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x15, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x18, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x61, 0x0a, 0x1f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x1b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x5f,
	0x0a, 0x1f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6c,
	0x6f, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x1b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x51, 0x0a, 0x17, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x6c,
	0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x73, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x5f, 0x0a, 0x1e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69,
	0x65, 0x77, 0x73, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x5d, 0x0a, 0x1e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69, 0x65,
	0x77, 0x73, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x52, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x14, 0x70, 0x61, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x50, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x14, 0x70, 0x61, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x10, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x56, 0x0a, 0x19, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x16, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x54, 0x0a, 0x19, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x61, 0x0a, 0x1f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e,
	0x6f, 0x75, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x6f, 0x0a, 0x26, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e,
	0x6f, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x22, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x6d, 0x0a, 0x26, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f,
	0x6e, 0x6f, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x22, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x18, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x52, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x74, 0x65, 0x78,
	0x74, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x52, 0x0a, 0x17, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x74, 0x65, 0x78, 0x74, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x50, 0x0a, 0x17, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x74, 0x65, 0x78,
	0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x5a, 0x0a, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x0c, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x5f, 0x0a,
	0x1e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x73,
	0x70, 0x61, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x1b, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x53, 0x70, 0x61, 0x6e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x6d,
	0x0a, 0x25, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x73, 0x70, 0x61, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x21, 0x6f, 0x70, 0x65, 0x6e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x70, 0x61, 0x6e, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x6b, 0x0a,
	0x25, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x73,
	0x70, 0x61, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x21, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x70, 0x61, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x11, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x1a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x56, 0x0a, 0x1a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x17, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x7a, 0x6f, 0x6f, 0x6b,
	0x65, 0x65, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x13, 0x7a, 0x6f, 0x6f, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5c, 0x0a, 0x1c, 0x7a, 0x6f, 0x6f, 0x6b,
	0x65, 0x65, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x7a, 0x6f, 0x6f,
	0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x5a, 0x0a, 0x1c, 0x7a, 0x6f, 0x6f, 0x6b, 0x65, 0x65,
	0x70, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x7a, 0x6f, 0x6f, 0x6b, 0x65, 0x65, 0x70,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x61, 0x0a, 0x1f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f,
	0x75, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72,
	0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x6f, 0x0a, 0x26, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72,
	0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x22, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x6d, 0x0a, 0x26, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x22, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xc1, 0x12, 0x0a, 0x09, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x12, 0x63, 0x0a, 0x1f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x70, 0x0a, 0x27, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x24, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x4e, 0x0a, 0x15, 0x70, 0x61,
	0x72, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x73, 0x54, 0x6f, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x4e, 0x0a, 0x15, 0x70, 0x61,
	0x72, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x73, 0x54, 0x6f, 0x54,
	0x68, 0x72, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x5f, 0x0a, 0x1e, 0x6d, 0x61,
	0x78, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x1a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x73, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x39,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x74,
	0x6f, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x2e, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46, 0x72, 0x65, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x49, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x61,
	0x78, 0x53, 0x69, 0x7a, 0x65, 0x4f, 0x66, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x6d, 0x0a, 0x27,
	0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1f, 0x6d, 0x61, 0x78, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x74, 0x4d, 0x69, 0x6e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x6d, 0x0a, 0x27, 0x6d,
	0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1f, 0x6d, 0x61, 0x78, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x74, 0x4d, 0x61, 0x78, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x51, 0x0a, 0x17, 0x6d, 0x69,
	0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x77, 0x69, 0x64, 0x65,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x57, 0x69, 0x64, 0x65, 0x50, 0x61, 0x72, 0x74, 0x12, 0x4f, 0x0a,
	0x16, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x77, 0x69,
	0x64, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x52,
	0x6f, 0x77, 0x73, 0x46, 0x6f, 0x72, 0x57, 0x69, 0x64, 0x65, 0x50, 0x61, 0x72, 0x74, 0x12, 0x49,
	0x0a, 0x13, 0x74, 0x74, 0x6c, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x74, 0x74, 0x6c, 0x4f, 0x6e, 0x6c, 0x79,
	0x44, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x1e, 0x69, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a,
	0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x73, 0x54, 0x6f, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x5f, 0x0a, 0x1e, 0x69, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x74, 0x68, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x1a, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x73, 0x54, 0x6f,
	0x54, 0x68, 0x72, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x6b, 0x0a, 0x25, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x73, 0x5f, 0x7a,
	0x65, 0x72, 0x6f, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x46, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x16, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x13, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x54, 0x74,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x69, 0x0a, 0x24, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x20, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x74, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x48, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73,
	0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6d, 0x61,
	0x78, 0x50, 0x61, 0x72, 0x74, 0x73, 0x49, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x6a, 0x0a,
	0x25, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x69,
	0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1e, 0x6d, 0x61, 0x78, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x54, 0x74, 0x6c, 0x49, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x4b, 0x0a, 0x14, 0x63, 0x6c, 0x65,
	0x61, 0x6e, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x12, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x83, 0x01, 0x0a, 0x32, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x2a, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46, 0x72, 0x65, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x24,
	0x6d, 0x61, 0x78, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x6f, 0x5f, 0x6d, 0x61, 0x6e, 0x79, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x6d, 0x61, 0x78, 0x41, 0x76, 0x67, 0x50,
	0x61, 0x72, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e,
	0x79, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x1e, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x6d, 0x69, 0x6e, 0x41, 0x67,
	0x65, 0x54, 0x6f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x6f, 0x0a, 0x28, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x21, 0x6d, 0x69, 0x6e, 0x41, 0x67, 0x65, 0x54, 0x6f, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x52, 0x0a, 0x18, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x6d,
	0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x15, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x4d, 0x73, 0x1a, 0xc3, 0x07, 0x0a, 0x05, 0x4b, 0x61,
	0x66, 0x6b, 0x61, 0x12, 0x6f, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42,
	0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x61, 0x66, 0x6b,
	0x61, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x66, 0x0a, 0x0e, 0x73, 0x61, 0x73, 0x6c, 0x5f, 0x6d, 0x65, 0x63,
	0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x2e,
	0x53, 0x61, 0x73, 0x6c, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52, 0x0d, 0x73,
	0x61, 0x73, 0x6c, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x41, 0x0a, 0x0d,
	0x73, 0x61, 0x73, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0c, 0x73, 0x61, 0x73, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x41, 0x0a, 0x0d, 0x73, 0x61, 0x73, 0x6c, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x61, 0x73, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x69, 0x0a, 0x23, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x73, 0x6c,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x20, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a,
	0x14, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x6c, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x12, 0x47, 0x0a, 0x12, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x4d, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x49,
	0x4e, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x53, 0x4c,
	0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x41, 0x53, 0x4c, 0x5f, 0x50, 0x4c, 0x41,
	0x49, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x41,
	0x53, 0x4c, 0x5f, 0x53, 0x53, 0x4c, 0x10, 0x04, 0x22, 0xa4, 0x01, 0x0a, 0x0d, 0x53, 0x61, 0x73,
	0x6c, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x41,
	0x53, 0x4c, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x41, 0x53, 0x4c, 0x5f, 0x4d,
	0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x47, 0x53, 0x53, 0x41, 0x50, 0x49, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x41, 0x53, 0x4c, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e,
	0x49, 0x53, 0x4d, 0x5f, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x53,
	0x41, 0x53, 0x4c, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x53, 0x43,
	0x52, 0x41, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x03, 0x12, 0x20, 0x0a,
	0x1c, 0x53, 0x41, 0x53, 0x4c, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f,
	0x53, 0x43, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x35, 0x31, 0x32, 0x10, 0x04, 0x1a,
	0xb2, 0x01, 0x0a, 0x08, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x6d, 0x71, 0x12, 0x38, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x32, 0x0a, 0x05, 0x76, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x68, 0x6f, 0x73, 0x74, 0x1a, 0xbc, 0x02, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d,
	0x69, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x31, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x22, 0x4f, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x0e,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4c, 0x5a, 0x34, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x5a, 0x53, 0x54, 0x44, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4c, 0x5a, 0x34, 0x48,
	0x43, 0x10, 0x03, 0x1a, 0x95, 0x03, 0x0a, 0x0e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x74, 0x65,
	0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x12, 0x5e, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x74, 0x65, 0x52, 0x6f,
	0x6c, 0x6c, 0x75, 0x70, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x08, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x1a, 0xa2, 0x02, 0x0a, 0x07, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x38, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x75,
	0x70, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3b,
	0x0a, 0x09, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x7d, 0x0a, 0x13, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x71, 0x0a, 0x10, 0x4b, 0x61,
	0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x92, 0x01,
	0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f,
	0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x54,
	0x52, 0x41, 0x43, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4c,
	0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x13, 0x0a,
	0x0f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x05, 0x42, 0x49, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d,
	0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2f,
	0x76, 0x31, 0x3b, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_doublecloud_clickhouse_v1_config_proto_rawDescOnce sync.Once
	file_doublecloud_clickhouse_v1_config_proto_rawDescData = file_doublecloud_clickhouse_v1_config_proto_rawDesc
)

func file_doublecloud_clickhouse_v1_config_proto_rawDescGZIP() []byte {
	file_doublecloud_clickhouse_v1_config_proto_rawDescOnce.Do(func() {
		file_doublecloud_clickhouse_v1_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_doublecloud_clickhouse_v1_config_proto_rawDescData)
	})
	return file_doublecloud_clickhouse_v1_config_proto_rawDescData
}

var file_doublecloud_clickhouse_v1_config_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_doublecloud_clickhouse_v1_config_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_doublecloud_clickhouse_v1_config_proto_goTypes = []interface{}{
	(ClickhouseConfig_LogLevel)(0),                            // 0: doublecloud.clickhouse.v1.ClickhouseConfig.LogLevel
	(ClickhouseConfig_Kafka_SecurityProtocol)(0),              // 1: doublecloud.clickhouse.v1.ClickhouseConfig.Kafka.SecurityProtocol
	(ClickhouseConfig_Kafka_SaslMechanism)(0),                 // 2: doublecloud.clickhouse.v1.ClickhouseConfig.Kafka.SaslMechanism
	(ClickhouseConfig_Compression_Method)(0),                  // 3: doublecloud.clickhouse.v1.ClickhouseConfig.Compression.Method
	(*ClickhouseConfig)(nil),                                  // 4: doublecloud.clickhouse.v1.ClickhouseConfig
	(*ClickhouseConfig_MergeTree)(nil),                        // 5: doublecloud.clickhouse.v1.ClickhouseConfig.MergeTree
	(*ClickhouseConfig_Kafka)(nil),                            // 6: doublecloud.clickhouse.v1.ClickhouseConfig.Kafka
	(*ClickhouseConfig_Rabbitmq)(nil),                         // 7: doublecloud.clickhouse.v1.ClickhouseConfig.Rabbitmq
	(*ClickhouseConfig_Compression)(nil),                      // 8: doublecloud.clickhouse.v1.ClickhouseConfig.Compression
	(*ClickhouseConfig_GraphiteRollup)(nil),                   // 9: doublecloud.clickhouse.v1.ClickhouseConfig.GraphiteRollup
	nil,                                                       // 10: doublecloud.clickhouse.v1.ClickhouseConfig.GraphiteRollupEntry
	nil,                                                       // 11: doublecloud.clickhouse.v1.ClickhouseConfig.KafkaTopicsEntry
	(*ClickhouseConfig_GraphiteRollup_Pattern)(nil),           // 12: doublecloud.clickhouse.v1.ClickhouseConfig.GraphiteRollup.Pattern
	(*ClickhouseConfig_GraphiteRollup_Pattern_Retention)(nil), // 13: doublecloud.clickhouse.v1.ClickhouseConfig.GraphiteRollup.Pattern.Retention
	(*wrapperspb.Int64Value)(nil),                             // 14: google.protobuf.Int64Value
	(*durationpb.Duration)(nil),                               // 15: google.protobuf.Duration
	(*wrapperspb.StringValue)(nil),                            // 16: google.protobuf.StringValue
	(*wrapperspb.DoubleValue)(nil),                            // 17: google.protobuf.DoubleValue
	(*wrapperspb.BoolValue)(nil),                              // 18: google.protobuf.BoolValue
}
var file_doublecloud_clickhouse_v1_config_proto_depIdxs = []int32{
	0,   // 0: doublecloud.clickhouse.v1.ClickhouseConfig.log_level:type_name -> doublecloud.clickhouse.v1.ClickhouseConfig.LogLevel
	14,  // 1: doublecloud.clickhouse.v1.ClickhouseConfig.max_connections:type_name -> google.protobuf.Int64Value
	14,  // 2: doublecloud.clickhouse.v1.ClickhouseConfig.max_concurrent_queries:type_name -> google.protobuf.Int64Value
	15,  // 3: doublecloud.clickhouse.v1.ClickhouseConfig.keep_alive_timeout:type_name -> google.protobuf.Duration
	14,  // 4: doublecloud.clickhouse.v1.ClickhouseConfig.uncompressed_cache_size:type_name -> google.protobuf.Int64Value
	14,  // 5: doublecloud.clickhouse.v1.ClickhouseConfig.mark_cache_size:type_name -> google.protobuf.Int64Value
	14,  // 6: doublecloud.clickhouse.v1.ClickhouseConfig.max_table_size_to_drop:type_name -> google.protobuf.Int64Value
	14,  // 7: doublecloud.clickhouse.v1.ClickhouseConfig.max_partition_size_to_drop:type_name -> google.protobuf.Int64Value
	16,  // 8: doublecloud.clickhouse.v1.ClickhouseConfig.timezone:type_name -> google.protobuf.StringValue
	14,  // 9: doublecloud.clickhouse.v1.ClickhouseConfig.background_pool_size:type_name -> google.protobuf.Int64Value
	14,  // 10: doublecloud.clickhouse.v1.ClickhouseConfig.background_schedule_pool_size:type_name -> google.protobuf.Int64Value
	14,  // 11: doublecloud.clickhouse.v1.ClickhouseConfig.background_fetches_pool_size:type_name -> google.protobuf.Int64Value
	14,  // 12: doublecloud.clickhouse.v1.ClickhouseConfig.background_move_pool_size:type_name -> google.protobuf.Int64Value
	14,  // 13: doublecloud.clickhouse.v1.ClickhouseConfig.background_common_pool_size:type_name -> google.protobuf.Int64Value
	14,  // 14: doublecloud.clickhouse.v1.ClickhouseConfig.background_merges_mutations_concurrency_ratio:type_name -> google.protobuf.Int64Value
	14,  // 15: doublecloud.clickhouse.v1.ClickhouseConfig.total_memory_profiler_step:type_name -> google.protobuf.Int64Value
	5,   // 16: doublecloud.clickhouse.v1.ClickhouseConfig.merge_tree:type_name -> doublecloud.clickhouse.v1.ClickhouseConfig.MergeTree
	8,   // 17: doublecloud.clickhouse.v1.ClickhouseConfig.compression:type_name -> doublecloud.clickhouse.v1.ClickhouseConfig.Compression
	10,  // 18: doublecloud.clickhouse.v1.ClickhouseConfig.graphite_rollup:type_name -> doublecloud.clickhouse.v1.ClickhouseConfig.GraphiteRollupEntry
	6,   // 19: doublecloud.clickhouse.v1.ClickhouseConfig.kafka:type_name -> doublecloud.clickhouse.v1.ClickhouseConfig.Kafka
	11,  // 20: doublecloud.clickhouse.v1.ClickhouseConfig.kafka_topics:type_name -> doublecloud.clickhouse.v1.ClickhouseConfig.KafkaTopicsEntry
	7,   // 21: doublecloud.clickhouse.v1.ClickhouseConfig.rabbitmq:type_name -> doublecloud.clickhouse.v1.ClickhouseConfig.Rabbitmq
	17,  // 22: doublecloud.clickhouse.v1.ClickhouseConfig.total_memory_tracker_sample_probability:type_name -> google.protobuf.DoubleValue
	14,  // 23: doublecloud.clickhouse.v1.ClickhouseConfig.background_message_broker_schedule_pool_size:type_name -> google.protobuf.Int64Value
	14,  // 24: doublecloud.clickhouse.v1.ClickhouseConfig.query_log_retention_size:type_name -> google.protobuf.Int64Value
	15,  // 25: doublecloud.clickhouse.v1.ClickhouseConfig.query_log_retention_time:type_name -> google.protobuf.Duration
	18,  // 26: doublecloud.clickhouse.v1.ClickhouseConfig.query_thread_log_enabled:type_name -> google.protobuf.BoolValue
	14,  // 27: doublecloud.clickhouse.v1.ClickhouseConfig.query_thread_log_retention_size:type_name -> google.protobuf.Int64Value
	15,  // 28: doublecloud.clickhouse.v1.ClickhouseConfig.query_thread_log_retention_time:type_name -> google.protobuf.Duration
	18,  // 29: doublecloud.clickhouse.v1.ClickhouseConfig.query_views_log_enabled:type_name -> google.protobuf.BoolValue
	14,  // 30: doublecloud.clickhouse.v1.ClickhouseConfig.query_views_log_retention_size:type_name -> google.protobuf.Int64Value
	15,  // 31: doublecloud.clickhouse.v1.ClickhouseConfig.query_views_log_retention_time:type_name -> google.protobuf.Duration
	14,  // 32: doublecloud.clickhouse.v1.ClickhouseConfig.part_log_retention_size:type_name -> google.protobuf.Int64Value
	15,  // 33: doublecloud.clickhouse.v1.ClickhouseConfig.part_log_retention_time:type_name -> google.protobuf.Duration
	18,  // 34: doublecloud.clickhouse.v1.ClickhouseConfig.metric_log_enabled:type_name -> google.protobuf.BoolValue
	14,  // 35: doublecloud.clickhouse.v1.ClickhouseConfig.metric_log_retention_size:type_name -> google.protobuf.Int64Value
	15,  // 36: doublecloud.clickhouse.v1.ClickhouseConfig.metric_log_retention_time:type_name -> google.protobuf.Duration
	18,  // 37: doublecloud.clickhouse.v1.ClickhouseConfig.asynchronous_metric_log_enabled:type_name -> google.protobuf.BoolValue
	14,  // 38: doublecloud.clickhouse.v1.ClickhouseConfig.asynchronous_metric_log_retention_size:type_name -> google.protobuf.Int64Value
	15,  // 39: doublecloud.clickhouse.v1.ClickhouseConfig.asynchronous_metric_log_retention_time:type_name -> google.protobuf.Duration
	18,  // 40: doublecloud.clickhouse.v1.ClickhouseConfig.trace_log_enabled:type_name -> google.protobuf.BoolValue
	14,  // 41: doublecloud.clickhouse.v1.ClickhouseConfig.trace_log_retention_size:type_name -> google.protobuf.Int64Value
	15,  // 42: doublecloud.clickhouse.v1.ClickhouseConfig.trace_log_retention_time:type_name -> google.protobuf.Duration
	18,  // 43: doublecloud.clickhouse.v1.ClickhouseConfig.text_log_enabled:type_name -> google.protobuf.BoolValue
	14,  // 44: doublecloud.clickhouse.v1.ClickhouseConfig.text_log_retention_size:type_name -> google.protobuf.Int64Value
	15,  // 45: doublecloud.clickhouse.v1.ClickhouseConfig.text_log_retention_time:type_name -> google.protobuf.Duration
	0,   // 46: doublecloud.clickhouse.v1.ClickhouseConfig.text_log_level:type_name -> doublecloud.clickhouse.v1.ClickhouseConfig.LogLevel
	18,  // 47: doublecloud.clickhouse.v1.ClickhouseConfig.opentelemetry_span_log_enabled:type_name -> google.protobuf.BoolValue
	14,  // 48: doublecloud.clickhouse.v1.ClickhouseConfig.opentelemetry_span_log_retention_size:type_name -> google.protobuf.Int64Value
	15,  // 49: doublecloud.clickhouse.v1.ClickhouseConfig.opentelemetry_span_log_retention_time:type_name -> google.protobuf.Duration
	18,  // 50: doublecloud.clickhouse.v1.ClickhouseConfig.session_log_enabled:type_name -> google.protobuf.BoolValue
	14,  // 51: doublecloud.clickhouse.v1.ClickhouseConfig.session_log_retention_size:type_name -> google.protobuf.Int64Value
	15,  // 52: doublecloud.clickhouse.v1.ClickhouseConfig.session_log_retention_time:type_name -> google.protobuf.Duration
	18,  // 53: doublecloud.clickhouse.v1.ClickhouseConfig.zookeeper_log_enabled:type_name -> google.protobuf.BoolValue
	14,  // 54: doublecloud.clickhouse.v1.ClickhouseConfig.zookeeper_log_retention_size:type_name -> google.protobuf.Int64Value
	15,  // 55: doublecloud.clickhouse.v1.ClickhouseConfig.zookeeper_log_retention_time:type_name -> google.protobuf.Duration
	18,  // 56: doublecloud.clickhouse.v1.ClickhouseConfig.asynchronous_insert_log_enabled:type_name -> google.protobuf.BoolValue
	14,  // 57: doublecloud.clickhouse.v1.ClickhouseConfig.asynchronous_insert_log_retention_size:type_name -> google.protobuf.Int64Value
	15,  // 58: doublecloud.clickhouse.v1.ClickhouseConfig.asynchronous_insert_log_retention_time:type_name -> google.protobuf.Duration
	14,  // 59: doublecloud.clickhouse.v1.ClickhouseConfig.MergeTree.replicated_deduplication_window:type_name -> google.protobuf.Int64Value
	15,  // 60: doublecloud.clickhouse.v1.ClickhouseConfig.MergeTree.replicated_deduplication_window_seconds:type_name -> google.protobuf.Duration
	14,  // 61: doublecloud.clickhouse.v1.ClickhouseConfig.MergeTree.parts_to_delay_insert:type_name -> google.protobuf.Int64Value
	14,  // 62: doublecloud.clickhouse.v1.ClickhouseConfig.MergeTree.parts_to_throw_insert:type_name -> google.protobuf.Int64Value
	14,  // 63: doublecloud.clickhouse.v1.ClickhouseConfig.MergeTree.max_replicated_merges_in_queue:type_name -> google.protobuf.Int64Value
	14,  // 64: doublecloud.clickhouse.v1.ClickhouseConfig.MergeTree.number_of_free_entries_in_pool_to_lower_max_size_of_merge:type_name -> google.protobuf.Int64Value
	14,  // 65: doublecloud.clickhouse.v1.ClickhouseConfig.MergeTree.max_bytes_to_merge_at_min_space_in_pool:type_name -> google.protobuf.Int64Value
	14,  // 66: doublecloud.clickhouse.v1.ClickhouseConfig.MergeTree.max_bytes_to_merge_at_max_space_in_pool:type_name -> google.protobuf.Int64Value
	14,  // 67: doublecloud.clickhouse.v1.ClickhouseConfig.MergeTree.min_bytes_for_wide_part:type_name -> google.protobuf.Int64Value
	14,  // 68: doublecloud.clickhouse.v1.ClickhouseConfig.MergeTree.min_rows_for_wide_part:type_name -> google.protobuf.Int64Value
	18,  // 69: doublecloud.clickhouse.v1.ClickhouseConfig.MergeTree.ttl_only_drop_parts:type_name -> google.protobuf.BoolValue
	14,  // 70: doublecloud.clickhouse.v1.ClickhouseConfig.MergeTree.inactive_parts_to_delay_insert:type_name -> google.protobuf.Int64Value
	14,  // 71: doublecloud.clickhouse.v1.ClickhouseConfig.MergeTree.inactive_parts_to_throw_insert:type_name -> google.protobuf.Int64Value
	18,  // 72: doublecloud.clickhouse.v1.ClickhouseConfig.MergeTree.allow_remote_fs_zero_copy_replication:type_name -> google.protobuf.BoolValue
	15,  // 73: doublecloud.clickhouse.v1.ClickhouseConfig.MergeTree.merge_with_ttl_timeout:type_name -> google.protobuf.Duration
	15,  // 74: doublecloud.clickhouse.v1.ClickhouseConfig.MergeTree.merge_with_recompression_ttl_timeout:type_name -> google.protobuf.Duration
	14,  // 75: doublecloud.clickhouse.v1.ClickhouseConfig.MergeTree.max_parts_in_total:type_name -> google.protobuf.Int64Value
	14,  // 76: doublecloud.clickhouse.v1.ClickhouseConfig.MergeTree.max_number_of_merges_with_ttl_in_pool:type_name -> google.protobuf.Int64Value
	15,  // 77: doublecloud.clickhouse.v1.ClickhouseConfig.MergeTree.cleanup_delay_period:type_name -> google.protobuf.Duration
	14,  // 78: doublecloud.clickhouse.v1.ClickhouseConfig.MergeTree.number_of_free_entries_in_pool_to_execute_mutation:type_name -> google.protobuf.Int64Value
	14,  // 79: doublecloud.clickhouse.v1.ClickhouseConfig.MergeTree.max_avg_part_size_for_too_many_parts:type_name -> google.protobuf.Int64Value
	15,  // 80: doublecloud.clickhouse.v1.ClickhouseConfig.MergeTree.min_age_to_force_merge_seconds:type_name -> google.protobuf.Duration
	18,  // 81: doublecloud.clickhouse.v1.ClickhouseConfig.MergeTree.min_age_to_force_merge_on_partition_only:type_name -> google.protobuf.BoolValue
	15,  // 82: doublecloud.clickhouse.v1.ClickhouseConfig.MergeTree.merge_selecting_sleep_ms:type_name -> google.protobuf.Duration
	1,   // 83: doublecloud.clickhouse.v1.ClickhouseConfig.Kafka.security_protocol:type_name -> doublecloud.clickhouse.v1.ClickhouseConfig.Kafka.SecurityProtocol
	2,   // 84: doublecloud.clickhouse.v1.ClickhouseConfig.Kafka.sasl_mechanism:type_name -> doublecloud.clickhouse.v1.ClickhouseConfig.Kafka.SaslMechanism
	16,  // 85: doublecloud.clickhouse.v1.ClickhouseConfig.Kafka.sasl_username:type_name -> google.protobuf.StringValue
	16,  // 86: doublecloud.clickhouse.v1.ClickhouseConfig.Kafka.sasl_password:type_name -> google.protobuf.StringValue
	18,  // 87: doublecloud.clickhouse.v1.ClickhouseConfig.Kafka.enable_ssl_certificate_verification:type_name -> google.protobuf.BoolValue
	15,  // 88: doublecloud.clickhouse.v1.ClickhouseConfig.Kafka.max_poll_interval_ms:type_name -> google.protobuf.Duration
	15,  // 89: doublecloud.clickhouse.v1.ClickhouseConfig.Kafka.session_timeout_ms:type_name -> google.protobuf.Duration
	16,  // 90: doublecloud.clickhouse.v1.ClickhouseConfig.Rabbitmq.username:type_name -> google.protobuf.StringValue
	16,  // 91: doublecloud.clickhouse.v1.ClickhouseConfig.Rabbitmq.password:type_name -> google.protobuf.StringValue
	16,  // 92: doublecloud.clickhouse.v1.ClickhouseConfig.Rabbitmq.vhost:type_name -> google.protobuf.StringValue
	3,   // 93: doublecloud.clickhouse.v1.ClickhouseConfig.Compression.method:type_name -> doublecloud.clickhouse.v1.ClickhouseConfig.Compression.Method
	14,  // 94: doublecloud.clickhouse.v1.ClickhouseConfig.Compression.level:type_name -> google.protobuf.Int64Value
	12,  // 95: doublecloud.clickhouse.v1.ClickhouseConfig.GraphiteRollup.patterns:type_name -> doublecloud.clickhouse.v1.ClickhouseConfig.GraphiteRollup.Pattern
	9,   // 96: doublecloud.clickhouse.v1.ClickhouseConfig.GraphiteRollupEntry.value:type_name -> doublecloud.clickhouse.v1.ClickhouseConfig.GraphiteRollup
	6,   // 97: doublecloud.clickhouse.v1.ClickhouseConfig.KafkaTopicsEntry.value:type_name -> doublecloud.clickhouse.v1.ClickhouseConfig.Kafka
	16,  // 98: doublecloud.clickhouse.v1.ClickhouseConfig.GraphiteRollup.Pattern.regexp:type_name -> google.protobuf.StringValue
	16,  // 99: doublecloud.clickhouse.v1.ClickhouseConfig.GraphiteRollup.Pattern.function:type_name -> google.protobuf.StringValue
	13,  // 100: doublecloud.clickhouse.v1.ClickhouseConfig.GraphiteRollup.Pattern.retention:type_name -> doublecloud.clickhouse.v1.ClickhouseConfig.GraphiteRollup.Pattern.Retention
	101, // [101:101] is the sub-list for method output_type
	101, // [101:101] is the sub-list for method input_type
	101, // [101:101] is the sub-list for extension type_name
	101, // [101:101] is the sub-list for extension extendee
	0,   // [0:101] is the sub-list for field type_name
}

func init() { file_doublecloud_clickhouse_v1_config_proto_init() }
func file_doublecloud_clickhouse_v1_config_proto_init() {
	if File_doublecloud_clickhouse_v1_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_doublecloud_clickhouse_v1_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig_MergeTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig_Kafka); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig_Rabbitmq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig_Compression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig_GraphiteRollup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig_GraphiteRollup_Pattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig_GraphiteRollup_Pattern_Retention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_doublecloud_clickhouse_v1_config_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_doublecloud_clickhouse_v1_config_proto_goTypes,
		DependencyIndexes: file_doublecloud_clickhouse_v1_config_proto_depIdxs,
		EnumInfos:         file_doublecloud_clickhouse_v1_config_proto_enumTypes,
		MessageInfos:      file_doublecloud_clickhouse_v1_config_proto_msgTypes,
	}.Build()
	File_doublecloud_clickhouse_v1_config_proto = out.File
	file_doublecloud_clickhouse_v1_config_proto_rawDesc = nil
	file_doublecloud_clickhouse_v1_config_proto_goTypes = nil
	file_doublecloud_clickhouse_v1_config_proto_depIdxs = nil
}
