// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.0
// 	protoc        (unknown)
// source: doublecloud/clickhouse/v1/user.proto

package clickhouse

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Authentication_IdentificationType int32

const (
	Authentication_IDENTIFICATION_TYPE_INVALID              Authentication_IdentificationType = 0
	Authentication_IDENTIFICATION_TYPE_SHA256_PASSWORD      Authentication_IdentificationType = 1
	Authentication_IDENTIFICATION_TYPE_DOUBLE_SHA1_PASSWORD Authentication_IdentificationType = 2
	Authentication_IDENTIFICATION_TYPE_BCRYPT_PASSWORD      Authentication_IdentificationType = 3
)

// Enum value maps for Authentication_IdentificationType.
var (
	Authentication_IdentificationType_name = map[int32]string{
		0: "IDENTIFICATION_TYPE_INVALID",
		1: "IDENTIFICATION_TYPE_SHA256_PASSWORD",
		2: "IDENTIFICATION_TYPE_DOUBLE_SHA1_PASSWORD",
		3: "IDENTIFICATION_TYPE_BCRYPT_PASSWORD",
	}
	Authentication_IdentificationType_value = map[string]int32{
		"IDENTIFICATION_TYPE_INVALID":              0,
		"IDENTIFICATION_TYPE_SHA256_PASSWORD":      1,
		"IDENTIFICATION_TYPE_DOUBLE_SHA1_PASSWORD": 2,
		"IDENTIFICATION_TYPE_BCRYPT_PASSWORD":      3,
	}
)

func (x Authentication_IdentificationType) Enum() *Authentication_IdentificationType {
	p := new(Authentication_IdentificationType)
	*p = x
	return p
}

func (x Authentication_IdentificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Authentication_IdentificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_clickhouse_v1_user_proto_enumTypes[0].Descriptor()
}

func (Authentication_IdentificationType) Type() protoreflect.EnumType {
	return &file_doublecloud_clickhouse_v1_user_proto_enumTypes[0]
}

func (x Authentication_IdentificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Authentication_IdentificationType.Descriptor instead.
func (Authentication_IdentificationType) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{2, 0}
}

// See in-depth description in [ClickHouse
// documentation](https://clickhouse.com/docs/en/sql-reference/statements/grant#privileges).
type Grant_AccessType int32

const (
	Grant_ACCESS_TYPE_INVALID                          Grant_AccessType = 0
	Grant_ACCESS_TYPE_SHOW_DATABASES                   Grant_AccessType = 1
	Grant_ACCESS_TYPE_SHOW_TABLES                      Grant_AccessType = 2
	Grant_ACCESS_TYPE_SHOW_COLUMNS                     Grant_AccessType = 3
	Grant_ACCESS_TYPE_SHOW_DICTIONARIES                Grant_AccessType = 4
	Grant_ACCESS_TYPE_SHOW                             Grant_AccessType = 5
	Grant_ACCESS_TYPE_SHOW_FILESYSTEM_CACHES           Grant_AccessType = 6
	Grant_ACCESS_TYPE_SELECT                           Grant_AccessType = 7
	Grant_ACCESS_TYPE_INSERT                           Grant_AccessType = 8
	Grant_ACCESS_TYPE_ALTER_UPDATE                     Grant_AccessType = 9
	Grant_ACCESS_TYPE_ALTER_DELETE                     Grant_AccessType = 10
	Grant_ACCESS_TYPE_ALTER_ADD_COLUMN                 Grant_AccessType = 11
	Grant_ACCESS_TYPE_ALTER_MODIFY_COLUMN              Grant_AccessType = 12
	Grant_ACCESS_TYPE_ALTER_DROP_COLUMN                Grant_AccessType = 13
	Grant_ACCESS_TYPE_ALTER_COMMENT_COLUMN             Grant_AccessType = 14
	Grant_ACCESS_TYPE_ALTER_CLEAR_COLUMN               Grant_AccessType = 15
	Grant_ACCESS_TYPE_ALTER_RENAME_COLUMN              Grant_AccessType = 16
	Grant_ACCESS_TYPE_ALTER_MATERIALIZE_COLUMN         Grant_AccessType = 17
	Grant_ACCESS_TYPE_ALTER_COLUMN                     Grant_AccessType = 18
	Grant_ACCESS_TYPE_ALTER_MODIFY_COMMENT             Grant_AccessType = 19
	Grant_ACCESS_TYPE_ALTER_ORDER_BY                   Grant_AccessType = 20
	Grant_ACCESS_TYPE_ALTER_SAMPLE_BY                  Grant_AccessType = 21
	Grant_ACCESS_TYPE_ALTER_ADD_INDEX                  Grant_AccessType = 22
	Grant_ACCESS_TYPE_ALTER_DROP_INDEX                 Grant_AccessType = 23
	Grant_ACCESS_TYPE_ALTER_MATERIALIZE_INDEX          Grant_AccessType = 24
	Grant_ACCESS_TYPE_ALTER_CLEAR_INDEX                Grant_AccessType = 25
	Grant_ACCESS_TYPE_ALTER_INDEX                      Grant_AccessType = 26
	Grant_ACCESS_TYPE_ALTER_ADD_PROJECTION             Grant_AccessType = 27
	Grant_ACCESS_TYPE_ALTER_DROP_PROJECTION            Grant_AccessType = 28
	Grant_ACCESS_TYPE_ALTER_MATERIALIZE_PROJECTION     Grant_AccessType = 29
	Grant_ACCESS_TYPE_ALTER_CLEAR_PROJECTION           Grant_AccessType = 30
	Grant_ACCESS_TYPE_ALTER_PROJECTION                 Grant_AccessType = 31
	Grant_ACCESS_TYPE_ALTER_ADD_CONSTRAINT             Grant_AccessType = 32
	Grant_ACCESS_TYPE_ALTER_DROP_CONSTRAINT            Grant_AccessType = 33
	Grant_ACCESS_TYPE_ALTER_CONSTRAINT                 Grant_AccessType = 34
	Grant_ACCESS_TYPE_ALTER_TTL                        Grant_AccessType = 35
	Grant_ACCESS_TYPE_ALTER_MATERIALIZE_TTL            Grant_AccessType = 36
	Grant_ACCESS_TYPE_ALTER_SETTINGS                   Grant_AccessType = 37
	Grant_ACCESS_TYPE_ALTER_MOVE_PARTITION             Grant_AccessType = 38
	Grant_ACCESS_TYPE_ALTER_FETCH_PARTITION            Grant_AccessType = 39
	Grant_ACCESS_TYPE_ALTER_FREEZE_PARTITION           Grant_AccessType = 40
	Grant_ACCESS_TYPE_ALTER_DATABASE_SETTINGS          Grant_AccessType = 41
	Grant_ACCESS_TYPE_ALTER_NAMED_COLLECTION           Grant_AccessType = 42
	Grant_ACCESS_TYPE_ALTER_TABLE                      Grant_AccessType = 43
	Grant_ACCESS_TYPE_ALTER_DATABASE                   Grant_AccessType = 44
	Grant_ACCESS_TYPE_ALTER_VIEW_REFRESH               Grant_AccessType = 45
	Grant_ACCESS_TYPE_ALTER_VIEW_MODIFY_QUERY          Grant_AccessType = 46
	Grant_ACCESS_TYPE_ALTER_VIEW                       Grant_AccessType = 47
	Grant_ACCESS_TYPE_ALTER                            Grant_AccessType = 48
	Grant_ACCESS_TYPE_CREATE_DATABASE                  Grant_AccessType = 49
	Grant_ACCESS_TYPE_CREATE_TABLE                     Grant_AccessType = 50
	Grant_ACCESS_TYPE_CREATE_VIEW                      Grant_AccessType = 51
	Grant_ACCESS_TYPE_CREATE_DICTIONARY                Grant_AccessType = 52
	Grant_ACCESS_TYPE_CREATE_TEMPORARY_TABLE           Grant_AccessType = 53
	Grant_ACCESS_TYPE_CREATE_ARBITRARY_TEMPORARY_TABLE Grant_AccessType = 54
	Grant_ACCESS_TYPE_CREATE_FUNCTION                  Grant_AccessType = 55
	Grant_ACCESS_TYPE_CREATE_NAMED_COLLECTION          Grant_AccessType = 56
	Grant_ACCESS_TYPE_CREATE                           Grant_AccessType = 57
	Grant_ACCESS_TYPE_DROP_DATABASE                    Grant_AccessType = 58
	Grant_ACCESS_TYPE_DROP_TABLE                       Grant_AccessType = 59
	Grant_ACCESS_TYPE_DROP_VIEW                        Grant_AccessType = 60
	Grant_ACCESS_TYPE_DROP_DICTIONARY                  Grant_AccessType = 61
	Grant_ACCESS_TYPE_DROP_FUNCTION                    Grant_AccessType = 62
	Grant_ACCESS_TYPE_DROP_NAMED_COLLECTION            Grant_AccessType = 63
	Grant_ACCESS_TYPE_DROP                             Grant_AccessType = 64
	Grant_ACCESS_TYPE_UNDROP_TABLE                     Grant_AccessType = 65
	Grant_ACCESS_TYPE_TRUNCATE                         Grant_AccessType = 66
	Grant_ACCESS_TYPE_OPTIMIZE                         Grant_AccessType = 67
	Grant_ACCESS_TYPE_BACKUP                           Grant_AccessType = 68
	Grant_ACCESS_TYPE_KILL_QUERY                       Grant_AccessType = 69
	Grant_ACCESS_TYPE_KILL_TRANSACTION                 Grant_AccessType = 70
	Grant_ACCESS_TYPE_MOVE_PARTITION_BETWEEN_SHARDS    Grant_AccessType = 71
	Grant_ACCESS_TYPE_CREATE_USER                      Grant_AccessType = 72
	Grant_ACCESS_TYPE_ALTER_USER                       Grant_AccessType = 73
	Grant_ACCESS_TYPE_DROP_USER                        Grant_AccessType = 74
	Grant_ACCESS_TYPE_CREATE_ROLE                      Grant_AccessType = 75
	Grant_ACCESS_TYPE_ALTER_ROLE                       Grant_AccessType = 76
	Grant_ACCESS_TYPE_DROP_ROLE                        Grant_AccessType = 77
	Grant_ACCESS_TYPE_ROLE_ADMIN                       Grant_AccessType = 78
	Grant_ACCESS_TYPE_CREATE_ROW_POLICY                Grant_AccessType = 79
	Grant_ACCESS_TYPE_ALTER_ROW_POLICY                 Grant_AccessType = 80
	Grant_ACCESS_TYPE_DROP_ROW_POLICY                  Grant_AccessType = 81
	Grant_ACCESS_TYPE_CREATE_QUOTA                     Grant_AccessType = 82
	Grant_ACCESS_TYPE_ALTER_QUOTA                      Grant_AccessType = 83
	Grant_ACCESS_TYPE_DROP_QUOTA                       Grant_AccessType = 84
	Grant_ACCESS_TYPE_CREATE_SETTINGS_PROFILE          Grant_AccessType = 85
	Grant_ACCESS_TYPE_ALTER_SETTINGS_PROFILE           Grant_AccessType = 86
	Grant_ACCESS_TYPE_DROP_SETTINGS_PROFILE            Grant_AccessType = 87
	Grant_ACCESS_TYPE_SHOW_USERS                       Grant_AccessType = 88
	Grant_ACCESS_TYPE_SHOW_ROLES                       Grant_AccessType = 89
	Grant_ACCESS_TYPE_SHOW_ROW_POLICIES                Grant_AccessType = 90
	Grant_ACCESS_TYPE_SHOW_QUOTAS                      Grant_AccessType = 91
	Grant_ACCESS_TYPE_SHOW_SETTINGS_PROFILES           Grant_AccessType = 92
	Grant_ACCESS_TYPE_SHOW_ACCESS                      Grant_AccessType = 93
	Grant_ACCESS_TYPE_ACCESS_MANAGEMENT                Grant_AccessType = 94
	Grant_ACCESS_TYPE_NAMED_COLLECTION                 Grant_AccessType = 95
	Grant_ACCESS_TYPE_SYSTEM_DROP_CACHE                Grant_AccessType = 96
	Grant_ACCESS_TYPE_SYSTEM_RELOAD                    Grant_AccessType = 97
	Grant_ACCESS_TYPE_SYSTEM_MERGES                    Grant_AccessType = 98
	Grant_ACCESS_TYPE_SYSTEM_TTL_MERGES                Grant_AccessType = 99
	Grant_ACCESS_TYPE_SYSTEM_FETCHES                   Grant_AccessType = 100
	Grant_ACCESS_TYPE_SYSTEM_MOVES                     Grant_AccessType = 101
	Grant_ACCESS_TYPE_SYSTEM_SENDS                     Grant_AccessType = 102
	Grant_ACCESS_TYPE_SYSTEM_REPLICATION_QUEUES        Grant_AccessType = 103
	Grant_ACCESS_TYPE_SYSTEM_DROP_REPLICA              Grant_AccessType = 104
	Grant_ACCESS_TYPE_SYSTEM_SYNC_REPLICA              Grant_AccessType = 105
	Grant_ACCESS_TYPE_SYSTEM_RESTART_REPLICA           Grant_AccessType = 106
	Grant_ACCESS_TYPE_SYSTEM_RESTORE_REPLICA           Grant_AccessType = 107
	Grant_ACCESS_TYPE_SYSTEM_FLUSH                     Grant_AccessType = 108
	Grant_ACCESS_TYPE_DICT_GET                         Grant_AccessType = 109
	Grant_ACCESS_TYPE_INTROSPECTION                    Grant_AccessType = 110
	Grant_ACCESS_TYPE_URL                              Grant_AccessType = 111
	Grant_ACCESS_TYPE_REMOTE                           Grant_AccessType = 112
	Grant_ACCESS_TYPE_MONGO                            Grant_AccessType = 113
	Grant_ACCESS_TYPE_MYSQL                            Grant_AccessType = 114
	Grant_ACCESS_TYPE_POSTGRES                         Grant_AccessType = 115
	Grant_ACCESS_TYPE_ODBC                             Grant_AccessType = 116
	Grant_ACCESS_TYPE_JDBC                             Grant_AccessType = 117
	Grant_ACCESS_TYPE_HDFS                             Grant_AccessType = 118
	Grant_ACCESS_TYPE_S3                               Grant_AccessType = 119
	Grant_ACCESS_TYPE_ALL                              Grant_AccessType = 120
)

// Enum value maps for Grant_AccessType.
var (
	Grant_AccessType_name = map[int32]string{
		0:   "ACCESS_TYPE_INVALID",
		1:   "ACCESS_TYPE_SHOW_DATABASES",
		2:   "ACCESS_TYPE_SHOW_TABLES",
		3:   "ACCESS_TYPE_SHOW_COLUMNS",
		4:   "ACCESS_TYPE_SHOW_DICTIONARIES",
		5:   "ACCESS_TYPE_SHOW",
		6:   "ACCESS_TYPE_SHOW_FILESYSTEM_CACHES",
		7:   "ACCESS_TYPE_SELECT",
		8:   "ACCESS_TYPE_INSERT",
		9:   "ACCESS_TYPE_ALTER_UPDATE",
		10:  "ACCESS_TYPE_ALTER_DELETE",
		11:  "ACCESS_TYPE_ALTER_ADD_COLUMN",
		12:  "ACCESS_TYPE_ALTER_MODIFY_COLUMN",
		13:  "ACCESS_TYPE_ALTER_DROP_COLUMN",
		14:  "ACCESS_TYPE_ALTER_COMMENT_COLUMN",
		15:  "ACCESS_TYPE_ALTER_CLEAR_COLUMN",
		16:  "ACCESS_TYPE_ALTER_RENAME_COLUMN",
		17:  "ACCESS_TYPE_ALTER_MATERIALIZE_COLUMN",
		18:  "ACCESS_TYPE_ALTER_COLUMN",
		19:  "ACCESS_TYPE_ALTER_MODIFY_COMMENT",
		20:  "ACCESS_TYPE_ALTER_ORDER_BY",
		21:  "ACCESS_TYPE_ALTER_SAMPLE_BY",
		22:  "ACCESS_TYPE_ALTER_ADD_INDEX",
		23:  "ACCESS_TYPE_ALTER_DROP_INDEX",
		24:  "ACCESS_TYPE_ALTER_MATERIALIZE_INDEX",
		25:  "ACCESS_TYPE_ALTER_CLEAR_INDEX",
		26:  "ACCESS_TYPE_ALTER_INDEX",
		27:  "ACCESS_TYPE_ALTER_ADD_PROJECTION",
		28:  "ACCESS_TYPE_ALTER_DROP_PROJECTION",
		29:  "ACCESS_TYPE_ALTER_MATERIALIZE_PROJECTION",
		30:  "ACCESS_TYPE_ALTER_CLEAR_PROJECTION",
		31:  "ACCESS_TYPE_ALTER_PROJECTION",
		32:  "ACCESS_TYPE_ALTER_ADD_CONSTRAINT",
		33:  "ACCESS_TYPE_ALTER_DROP_CONSTRAINT",
		34:  "ACCESS_TYPE_ALTER_CONSTRAINT",
		35:  "ACCESS_TYPE_ALTER_TTL",
		36:  "ACCESS_TYPE_ALTER_MATERIALIZE_TTL",
		37:  "ACCESS_TYPE_ALTER_SETTINGS",
		38:  "ACCESS_TYPE_ALTER_MOVE_PARTITION",
		39:  "ACCESS_TYPE_ALTER_FETCH_PARTITION",
		40:  "ACCESS_TYPE_ALTER_FREEZE_PARTITION",
		41:  "ACCESS_TYPE_ALTER_DATABASE_SETTINGS",
		42:  "ACCESS_TYPE_ALTER_NAMED_COLLECTION",
		43:  "ACCESS_TYPE_ALTER_TABLE",
		44:  "ACCESS_TYPE_ALTER_DATABASE",
		45:  "ACCESS_TYPE_ALTER_VIEW_REFRESH",
		46:  "ACCESS_TYPE_ALTER_VIEW_MODIFY_QUERY",
		47:  "ACCESS_TYPE_ALTER_VIEW",
		48:  "ACCESS_TYPE_ALTER",
		49:  "ACCESS_TYPE_CREATE_DATABASE",
		50:  "ACCESS_TYPE_CREATE_TABLE",
		51:  "ACCESS_TYPE_CREATE_VIEW",
		52:  "ACCESS_TYPE_CREATE_DICTIONARY",
		53:  "ACCESS_TYPE_CREATE_TEMPORARY_TABLE",
		54:  "ACCESS_TYPE_CREATE_ARBITRARY_TEMPORARY_TABLE",
		55:  "ACCESS_TYPE_CREATE_FUNCTION",
		56:  "ACCESS_TYPE_CREATE_NAMED_COLLECTION",
		57:  "ACCESS_TYPE_CREATE",
		58:  "ACCESS_TYPE_DROP_DATABASE",
		59:  "ACCESS_TYPE_DROP_TABLE",
		60:  "ACCESS_TYPE_DROP_VIEW",
		61:  "ACCESS_TYPE_DROP_DICTIONARY",
		62:  "ACCESS_TYPE_DROP_FUNCTION",
		63:  "ACCESS_TYPE_DROP_NAMED_COLLECTION",
		64:  "ACCESS_TYPE_DROP",
		65:  "ACCESS_TYPE_UNDROP_TABLE",
		66:  "ACCESS_TYPE_TRUNCATE",
		67:  "ACCESS_TYPE_OPTIMIZE",
		68:  "ACCESS_TYPE_BACKUP",
		69:  "ACCESS_TYPE_KILL_QUERY",
		70:  "ACCESS_TYPE_KILL_TRANSACTION",
		71:  "ACCESS_TYPE_MOVE_PARTITION_BETWEEN_SHARDS",
		72:  "ACCESS_TYPE_CREATE_USER",
		73:  "ACCESS_TYPE_ALTER_USER",
		74:  "ACCESS_TYPE_DROP_USER",
		75:  "ACCESS_TYPE_CREATE_ROLE",
		76:  "ACCESS_TYPE_ALTER_ROLE",
		77:  "ACCESS_TYPE_DROP_ROLE",
		78:  "ACCESS_TYPE_ROLE_ADMIN",
		79:  "ACCESS_TYPE_CREATE_ROW_POLICY",
		80:  "ACCESS_TYPE_ALTER_ROW_POLICY",
		81:  "ACCESS_TYPE_DROP_ROW_POLICY",
		82:  "ACCESS_TYPE_CREATE_QUOTA",
		83:  "ACCESS_TYPE_ALTER_QUOTA",
		84:  "ACCESS_TYPE_DROP_QUOTA",
		85:  "ACCESS_TYPE_CREATE_SETTINGS_PROFILE",
		86:  "ACCESS_TYPE_ALTER_SETTINGS_PROFILE",
		87:  "ACCESS_TYPE_DROP_SETTINGS_PROFILE",
		88:  "ACCESS_TYPE_SHOW_USERS",
		89:  "ACCESS_TYPE_SHOW_ROLES",
		90:  "ACCESS_TYPE_SHOW_ROW_POLICIES",
		91:  "ACCESS_TYPE_SHOW_QUOTAS",
		92:  "ACCESS_TYPE_SHOW_SETTINGS_PROFILES",
		93:  "ACCESS_TYPE_SHOW_ACCESS",
		94:  "ACCESS_TYPE_ACCESS_MANAGEMENT",
		95:  "ACCESS_TYPE_NAMED_COLLECTION",
		96:  "ACCESS_TYPE_SYSTEM_DROP_CACHE",
		97:  "ACCESS_TYPE_SYSTEM_RELOAD",
		98:  "ACCESS_TYPE_SYSTEM_MERGES",
		99:  "ACCESS_TYPE_SYSTEM_TTL_MERGES",
		100: "ACCESS_TYPE_SYSTEM_FETCHES",
		101: "ACCESS_TYPE_SYSTEM_MOVES",
		102: "ACCESS_TYPE_SYSTEM_SENDS",
		103: "ACCESS_TYPE_SYSTEM_REPLICATION_QUEUES",
		104: "ACCESS_TYPE_SYSTEM_DROP_REPLICA",
		105: "ACCESS_TYPE_SYSTEM_SYNC_REPLICA",
		106: "ACCESS_TYPE_SYSTEM_RESTART_REPLICA",
		107: "ACCESS_TYPE_SYSTEM_RESTORE_REPLICA",
		108: "ACCESS_TYPE_SYSTEM_FLUSH",
		109: "ACCESS_TYPE_DICT_GET",
		110: "ACCESS_TYPE_INTROSPECTION",
		111: "ACCESS_TYPE_URL",
		112: "ACCESS_TYPE_REMOTE",
		113: "ACCESS_TYPE_MONGO",
		114: "ACCESS_TYPE_MYSQL",
		115: "ACCESS_TYPE_POSTGRES",
		116: "ACCESS_TYPE_ODBC",
		117: "ACCESS_TYPE_JDBC",
		118: "ACCESS_TYPE_HDFS",
		119: "ACCESS_TYPE_S3",
		120: "ACCESS_TYPE_ALL",
	}
	Grant_AccessType_value = map[string]int32{
		"ACCESS_TYPE_INVALID":                          0,
		"ACCESS_TYPE_SHOW_DATABASES":                   1,
		"ACCESS_TYPE_SHOW_TABLES":                      2,
		"ACCESS_TYPE_SHOW_COLUMNS":                     3,
		"ACCESS_TYPE_SHOW_DICTIONARIES":                4,
		"ACCESS_TYPE_SHOW":                             5,
		"ACCESS_TYPE_SHOW_FILESYSTEM_CACHES":           6,
		"ACCESS_TYPE_SELECT":                           7,
		"ACCESS_TYPE_INSERT":                           8,
		"ACCESS_TYPE_ALTER_UPDATE":                     9,
		"ACCESS_TYPE_ALTER_DELETE":                     10,
		"ACCESS_TYPE_ALTER_ADD_COLUMN":                 11,
		"ACCESS_TYPE_ALTER_MODIFY_COLUMN":              12,
		"ACCESS_TYPE_ALTER_DROP_COLUMN":                13,
		"ACCESS_TYPE_ALTER_COMMENT_COLUMN":             14,
		"ACCESS_TYPE_ALTER_CLEAR_COLUMN":               15,
		"ACCESS_TYPE_ALTER_RENAME_COLUMN":              16,
		"ACCESS_TYPE_ALTER_MATERIALIZE_COLUMN":         17,
		"ACCESS_TYPE_ALTER_COLUMN":                     18,
		"ACCESS_TYPE_ALTER_MODIFY_COMMENT":             19,
		"ACCESS_TYPE_ALTER_ORDER_BY":                   20,
		"ACCESS_TYPE_ALTER_SAMPLE_BY":                  21,
		"ACCESS_TYPE_ALTER_ADD_INDEX":                  22,
		"ACCESS_TYPE_ALTER_DROP_INDEX":                 23,
		"ACCESS_TYPE_ALTER_MATERIALIZE_INDEX":          24,
		"ACCESS_TYPE_ALTER_CLEAR_INDEX":                25,
		"ACCESS_TYPE_ALTER_INDEX":                      26,
		"ACCESS_TYPE_ALTER_ADD_PROJECTION":             27,
		"ACCESS_TYPE_ALTER_DROP_PROJECTION":            28,
		"ACCESS_TYPE_ALTER_MATERIALIZE_PROJECTION":     29,
		"ACCESS_TYPE_ALTER_CLEAR_PROJECTION":           30,
		"ACCESS_TYPE_ALTER_PROJECTION":                 31,
		"ACCESS_TYPE_ALTER_ADD_CONSTRAINT":             32,
		"ACCESS_TYPE_ALTER_DROP_CONSTRAINT":            33,
		"ACCESS_TYPE_ALTER_CONSTRAINT":                 34,
		"ACCESS_TYPE_ALTER_TTL":                        35,
		"ACCESS_TYPE_ALTER_MATERIALIZE_TTL":            36,
		"ACCESS_TYPE_ALTER_SETTINGS":                   37,
		"ACCESS_TYPE_ALTER_MOVE_PARTITION":             38,
		"ACCESS_TYPE_ALTER_FETCH_PARTITION":            39,
		"ACCESS_TYPE_ALTER_FREEZE_PARTITION":           40,
		"ACCESS_TYPE_ALTER_DATABASE_SETTINGS":          41,
		"ACCESS_TYPE_ALTER_NAMED_COLLECTION":           42,
		"ACCESS_TYPE_ALTER_TABLE":                      43,
		"ACCESS_TYPE_ALTER_DATABASE":                   44,
		"ACCESS_TYPE_ALTER_VIEW_REFRESH":               45,
		"ACCESS_TYPE_ALTER_VIEW_MODIFY_QUERY":          46,
		"ACCESS_TYPE_ALTER_VIEW":                       47,
		"ACCESS_TYPE_ALTER":                            48,
		"ACCESS_TYPE_CREATE_DATABASE":                  49,
		"ACCESS_TYPE_CREATE_TABLE":                     50,
		"ACCESS_TYPE_CREATE_VIEW":                      51,
		"ACCESS_TYPE_CREATE_DICTIONARY":                52,
		"ACCESS_TYPE_CREATE_TEMPORARY_TABLE":           53,
		"ACCESS_TYPE_CREATE_ARBITRARY_TEMPORARY_TABLE": 54,
		"ACCESS_TYPE_CREATE_FUNCTION":                  55,
		"ACCESS_TYPE_CREATE_NAMED_COLLECTION":          56,
		"ACCESS_TYPE_CREATE":                           57,
		"ACCESS_TYPE_DROP_DATABASE":                    58,
		"ACCESS_TYPE_DROP_TABLE":                       59,
		"ACCESS_TYPE_DROP_VIEW":                        60,
		"ACCESS_TYPE_DROP_DICTIONARY":                  61,
		"ACCESS_TYPE_DROP_FUNCTION":                    62,
		"ACCESS_TYPE_DROP_NAMED_COLLECTION":            63,
		"ACCESS_TYPE_DROP":                             64,
		"ACCESS_TYPE_UNDROP_TABLE":                     65,
		"ACCESS_TYPE_TRUNCATE":                         66,
		"ACCESS_TYPE_OPTIMIZE":                         67,
		"ACCESS_TYPE_BACKUP":                           68,
		"ACCESS_TYPE_KILL_QUERY":                       69,
		"ACCESS_TYPE_KILL_TRANSACTION":                 70,
		"ACCESS_TYPE_MOVE_PARTITION_BETWEEN_SHARDS":    71,
		"ACCESS_TYPE_CREATE_USER":                      72,
		"ACCESS_TYPE_ALTER_USER":                       73,
		"ACCESS_TYPE_DROP_USER":                        74,
		"ACCESS_TYPE_CREATE_ROLE":                      75,
		"ACCESS_TYPE_ALTER_ROLE":                       76,
		"ACCESS_TYPE_DROP_ROLE":                        77,
		"ACCESS_TYPE_ROLE_ADMIN":                       78,
		"ACCESS_TYPE_CREATE_ROW_POLICY":                79,
		"ACCESS_TYPE_ALTER_ROW_POLICY":                 80,
		"ACCESS_TYPE_DROP_ROW_POLICY":                  81,
		"ACCESS_TYPE_CREATE_QUOTA":                     82,
		"ACCESS_TYPE_ALTER_QUOTA":                      83,
		"ACCESS_TYPE_DROP_QUOTA":                       84,
		"ACCESS_TYPE_CREATE_SETTINGS_PROFILE":          85,
		"ACCESS_TYPE_ALTER_SETTINGS_PROFILE":           86,
		"ACCESS_TYPE_DROP_SETTINGS_PROFILE":            87,
		"ACCESS_TYPE_SHOW_USERS":                       88,
		"ACCESS_TYPE_SHOW_ROLES":                       89,
		"ACCESS_TYPE_SHOW_ROW_POLICIES":                90,
		"ACCESS_TYPE_SHOW_QUOTAS":                      91,
		"ACCESS_TYPE_SHOW_SETTINGS_PROFILES":           92,
		"ACCESS_TYPE_SHOW_ACCESS":                      93,
		"ACCESS_TYPE_ACCESS_MANAGEMENT":                94,
		"ACCESS_TYPE_NAMED_COLLECTION":                 95,
		"ACCESS_TYPE_SYSTEM_DROP_CACHE":                96,
		"ACCESS_TYPE_SYSTEM_RELOAD":                    97,
		"ACCESS_TYPE_SYSTEM_MERGES":                    98,
		"ACCESS_TYPE_SYSTEM_TTL_MERGES":                99,
		"ACCESS_TYPE_SYSTEM_FETCHES":                   100,
		"ACCESS_TYPE_SYSTEM_MOVES":                     101,
		"ACCESS_TYPE_SYSTEM_SENDS":                     102,
		"ACCESS_TYPE_SYSTEM_REPLICATION_QUEUES":        103,
		"ACCESS_TYPE_SYSTEM_DROP_REPLICA":              104,
		"ACCESS_TYPE_SYSTEM_SYNC_REPLICA":              105,
		"ACCESS_TYPE_SYSTEM_RESTART_REPLICA":           106,
		"ACCESS_TYPE_SYSTEM_RESTORE_REPLICA":           107,
		"ACCESS_TYPE_SYSTEM_FLUSH":                     108,
		"ACCESS_TYPE_DICT_GET":                         109,
		"ACCESS_TYPE_INTROSPECTION":                    110,
		"ACCESS_TYPE_URL":                              111,
		"ACCESS_TYPE_REMOTE":                           112,
		"ACCESS_TYPE_MONGO":                            113,
		"ACCESS_TYPE_MYSQL":                            114,
		"ACCESS_TYPE_POSTGRES":                         115,
		"ACCESS_TYPE_ODBC":                             116,
		"ACCESS_TYPE_JDBC":                             117,
		"ACCESS_TYPE_HDFS":                             118,
		"ACCESS_TYPE_S3":                               119,
		"ACCESS_TYPE_ALL":                              120,
	}
)

func (x Grant_AccessType) Enum() *Grant_AccessType {
	p := new(Grant_AccessType)
	*p = x
	return p
}

func (x Grant_AccessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Grant_AccessType) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_clickhouse_v1_user_proto_enumTypes[1].Descriptor()
}

func (Grant_AccessType) Type() protoreflect.EnumType {
	return &file_doublecloud_clickhouse_v1_user_proto_enumTypes[1]
}

func (x Grant_AccessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Grant_AccessType.Descriptor instead.
func (Grant_AccessType) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{8, 0}
}

// Writability constraint values.
// See in-depth description in [ClickHouse
// documentation](https://clickhouse.com/docs/en/operations/settings/constraints-on-settings).
type Settings_Writability int32

const (
	Settings_WRITABILITY_INVALID                Settings_Writability = 0
	Settings_WRITABILITY_CONST                  Settings_Writability = 1
	Settings_WRITABILITY_WRITABLE               Settings_Writability = 2
	Settings_WRITABILITY_CHANGEABLE_IN_READONLY Settings_Writability = 3
)

// Enum value maps for Settings_Writability.
var (
	Settings_Writability_name = map[int32]string{
		0: "WRITABILITY_INVALID",
		1: "WRITABILITY_CONST",
		2: "WRITABILITY_WRITABLE",
		3: "WRITABILITY_CHANGEABLE_IN_READONLY",
	}
	Settings_Writability_value = map[string]int32{
		"WRITABILITY_INVALID":                0,
		"WRITABILITY_CONST":                  1,
		"WRITABILITY_WRITABLE":               2,
		"WRITABILITY_CHANGEABLE_IN_READONLY": 3,
	}
)

func (x Settings_Writability) Enum() *Settings_Writability {
	p := new(Settings_Writability)
	*p = x
	return p
}

func (x Settings_Writability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Settings_Writability) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_clickhouse_v1_user_proto_enumTypes[2].Descriptor()
}

func (Settings_Writability) Type() protoreflect.EnumType {
	return &file_doublecloud_clickhouse_v1_user_proto_enumTypes[2]
}

func (x Settings_Writability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Settings_Writability.Descriptor instead.
func (Settings_Writability) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{9, 0}
}

type Settings_OverflowMode int32

const (
	Settings_OVERFLOW_MODE_INVALID Settings_OverflowMode = 0
	Settings_OVERFLOW_MODE_THROW   Settings_OverflowMode = 1
	Settings_OVERFLOW_MODE_BREAK   Settings_OverflowMode = 2
)

// Enum value maps for Settings_OverflowMode.
var (
	Settings_OverflowMode_name = map[int32]string{
		0: "OVERFLOW_MODE_INVALID",
		1: "OVERFLOW_MODE_THROW",
		2: "OVERFLOW_MODE_BREAK",
	}
	Settings_OverflowMode_value = map[string]int32{
		"OVERFLOW_MODE_INVALID": 0,
		"OVERFLOW_MODE_THROW":   1,
		"OVERFLOW_MODE_BREAK":   2,
	}
)

func (x Settings_OverflowMode) Enum() *Settings_OverflowMode {
	p := new(Settings_OverflowMode)
	*p = x
	return p
}

func (x Settings_OverflowMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Settings_OverflowMode) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_clickhouse_v1_user_proto_enumTypes[3].Descriptor()
}

func (Settings_OverflowMode) Type() protoreflect.EnumType {
	return &file_doublecloud_clickhouse_v1_user_proto_enumTypes[3]
}

func (x Settings_OverflowMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Settings_OverflowMode.Descriptor instead.
func (Settings_OverflowMode) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{9, 1}
}

type Settings_GroupByOverflowMode int32

const (
	Settings_GROUP_BY_OVERFLOW_MODE_INVALID Settings_GroupByOverflowMode = 0
	Settings_GROUP_BY_OVERFLOW_MODE_THROW   Settings_GroupByOverflowMode = 1
	Settings_GROUP_BY_OVERFLOW_MODE_BREAK   Settings_GroupByOverflowMode = 2
	Settings_GROUP_BY_OVERFLOW_MODE_ANY     Settings_GroupByOverflowMode = 3
)

// Enum value maps for Settings_GroupByOverflowMode.
var (
	Settings_GroupByOverflowMode_name = map[int32]string{
		0: "GROUP_BY_OVERFLOW_MODE_INVALID",
		1: "GROUP_BY_OVERFLOW_MODE_THROW",
		2: "GROUP_BY_OVERFLOW_MODE_BREAK",
		3: "GROUP_BY_OVERFLOW_MODE_ANY",
	}
	Settings_GroupByOverflowMode_value = map[string]int32{
		"GROUP_BY_OVERFLOW_MODE_INVALID": 0,
		"GROUP_BY_OVERFLOW_MODE_THROW":   1,
		"GROUP_BY_OVERFLOW_MODE_BREAK":   2,
		"GROUP_BY_OVERFLOW_MODE_ANY":     3,
	}
)

func (x Settings_GroupByOverflowMode) Enum() *Settings_GroupByOverflowMode {
	p := new(Settings_GroupByOverflowMode)
	*p = x
	return p
}

func (x Settings_GroupByOverflowMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Settings_GroupByOverflowMode) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_clickhouse_v1_user_proto_enumTypes[4].Descriptor()
}

func (Settings_GroupByOverflowMode) Type() protoreflect.EnumType {
	return &file_doublecloud_clickhouse_v1_user_proto_enumTypes[4]
}

func (x Settings_GroupByOverflowMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Settings_GroupByOverflowMode.Descriptor instead.
func (Settings_GroupByOverflowMode) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{9, 2}
}

type Settings_DistributedProductMode int32

const (
	Settings_DISTRIBUTED_PRODUCT_MODE_INVALID Settings_DistributedProductMode = 0
	Settings_DISTRIBUTED_PRODUCT_MODE_DENY    Settings_DistributedProductMode = 1
	Settings_DISTRIBUTED_PRODUCT_MODE_LOCAL   Settings_DistributedProductMode = 2
	Settings_DISTRIBUTED_PRODUCT_MODE_GLOBAL  Settings_DistributedProductMode = 3
	Settings_DISTRIBUTED_PRODUCT_MODE_ALLOW   Settings_DistributedProductMode = 4
)

// Enum value maps for Settings_DistributedProductMode.
var (
	Settings_DistributedProductMode_name = map[int32]string{
		0: "DISTRIBUTED_PRODUCT_MODE_INVALID",
		1: "DISTRIBUTED_PRODUCT_MODE_DENY",
		2: "DISTRIBUTED_PRODUCT_MODE_LOCAL",
		3: "DISTRIBUTED_PRODUCT_MODE_GLOBAL",
		4: "DISTRIBUTED_PRODUCT_MODE_ALLOW",
	}
	Settings_DistributedProductMode_value = map[string]int32{
		"DISTRIBUTED_PRODUCT_MODE_INVALID": 0,
		"DISTRIBUTED_PRODUCT_MODE_DENY":    1,
		"DISTRIBUTED_PRODUCT_MODE_LOCAL":   2,
		"DISTRIBUTED_PRODUCT_MODE_GLOBAL":  3,
		"DISTRIBUTED_PRODUCT_MODE_ALLOW":   4,
	}
)

func (x Settings_DistributedProductMode) Enum() *Settings_DistributedProductMode {
	p := new(Settings_DistributedProductMode)
	*p = x
	return p
}

func (x Settings_DistributedProductMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Settings_DistributedProductMode) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_clickhouse_v1_user_proto_enumTypes[5].Descriptor()
}

func (Settings_DistributedProductMode) Type() protoreflect.EnumType {
	return &file_doublecloud_clickhouse_v1_user_proto_enumTypes[5]
}

func (x Settings_DistributedProductMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Settings_DistributedProductMode.Descriptor instead.
func (Settings_DistributedProductMode) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{9, 3}
}

type Settings_CountDistinctImplementation int32

const (
	Settings_COUNT_DISTINCT_IMPLEMENTATION_INVALID          Settings_CountDistinctImplementation = 0
	Settings_COUNT_DISTINCT_IMPLEMENTATION_UNIQ             Settings_CountDistinctImplementation = 1
	Settings_COUNT_DISTINCT_IMPLEMENTATION_UNIQ_COMBINED    Settings_CountDistinctImplementation = 2
	Settings_COUNT_DISTINCT_IMPLEMENTATION_UNIQ_COMBINED_64 Settings_CountDistinctImplementation = 3
	Settings_COUNT_DISTINCT_IMPLEMENTATION_UNIQ_HLL_12      Settings_CountDistinctImplementation = 4
	Settings_COUNT_DISTINCT_IMPLEMENTATION_UNIQ_EXACT       Settings_CountDistinctImplementation = 5
)

// Enum value maps for Settings_CountDistinctImplementation.
var (
	Settings_CountDistinctImplementation_name = map[int32]string{
		0: "COUNT_DISTINCT_IMPLEMENTATION_INVALID",
		1: "COUNT_DISTINCT_IMPLEMENTATION_UNIQ",
		2: "COUNT_DISTINCT_IMPLEMENTATION_UNIQ_COMBINED",
		3: "COUNT_DISTINCT_IMPLEMENTATION_UNIQ_COMBINED_64",
		4: "COUNT_DISTINCT_IMPLEMENTATION_UNIQ_HLL_12",
		5: "COUNT_DISTINCT_IMPLEMENTATION_UNIQ_EXACT",
	}
	Settings_CountDistinctImplementation_value = map[string]int32{
		"COUNT_DISTINCT_IMPLEMENTATION_INVALID":          0,
		"COUNT_DISTINCT_IMPLEMENTATION_UNIQ":             1,
		"COUNT_DISTINCT_IMPLEMENTATION_UNIQ_COMBINED":    2,
		"COUNT_DISTINCT_IMPLEMENTATION_UNIQ_COMBINED_64": 3,
		"COUNT_DISTINCT_IMPLEMENTATION_UNIQ_HLL_12":      4,
		"COUNT_DISTINCT_IMPLEMENTATION_UNIQ_EXACT":       5,
	}
)

func (x Settings_CountDistinctImplementation) Enum() *Settings_CountDistinctImplementation {
	p := new(Settings_CountDistinctImplementation)
	*p = x
	return p
}

func (x Settings_CountDistinctImplementation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Settings_CountDistinctImplementation) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_clickhouse_v1_user_proto_enumTypes[6].Descriptor()
}

func (Settings_CountDistinctImplementation) Type() protoreflect.EnumType {
	return &file_doublecloud_clickhouse_v1_user_proto_enumTypes[6]
}

func (x Settings_CountDistinctImplementation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Settings_CountDistinctImplementation.Descriptor instead.
func (Settings_CountDistinctImplementation) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{9, 4}
}

type Settings_JoinAlgorithm int32

const (
	Settings_JOIN_ALGORITHM_INVALID              Settings_JoinAlgorithm = 0
	Settings_JOIN_ALGORITHM_HASH                 Settings_JoinAlgorithm = 1
	Settings_JOIN_ALGORITHM_PARALLEL_HASH        Settings_JoinAlgorithm = 2
	Settings_JOIN_ALGORITHM_PARTIAL_MERGE        Settings_JoinAlgorithm = 3
	Settings_JOIN_ALGORITHM_DIRECT               Settings_JoinAlgorithm = 4
	Settings_JOIN_ALGORITHM_AUTO                 Settings_JoinAlgorithm = 5
	Settings_JOIN_ALGORITHM_FULL_SORTING_MERGE   Settings_JoinAlgorithm = 6
	Settings_JOIN_ALGORITHM_PREFER_PARTIAL_MERGE Settings_JoinAlgorithm = 7
)

// Enum value maps for Settings_JoinAlgorithm.
var (
	Settings_JoinAlgorithm_name = map[int32]string{
		0: "JOIN_ALGORITHM_INVALID",
		1: "JOIN_ALGORITHM_HASH",
		2: "JOIN_ALGORITHM_PARALLEL_HASH",
		3: "JOIN_ALGORITHM_PARTIAL_MERGE",
		4: "JOIN_ALGORITHM_DIRECT",
		5: "JOIN_ALGORITHM_AUTO",
		6: "JOIN_ALGORITHM_FULL_SORTING_MERGE",
		7: "JOIN_ALGORITHM_PREFER_PARTIAL_MERGE",
	}
	Settings_JoinAlgorithm_value = map[string]int32{
		"JOIN_ALGORITHM_INVALID":              0,
		"JOIN_ALGORITHM_HASH":                 1,
		"JOIN_ALGORITHM_PARALLEL_HASH":        2,
		"JOIN_ALGORITHM_PARTIAL_MERGE":        3,
		"JOIN_ALGORITHM_DIRECT":               4,
		"JOIN_ALGORITHM_AUTO":                 5,
		"JOIN_ALGORITHM_FULL_SORTING_MERGE":   6,
		"JOIN_ALGORITHM_PREFER_PARTIAL_MERGE": 7,
	}
)

func (x Settings_JoinAlgorithm) Enum() *Settings_JoinAlgorithm {
	p := new(Settings_JoinAlgorithm)
	*p = x
	return p
}

func (x Settings_JoinAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Settings_JoinAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_clickhouse_v1_user_proto_enumTypes[7].Descriptor()
}

func (Settings_JoinAlgorithm) Type() protoreflect.EnumType {
	return &file_doublecloud_clickhouse_v1_user_proto_enumTypes[7]
}

func (x Settings_JoinAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Settings_JoinAlgorithm.Descriptor instead.
func (Settings_JoinAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{9, 5}
}

type Settings_FormatRegexpEscapingRule int32

const (
	Settings_FORMAT_REGEXP_ESCAPING_RULE_INVALID Settings_FormatRegexpEscapingRule = 0
	Settings_FORMAT_REGEXP_ESCAPING_RULE_ESCAPED Settings_FormatRegexpEscapingRule = 1
	Settings_FORMAT_REGEXP_ESCAPING_RULE_QUOTED  Settings_FormatRegexpEscapingRule = 2
	Settings_FORMAT_REGEXP_ESCAPING_RULE_CSV     Settings_FormatRegexpEscapingRule = 3
	Settings_FORMAT_REGEXP_ESCAPING_RULE_JSON    Settings_FormatRegexpEscapingRule = 4
	Settings_FORMAT_REGEXP_ESCAPING_RULE_XML     Settings_FormatRegexpEscapingRule = 5
	Settings_FORMAT_REGEXP_ESCAPING_RULE_RAW     Settings_FormatRegexpEscapingRule = 6
)

// Enum value maps for Settings_FormatRegexpEscapingRule.
var (
	Settings_FormatRegexpEscapingRule_name = map[int32]string{
		0: "FORMAT_REGEXP_ESCAPING_RULE_INVALID",
		1: "FORMAT_REGEXP_ESCAPING_RULE_ESCAPED",
		2: "FORMAT_REGEXP_ESCAPING_RULE_QUOTED",
		3: "FORMAT_REGEXP_ESCAPING_RULE_CSV",
		4: "FORMAT_REGEXP_ESCAPING_RULE_JSON",
		5: "FORMAT_REGEXP_ESCAPING_RULE_XML",
		6: "FORMAT_REGEXP_ESCAPING_RULE_RAW",
	}
	Settings_FormatRegexpEscapingRule_value = map[string]int32{
		"FORMAT_REGEXP_ESCAPING_RULE_INVALID": 0,
		"FORMAT_REGEXP_ESCAPING_RULE_ESCAPED": 1,
		"FORMAT_REGEXP_ESCAPING_RULE_QUOTED":  2,
		"FORMAT_REGEXP_ESCAPING_RULE_CSV":     3,
		"FORMAT_REGEXP_ESCAPING_RULE_JSON":    4,
		"FORMAT_REGEXP_ESCAPING_RULE_XML":     5,
		"FORMAT_REGEXP_ESCAPING_RULE_RAW":     6,
	}
)

func (x Settings_FormatRegexpEscapingRule) Enum() *Settings_FormatRegexpEscapingRule {
	p := new(Settings_FormatRegexpEscapingRule)
	*p = x
	return p
}

func (x Settings_FormatRegexpEscapingRule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Settings_FormatRegexpEscapingRule) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_clickhouse_v1_user_proto_enumTypes[8].Descriptor()
}

func (Settings_FormatRegexpEscapingRule) Type() protoreflect.EnumType {
	return &file_doublecloud_clickhouse_v1_user_proto_enumTypes[8]
}

func (x Settings_FormatRegexpEscapingRule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Settings_FormatRegexpEscapingRule.Descriptor instead.
func (Settings_FormatRegexpEscapingRule) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{9, 6}
}

type Settings_DateTimeInputFormat int32

const (
	Settings_DATE_TIME_INPUT_FORMAT_INVALID        Settings_DateTimeInputFormat = 0
	Settings_DATE_TIME_INPUT_FORMAT_BEST_EFFORT    Settings_DateTimeInputFormat = 1
	Settings_DATE_TIME_INPUT_FORMAT_BASIC          Settings_DateTimeInputFormat = 2
	Settings_DATE_TIME_INPUT_FORMAT_BEST_EFFORT_US Settings_DateTimeInputFormat = 3
)

// Enum value maps for Settings_DateTimeInputFormat.
var (
	Settings_DateTimeInputFormat_name = map[int32]string{
		0: "DATE_TIME_INPUT_FORMAT_INVALID",
		1: "DATE_TIME_INPUT_FORMAT_BEST_EFFORT",
		2: "DATE_TIME_INPUT_FORMAT_BASIC",
		3: "DATE_TIME_INPUT_FORMAT_BEST_EFFORT_US",
	}
	Settings_DateTimeInputFormat_value = map[string]int32{
		"DATE_TIME_INPUT_FORMAT_INVALID":        0,
		"DATE_TIME_INPUT_FORMAT_BEST_EFFORT":    1,
		"DATE_TIME_INPUT_FORMAT_BASIC":          2,
		"DATE_TIME_INPUT_FORMAT_BEST_EFFORT_US": 3,
	}
)

func (x Settings_DateTimeInputFormat) Enum() *Settings_DateTimeInputFormat {
	p := new(Settings_DateTimeInputFormat)
	*p = x
	return p
}

func (x Settings_DateTimeInputFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Settings_DateTimeInputFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_clickhouse_v1_user_proto_enumTypes[9].Descriptor()
}

func (Settings_DateTimeInputFormat) Type() protoreflect.EnumType {
	return &file_doublecloud_clickhouse_v1_user_proto_enumTypes[9]
}

func (x Settings_DateTimeInputFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Settings_DateTimeInputFormat.Descriptor instead.
func (Settings_DateTimeInputFormat) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{9, 7}
}

type Settings_DateTimeOutputFormat int32

const (
	Settings_DATE_TIME_OUTPUT_FORMAT_INVALID        Settings_DateTimeOutputFormat = 0
	Settings_DATE_TIME_OUTPUT_FORMAT_SIMPLE         Settings_DateTimeOutputFormat = 1
	Settings_DATE_TIME_OUTPUT_FORMAT_ISO            Settings_DateTimeOutputFormat = 2
	Settings_DATE_TIME_OUTPUT_FORMAT_UNIX_TIMESTAMP Settings_DateTimeOutputFormat = 3
)

// Enum value maps for Settings_DateTimeOutputFormat.
var (
	Settings_DateTimeOutputFormat_name = map[int32]string{
		0: "DATE_TIME_OUTPUT_FORMAT_INVALID",
		1: "DATE_TIME_OUTPUT_FORMAT_SIMPLE",
		2: "DATE_TIME_OUTPUT_FORMAT_ISO",
		3: "DATE_TIME_OUTPUT_FORMAT_UNIX_TIMESTAMP",
	}
	Settings_DateTimeOutputFormat_value = map[string]int32{
		"DATE_TIME_OUTPUT_FORMAT_INVALID":        0,
		"DATE_TIME_OUTPUT_FORMAT_SIMPLE":         1,
		"DATE_TIME_OUTPUT_FORMAT_ISO":            2,
		"DATE_TIME_OUTPUT_FORMAT_UNIX_TIMESTAMP": 3,
	}
)

func (x Settings_DateTimeOutputFormat) Enum() *Settings_DateTimeOutputFormat {
	p := new(Settings_DateTimeOutputFormat)
	*p = x
	return p
}

func (x Settings_DateTimeOutputFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Settings_DateTimeOutputFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_clickhouse_v1_user_proto_enumTypes[10].Descriptor()
}

func (Settings_DateTimeOutputFormat) Type() protoreflect.EnumType {
	return &file_doublecloud_clickhouse_v1_user_proto_enumTypes[10]
}

func (x Settings_DateTimeOutputFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Settings_DateTimeOutputFormat.Descriptor instead.
func (Settings_DateTimeOutputFormat) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{9, 8}
}

type Settings_LocalFilesystemReadMethod int32

const (
	Settings_LOCAL_FILESYSTEM_READ_METHOD_INVALID          Settings_LocalFilesystemReadMethod = 0
	Settings_LOCAL_FILESYSTEM_READ_METHOD_READ             Settings_LocalFilesystemReadMethod = 1
	Settings_LOCAL_FILESYSTEM_READ_METHOD_PREAD_THREADPOOL Settings_LocalFilesystemReadMethod = 2
	Settings_LOCAL_FILESYSTEM_READ_METHOD_PREAD            Settings_LocalFilesystemReadMethod = 3
	Settings_LOCAL_FILESYSTEM_READ_METHOD_NMAP             Settings_LocalFilesystemReadMethod = 4
)

// Enum value maps for Settings_LocalFilesystemReadMethod.
var (
	Settings_LocalFilesystemReadMethod_name = map[int32]string{
		0: "LOCAL_FILESYSTEM_READ_METHOD_INVALID",
		1: "LOCAL_FILESYSTEM_READ_METHOD_READ",
		2: "LOCAL_FILESYSTEM_READ_METHOD_PREAD_THREADPOOL",
		3: "LOCAL_FILESYSTEM_READ_METHOD_PREAD",
		4: "LOCAL_FILESYSTEM_READ_METHOD_NMAP",
	}
	Settings_LocalFilesystemReadMethod_value = map[string]int32{
		"LOCAL_FILESYSTEM_READ_METHOD_INVALID":          0,
		"LOCAL_FILESYSTEM_READ_METHOD_READ":             1,
		"LOCAL_FILESYSTEM_READ_METHOD_PREAD_THREADPOOL": 2,
		"LOCAL_FILESYSTEM_READ_METHOD_PREAD":            3,
		"LOCAL_FILESYSTEM_READ_METHOD_NMAP":             4,
	}
)

func (x Settings_LocalFilesystemReadMethod) Enum() *Settings_LocalFilesystemReadMethod {
	p := new(Settings_LocalFilesystemReadMethod)
	*p = x
	return p
}

func (x Settings_LocalFilesystemReadMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Settings_LocalFilesystemReadMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_clickhouse_v1_user_proto_enumTypes[11].Descriptor()
}

func (Settings_LocalFilesystemReadMethod) Type() protoreflect.EnumType {
	return &file_doublecloud_clickhouse_v1_user_proto_enumTypes[11]
}

func (x Settings_LocalFilesystemReadMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Settings_LocalFilesystemReadMethod.Descriptor instead.
func (Settings_LocalFilesystemReadMethod) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{9, 9}
}

type Settings_RemoteFilesystemReadMethod int32

const (
	Settings_REMOTE_FILESYSTEM_READ_METHOD_INVALID    Settings_RemoteFilesystemReadMethod = 0
	Settings_REMOTE_FILESYSTEM_READ_METHOD_READ       Settings_RemoteFilesystemReadMethod = 1
	Settings_REMOTE_FILESYSTEM_READ_METHOD_THREADPOOL Settings_RemoteFilesystemReadMethod = 2
)

// Enum value maps for Settings_RemoteFilesystemReadMethod.
var (
	Settings_RemoteFilesystemReadMethod_name = map[int32]string{
		0: "REMOTE_FILESYSTEM_READ_METHOD_INVALID",
		1: "REMOTE_FILESYSTEM_READ_METHOD_READ",
		2: "REMOTE_FILESYSTEM_READ_METHOD_THREADPOOL",
	}
	Settings_RemoteFilesystemReadMethod_value = map[string]int32{
		"REMOTE_FILESYSTEM_READ_METHOD_INVALID":    0,
		"REMOTE_FILESYSTEM_READ_METHOD_READ":       1,
		"REMOTE_FILESYSTEM_READ_METHOD_THREADPOOL": 2,
	}
)

func (x Settings_RemoteFilesystemReadMethod) Enum() *Settings_RemoteFilesystemReadMethod {
	p := new(Settings_RemoteFilesystemReadMethod)
	*p = x
	return p
}

func (x Settings_RemoteFilesystemReadMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Settings_RemoteFilesystemReadMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_clickhouse_v1_user_proto_enumTypes[12].Descriptor()
}

func (Settings_RemoteFilesystemReadMethod) Type() protoreflect.EnumType {
	return &file_doublecloud_clickhouse_v1_user_proto_enumTypes[12]
}

func (x Settings_RemoteFilesystemReadMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Settings_RemoteFilesystemReadMethod.Descriptor instead.
func (Settings_RemoteFilesystemReadMethod) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{9, 10}
}

// ClickHouse user.
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the ClickHouse user.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ID of the ClickHouse cluster.
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Default role settigns.
	DefaultRoles *DefaultRoles `protobuf:"bytes,3,opt,name=default_roles,json=defaultRoles,proto3" json:"default_roles,omitempty"`
	// Grantees settings.
	Grantees *Grantees `protobuf:"bytes,4,opt,name=grantees,proto3" json:"grantees,omitempty"`
	// List of the privileges of the user.
	Privileges *Privileges `protobuf:"bytes,5,opt,name=privileges,proto3" json:"privileges,omitempty"`
	// Settings and constraints of the user.
	Settings *Settings `protobuf:"bytes,6,opt,name=settings,proto3" json:"settings,omitempty"`
	// List of assigned quotas to the user.
	QuotaNames *QuotaNames `protobuf:"bytes,7,opt,name=quota_names,json=quotaNames,proto3" json:"quota_names,omitempty"`
	// List of assigned roles to the user.
	AssignedRoles *AssignedRoles `protobuf:"bytes,8,opt,name=assigned_roles,json=assignedRoles,proto3" json:"assigned_roles,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *User) GetDefaultRoles() *DefaultRoles {
	if x != nil {
		return x.DefaultRoles
	}
	return nil
}

func (x *User) GetGrantees() *Grantees {
	if x != nil {
		return x.Grantees
	}
	return nil
}

func (x *User) GetPrivileges() *Privileges {
	if x != nil {
		return x.Privileges
	}
	return nil
}

func (x *User) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *User) GetQuotaNames() *QuotaNames {
	if x != nil {
		return x.QuotaNames
	}
	return nil
}

func (x *User) GetAssignedRoles() *AssignedRoles {
	if x != nil {
		return x.AssignedRoles
	}
	return nil
}

// ClickHouse role.
type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the ClickHouse user.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ID of the ClickHouse cluster.
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// List of the privileges of the role.
	Privileges *Privileges `protobuf:"bytes,3,opt,name=privileges,proto3" json:"privileges,omitempty"`
	// Settings and constraints of the role.
	Settings *Settings `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
	// List of assigned quotas to the role.
	QuotaNames *QuotaNames `protobuf:"bytes,5,opt,name=quota_names,json=quotaNames,proto3" json:"quota_names,omitempty"`
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{1}
}

func (x *Role) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Role) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *Role) GetPrivileges() *Privileges {
	if x != nil {
		return x.Privileges
	}
	return nil
}

func (x *Role) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *Role) GetQuotaNames() *QuotaNames {
	if x != nil {
		return x.QuotaNames
	}
	return nil
}

// Authentication params of the user.
type Authentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identification type. By default IDENTIFICATION_TYPE_SHA256_PASSWORD will be
	// used.
	Type Authentication_IdentificationType `protobuf:"varint,1,opt,name=type,proto3,enum=doublecloud.clickhouse.v1.Authentication_IdentificationType" json:"type,omitempty"`
	// Password of the user. Required for SHA256_PASSWORD, DOUBLE_SHA1_PASSWORD and
	// BCRYPT_PASSWORD identification types.
	Password *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *Authentication) Reset() {
	*x = Authentication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authentication) ProtoMessage() {}

func (x *Authentication) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authentication.ProtoReflect.Descriptor instead.
func (*Authentication) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{2}
}

func (x *Authentication) GetType() Authentication_IdentificationType {
	if x != nil {
		return x.Type
	}
	return Authentication_IDENTIFICATION_TYPE_INVALID
}

func (x *Authentication) GetPassword() *wrapperspb.StringValue {
	if x != nil {
		return x.Password
	}
	return nil
}

// Default ClickHouse role settigns.
type DefaultRoles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Shows that all granted roles set for user by default.
	All bool `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty"`
	// List of granted roles provided by default.
	List []string `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	// All the granted roles set as default excepting of the listed ones.
	Except []string `protobuf:"bytes,3,rep,name=except,proto3" json:"except,omitempty"`
}

func (x *DefaultRoles) Reset() {
	*x = DefaultRoles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultRoles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultRoles) ProtoMessage() {}

func (x *DefaultRoles) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultRoles.ProtoReflect.Descriptor instead.
func (*DefaultRoles) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{3}
}

func (x *DefaultRoles) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *DefaultRoles) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *DefaultRoles) GetExcept() []string {
	if x != nil {
		return x.Except
	}
	return nil
}

// Assigned roles.
type AssignedRoles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of assigned roles to the user or another role.
	Roles []string `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *AssignedRoles) Reset() {
	*x = AssignedRoles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedRoles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedRoles) ProtoMessage() {}

func (x *AssignedRoles) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedRoles.ProtoReflect.Descriptor instead.
func (*AssignedRoles) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{4}
}

func (x *AssignedRoles) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

// Grantees settings.
type Grantees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Shows that this user can grant privileges to anyone.
	Any bool `protobuf:"varint,1,opt,name=any,proto3" json:"any,omitempty"`
	// List of users or roles this user can grant privileges to.
	List []string `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	// List of users or roles this user can't grant privileges to.
	Except []string `protobuf:"bytes,3,rep,name=except,proto3" json:"except,omitempty"`
}

func (x *Grantees) Reset() {
	*x = Grantees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Grantees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grantees) ProtoMessage() {}

func (x *Grantees) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grantees.ProtoReflect.Descriptor instead.
func (*Grantees) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{5}
}

func (x *Grantees) GetAny() bool {
	if x != nil {
		return x.Any
	}
	return false
}

func (x *Grantees) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *Grantees) GetExcept() []string {
	if x != nil {
		return x.Except
	}
	return nil
}

// ClickHouse privileges.
type Privileges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of grants.
	Grants []*Grant `protobuf:"bytes,1,rep,name=grants,proto3" json:"grants,omitempty"`
}

func (x *Privileges) Reset() {
	*x = Privileges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Privileges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Privileges) ProtoMessage() {}

func (x *Privileges) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Privileges.ProtoReflect.Descriptor instead.
func (*Privileges) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{6}
}

func (x *Privileges) GetGrants() []*Grant {
	if x != nil {
		return x.Grants
	}
	return nil
}

// Assigned quotas to a user or role.
type QuotaNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of assigned quotas names.
	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *QuotaNames) Reset() {
	*x = QuotaNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotaNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaNames) ProtoMessage() {}

func (x *QuotaNames) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaNames.ProtoReflect.Descriptor instead.
func (*QuotaNames) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{7}
}

func (x *QuotaNames) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

// Permission to execute specific kind of queries.
type Grant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Type of the privilege access.
	AccessType Grant_AccessType `protobuf:"varint,1,opt,name=access_type,json=accessType,proto3,enum=doublecloud.clickhouse.v1.Grant_AccessType" json:"access_type,omitempty"`
	// Name of the database to which access is granted or partially revoked.
	Database string `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	// Name of the table to which access is granted or partially revoked.
	Table string `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	// Name of the columns to which access is granted or partially revoked.
	// Privilege should have COLUMN level.
	Columns []string `protobuf:"bytes,4,rep,name=columns,proto3" json:"columns,omitempty"`
	// Shows whether the privilege should be revoked or not. By default is False.
	// False — describes a grant.
	// True  - describes a partial revoke.
	IsPartialRevoke bool `protobuf:"varint,5,opt,name=is_partial_revoke,json=isPartialRevoke,proto3" json:"is_partial_revoke,omitempty"`
	// Permission is granted with GRANT option. Works only if it is described as a
	// grant.
	GrantOption bool `protobuf:"varint,6,opt,name=grant_option,json=grantOption,proto3" json:"grant_option,omitempty"`
}

func (x *Grant) Reset() {
	*x = Grant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Grant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grant) ProtoMessage() {}

func (x *Grant) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grant.ProtoReflect.Descriptor instead.
func (*Grant) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{8}
}

func (x *Grant) GetAccessType() Grant_AccessType {
	if x != nil {
		return x.AccessType
	}
	return Grant_ACCESS_TYPE_INVALID
}

func (x *Grant) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *Grant) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *Grant) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *Grant) GetIsPartialRevoke() bool {
	if x != nil {
		return x.IsPartialRevoke
	}
	return false
}

func (x *Grant) GetGrantOption() bool {
	if x != nil {
		return x.GrantOption
	}
	return false
}

// Clickhouse settings and constraints. Supported settings are a limited subset of
// all the settings
// described in [ClickHouse
// documentation](https://clickhouse.com/docs/en/operations/settings/).
type Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Restricts permissions for non-DDL queries.
	// Possible values:
	// * 0 (default) -  no restrictions.
	// * 1 - only read data queries are allowed.
	// * 2 - read data and change settings queries are allowed.
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries#readonly).
	Readonly *Settings_Int64Setting `protobuf:"bytes,1,opt,name=readonly,proto3" json:"readonly,omitempty"`
	// Whether DDL queries are allowed. Default value: `false`.
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries#allow_ddl).
	AllowDdl *Settings_BoolSetting `protobuf:"bytes,2,opt,name=allow_ddl,json=allowDdl,proto3" json:"allow_ddl,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#insert_quorum).
	InsertQuorum *Settings_Int64Setting `protobuf:"bytes,3,opt,name=insert_quorum,json=insertQuorum,proto3" json:"insert_quorum,omitempty"`
	// Quorum write timeout in milliseconds. Default value: 60000.
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#insert_quorum_timeout).
	InsertQuorumTimeout *Settings_Int64Setting `protobuf:"bytes,4,opt,name=insert_quorum_timeout,json=insertQuorumTimeout,proto3" json:"insert_quorum_timeout,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#select_sequential_consistency).
	SelectSequentialConsistency *Settings_BoolSetting `protobuf:"bytes,5,opt,name=select_sequential_consistency,json=selectSequentialConsistency,proto3" json:"select_sequential_consistency,omitempty"`
	// Max replica delay in milliseconds. If a replica lags more than the set value,
	// this replica is not used. Default value: 300000.
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_replica_delay_for_distributed_queries).
	MaxReplicaDelayForDistributedQueries *Settings_Int64Setting `protobuf:"bytes,6,opt,name=max_replica_delay_for_distributed_queries,json=maxReplicaDelayForDistributedQueries,proto3" json:"max_replica_delay_for_distributed_queries,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#fallback_to_stale_replicas_for_distributed_queries).
	FallbackToStaleReplicasForDistributedQueries *Settings_BoolSetting `protobuf:"bytes,7,opt,name=fallback_to_stale_replicas_for_distributed_queries,json=fallbackToStaleReplicasForDistributedQueries,proto3" json:"fallback_to_stale_replicas_for_distributed_queries,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_threads).
	MaxThreads *Settings_Int64Setting `protobuf:"bytes,8,opt,name=max_threads,json=maxThreads,proto3" json:"max_threads,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#setting-max_block_size).
	MaxBlockSize *Settings_Int64Setting `protobuf:"bytes,9,opt,name=max_block_size,json=maxBlockSize,proto3" json:"max_block_size,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_insert_block_size).
	MaxInsertBlockSize *Settings_Int64Setting `protobuf:"bytes,10,opt,name=max_insert_block_size,json=maxInsertBlockSize,proto3" json:"max_insert_block_size,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_memory_usage).
	MaxMemoryUsage *Settings_Int64Setting `protobuf:"bytes,11,opt,name=max_memory_usage,json=maxMemoryUsage,proto3" json:"max_memory_usage,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#max-memory-usage-for-user).
	MaxMemoryUsageForUser *Settings_Int64Setting `protobuf:"bytes,12,opt,name=max_memory_usage_for_user,json=maxMemoryUsageForUser,proto3" json:"max_memory_usage_for_user,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query_complexity#max-rows-to-read).
	MaxRowsToRead *Settings_Int64Setting `protobuf:"bytes,13,opt,name=max_rows_to_read,json=maxRowsToRead,proto3" json:"max_rows_to_read,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query_complexity#max-bytes-to-read).
	MaxBytesToRead *Settings_Int64Setting `protobuf:"bytes,14,opt,name=max_bytes_to_read,json=maxBytesToRead,proto3" json:"max_bytes_to_read,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query_complexity#read-overflow-mode).
	ReadOverflowMode *Settings_OverflowModeSetting `protobuf:"bytes,15,opt,name=read_overflow_mode,json=readOverflowMode,proto3" json:"read_overflow_mode,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query_complexity#max-rows-to-group-by).
	MaxRowsToGroupBy *Settings_Int64Setting `protobuf:"bytes,16,opt,name=max_rows_to_group_by,json=maxRowsToGroupBy,proto3" json:"max_rows_to_group_by,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query_complexity#group-by-overflow-mode).
	GroupByOverflowMode *Settings_GroupByOverflowModeSetting `protobuf:"bytes,17,opt,name=group_by_overflow_mode,json=groupByOverflowMode,proto3" json:"group_by_overflow_mode,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query_complexity#max-rows-to-sort).
	MaxRowsToSort *Settings_Int64Setting `protobuf:"bytes,18,opt,name=max_rows_to_sort,json=maxRowsToSort,proto3" json:"max_rows_to_sort,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query_complexity#max-bytes-to-sort).
	MaxBytesToSort *Settings_Int64Setting `protobuf:"bytes,19,opt,name=max_bytes_to_sort,json=maxBytesToSort,proto3" json:"max_bytes_to_sort,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query_complexity#sort-overflow-mode).
	SortOverflowMode *Settings_OverflowModeSetting `protobuf:"bytes,20,opt,name=sort_overflow_mode,json=sortOverflowMode,proto3" json:"sort_overflow_mode,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query_complexity#max-result-rows).
	MaxResultRows *Settings_Int64Setting `protobuf:"bytes,21,opt,name=max_result_rows,json=maxResultRows,proto3" json:"max_result_rows,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query_complexity#max-result-bytes).
	MaxResultBytes *Settings_Int64Setting `protobuf:"bytes,22,opt,name=max_result_bytes,json=maxResultBytes,proto3" json:"max_result_bytes,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query_complexity#result-overflow-mode).
	ResultOverflowMode *Settings_OverflowModeSetting `protobuf:"bytes,23,opt,name=result_overflow_mode,json=resultOverflowMode,proto3" json:"result_overflow_mode,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query_complexity#max-rows-in-distinct).
	MaxRowsInDistinct *Settings_Int64Setting `protobuf:"bytes,24,opt,name=max_rows_in_distinct,json=maxRowsInDistinct,proto3" json:"max_rows_in_distinct,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query_complexity#max-bytes-in-distinct).
	MaxBytesInDistinct *Settings_Int64Setting `protobuf:"bytes,25,opt,name=max_bytes_in_distinct,json=maxBytesInDistinct,proto3" json:"max_bytes_in_distinct,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query_complexity#distinct-overflow-mode).
	DistinctOverflowMode *Settings_OverflowModeSetting `protobuf:"bytes,26,opt,name=distinct_overflow_mode,json=distinctOverflowMode,proto3" json:"distinct_overflow_mode,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query_complexity#max-rows-to-transfer).
	MaxRowsToTransfer *Settings_Int64Setting `protobuf:"bytes,27,opt,name=max_rows_to_transfer,json=maxRowsToTransfer,proto3" json:"max_rows_to_transfer,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query_complexity#max-bytes-to-transfer).
	MaxBytesToTransfer *Settings_Int64Setting `protobuf:"bytes,28,opt,name=max_bytes_to_transfer,json=maxBytesToTransfer,proto3" json:"max_bytes_to_transfer,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query_complexity#transfer-overflow-mode).
	TransferOverflowMode *Settings_OverflowModeSetting `protobuf:"bytes,29,opt,name=transfer_overflow_mode,json=transferOverflowMode,proto3" json:"transfer_overflow_mode,omitempty"`
	// Maximum query execution time in milliseconds.
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query_complexity#max-execution-time).
	MaxExecutionTime *Settings_Int64Setting `protobuf:"bytes,30,opt,name=max_execution_time,json=maxExecutionTime,proto3" json:"max_execution_time,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query_complexity#timeout-overflow-mode).
	TimeoutOverflowMode *Settings_OverflowModeSetting `protobuf:"bytes,31,opt,name=timeout_overflow_mode,json=timeoutOverflowMode,proto3" json:"timeout_overflow_mode,omitempty"`
	// Maximum number of columns that can be read from a table in a single query.
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query_complexity#max-columns-to-read).
	MaxColumnsToRead *Settings_Int64Setting `protobuf:"bytes,32,opt,name=max_columns_to_read,json=maxColumnsToRead,proto3" json:"max_columns_to_read,omitempty"`
	// Maximum number of temporary columns that must be kept in RAM at the same time
	// when running a query, including constant columns.
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query_complexity#max-temporary-columns).
	MaxTemporaryColumns *Settings_Int64Setting `protobuf:"bytes,33,opt,name=max_temporary_columns,json=maxTemporaryColumns,proto3" json:"max_temporary_columns,omitempty"`
	// Maximum number of temporary columns that must be kept in RAM at the same time
	// when running a query, excluding constant columns.
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query_complexity#max-temporary-non-const-columns).
	MaxTemporaryNonConstColumns *Settings_Int64Setting `protobuf:"bytes,34,opt,name=max_temporary_non_const_columns,json=maxTemporaryNonConstColumns,proto3" json:"max_temporary_non_const_columns,omitempty"`
	// The maximum part of a query that can be taken to RAM for parsing with the SQL
	// parser, in bytes. Default value: 262144.
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_query_size).
	MaxQuerySize *Settings_Int64Setting `protobuf:"bytes,35,opt,name=max_query_size,json=maxQuerySize,proto3" json:"max_query_size,omitempty"`
	// Maximum depth of query syntax tree. Default value: 1000.
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query_complexity#max-ast-depth).
	MaxAstDepth *Settings_Int64Setting `protobuf:"bytes,36,opt,name=max_ast_depth,json=maxAstDepth,proto3" json:"max_ast_depth,omitempty"`
	// Maximum size of query syntax tree in number of nodes. Default value: 50000.
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query_complexity#max-ast-elements).
	MaxAstElements *Settings_Int64Setting `protobuf:"bytes,37,opt,name=max_ast_elements,json=maxAstElements,proto3" json:"max_ast_elements,omitempty"`
	// Maximum size of query syntax tree in number of nodes after expansion of aliases
	// and the asterisk. Default value: 500000.
	MaxExpandedAstElements *Settings_Int64Setting `protobuf:"bytes,38,opt,name=max_expanded_ast_elements,json=maxExpandedAstElements,proto3" json:"max_expanded_ast_elements,omitempty"`
	// Connection timeout in milliseconds.
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#connect-timeout-receive-timeout-send-timeout).
	ConnectTimeout *Settings_Int64Setting `protobuf:"bytes,39,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connect_timeout,omitempty"`
	// Receive timeout in milliseconds.
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#connect-timeout-receive-timeout-send-timeout).
	ReceiveTimeout *Settings_Int64Setting `protobuf:"bytes,40,opt,name=receive_timeout,json=receiveTimeout,proto3" json:"receive_timeout,omitempty"`
	// Send timeout in milliseconds.
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#connect-timeout-receive-timeout-send-timeout).
	SendTimeout *Settings_Int64Setting `protobuf:"bytes,41,opt,name=send_timeout,json=sendTimeout,proto3" json:"send_timeout,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/sql-reference/statements/alter#synchronicity-of-alter-queries).
	ReplicationAlterPartitionsSync *Settings_Int64Setting `protobuf:"bytes,42,opt,name=replication_alter_partitions_sync,json=replicationAlterPartitionsSync,proto3" json:"replication_alter_partitions_sync,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#distributed-product-mode).
	DistributedProductMode *Settings_DistributedProductModeSetting `protobuf:"bytes,43,opt,name=distributed_product_mode,json=distributedProductMode,proto3" json:"distributed_product_mode,omitempty"`
	// Whether expression compilation is enabled.
	CompileExpressions *Settings_BoolSetting `protobuf:"bytes,44,opt,name=compile_expressions,json=compileExpressions,proto3" json:"compile_expressions,omitempty"`
	// The number of identical expressions before they are compiled.
	MinCountToCompileExpression *Settings_Int64Setting `protobuf:"bytes,45,opt,name=min_count_to_compile_expression,json=minCountToCompileExpression,proto3" json:"min_count_to_compile_expression,omitempty"`
	// Squash blocks passed to INSERT query to specified size in rows, if blocks are
	// not big enough. If set to `0`,
	// blocks will never be squashed.
	MinInsertBlockSizeRows *Settings_Int64Setting `protobuf:"bytes,46,opt,name=min_insert_block_size_rows,json=minInsertBlockSizeRows,proto3" json:"min_insert_block_size_rows,omitempty"`
	// Squash blocks passed to INSERT query to specified size in bytes, if blocks are
	// not big enough.  If set to `0`,
	// blocks will never be squashed.
	MinInsertBlockSizeBytes *Settings_Int64Setting `protobuf:"bytes,47,opt,name=min_insert_block_size_bytes,json=minInsertBlockSizeBytes,proto3" json:"min_insert_block_size_bytes,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#min_bytes_to_use_direct_io).
	MinBytesToUseDirectIo *Settings_Int64Setting `protobuf:"bytes,48,opt,name=min_bytes_to_use_direct_io,json=minBytesToUseDirectIo,proto3" json:"min_bytes_to_use_direct_io,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#setting-use_uncompressed_cache).
	UseUncompressedCache *Settings_BoolSetting `protobuf:"bytes,49,opt,name=use_uncompressed_cache,json=useUncompressedCache,proto3" json:"use_uncompressed_cache,omitempty"`
	// The maximum request size in rows to use the cache of uncompressed data. The
	// cache is not used for requests larger
	// than the specified value.
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#setting-merge_tree_max_rows_to_use_cache).
	MergeTreeMaxRowsToUseCache *Settings_Int64Setting `protobuf:"bytes,50,opt,name=merge_tree_max_rows_to_use_cache,json=mergeTreeMaxRowsToUseCache,proto3" json:"merge_tree_max_rows_to_use_cache,omitempty"`
	// The maximum request size in bytes to use the cache of uncompressed data. The
	// cache is not used for requests larger
	// than the specified value.
	MergeTreeMaxBytesToUseCache *Settings_Int64Setting `protobuf:"bytes,51,opt,name=merge_tree_max_bytes_to_use_cache,json=mergeTreeMaxBytesToUseCache,proto3" json:"merge_tree_max_bytes_to_use_cache,omitempty"`
	// The minimum number of rows to be read from a file to enable concurrent read.
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#setting-merge_tree_min_rows_for_concurrent_read).
	MergeTreeMinRowsForConcurrentRead *Settings_Int64Setting `protobuf:"bytes,52,opt,name=merge_tree_min_rows_for_concurrent_read,json=mergeTreeMinRowsForConcurrentRead,proto3" json:"merge_tree_min_rows_for_concurrent_read,omitempty"`
	// The minimum number of bytes to be read from a file to enable concurrent read.
	MergeTreeMinBytesForConcurrentRead *Settings_Int64Setting `protobuf:"bytes,53,opt,name=merge_tree_min_bytes_for_concurrent_read,json=mergeTreeMinBytesForConcurrentRead,proto3" json:"merge_tree_min_bytes_for_concurrent_read,omitempty"`
	// Priority of the query.
	Priority *Settings_Int64Setting `protobuf:"bytes,54,opt,name=priority,proto3" json:"priority,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_network_bandwidth).
	MaxNetworkBandwidth *Settings_Int64Setting `protobuf:"bytes,55,opt,name=max_network_bandwidth,json=maxNetworkBandwidth,proto3" json:"max_network_bandwidth,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_network_bandwidth_for_user).
	MaxNetworkBandwidthForUser *Settings_Int64Setting `protobuf:"bytes,56,opt,name=max_network_bandwidth_for_user,json=maxNetworkBandwidthForUser,proto3" json:"max_network_bandwidth_for_user,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#force_index_by_date).
	ForceIndexByDate *Settings_BoolSetting `protobuf:"bytes,57,opt,name=force_index_by_date,json=forceIndexByDate,proto3" json:"force_index_by_date,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#force-primary-key).
	ForcePrimaryKey *Settings_BoolSetting `protobuf:"bytes,58,opt,name=force_primary_key,json=forcePrimaryKey,proto3" json:"force_primary_key,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#input_format_values_interpret_expressions).
	InputFormatValuesInterpretExpressions *Settings_BoolSetting `protobuf:"bytes,59,opt,name=input_format_values_interpret_expressions,json=inputFormatValuesInterpretExpressions,proto3" json:"input_format_values_interpret_expressions,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#session_settings-input_format_defaults_for_omitted_fields).
	InputFormatDefaultsForOmittedFields *Settings_BoolSetting `protobuf:"bytes,60,opt,name=input_format_defaults_for_omitted_fields,json=inputFormatDefaultsForOmittedFields,proto3" json:"input_format_defaults_for_omitted_fields,omitempty"`
	// Whether quoting of 64-bit integers is enabled in JSON output format.
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#session_settings-output_format_json_quote_64bit_integers).
	OutputFormatJsonQuote_64BitIntegers *Settings_BoolSetting `protobuf:"bytes,61,opt,name=output_format_json_quote_64bit_integers,json=outputFormatJsonQuote64bitIntegers,proto3" json:"output_format_json_quote_64bit_integers,omitempty"`
	// Whether output of special floating-point values (`+nan`, `-nan`, `+inf` and
	// `-inf`) is enabled in JSON output format.
	OutputFormatJsonQuoteDenormals *Settings_BoolSetting `protobuf:"bytes,62,opt,name=output_format_json_quote_denormals,json=outputFormatJsonQuoteDenormals,proto3" json:"output_format_json_quote_denormals,omitempty"`
	// HTTP connection timeout, in milliseconds.
	HttpConnectionTimeout *Settings_Int64Setting `protobuf:"bytes,63,opt,name=http_connection_timeout,json=httpConnectionTimeout,proto3" json:"http_connection_timeout,omitempty"`
	// HTTP receive timeout, in milliseconds.
	HttpReceiveTimeout *Settings_Int64Setting `protobuf:"bytes,64,opt,name=http_receive_timeout,json=httpReceiveTimeout,proto3" json:"http_receive_timeout,omitempty"`
	// HTTP send timeout, in milliseconds.
	HttpSendTimeout *Settings_Int64Setting `protobuf:"bytes,65,opt,name=http_send_timeout,json=httpSendTimeout,proto3" json:"http_send_timeout,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#enable_http_compression).
	EnableHttpCompression *Settings_BoolSetting `protobuf:"bytes,66,opt,name=enable_http_compression,json=enableHttpCompression,proto3" json:"enable_http_compression,omitempty"`
	// Whether progress notifications using X-ClickHouse-Progress headers are enabled.
	// Default value: `false`.
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#send_progress_in_http_headers).
	SendProgressInHttpHeaders *Settings_BoolSetting `protobuf:"bytes,67,opt,name=send_progress_in_http_headers,json=sendProgressInHttpHeaders,proto3" json:"send_progress_in_http_headers,omitempty"`
	// Minimum interval between progress notifications, in milliseconds. Default value:
	// 100.
	HttpHeadersProgressInterval *Settings_Int64Setting `protobuf:"bytes,68,opt,name=http_headers_progress_interval,json=httpHeadersProgressInterval,proto3" json:"http_headers_progress_interval,omitempty"`
	// Whether CORS header in HTTP responses is enabled. Default value: `false`.
	AddHttpCorsHeader *Settings_BoolSetting `protobuf:"bytes,69,opt,name=add_http_cors_header,json=addHttpCorsHeader,proto3" json:"add_http_cors_header,omitempty"`
	// Whether the memory-saving mode of distributed aggregation is enabled.
	DistributedAggregationMemoryEfficient *Settings_BoolSetting `protobuf:"bytes,70,opt,name=distributed_aggregation_memory_efficient,json=distributedAggregationMemoryEfficient,proto3" json:"distributed_aggregation_memory_efficient,omitempty"`
	// Timeout for DDL queries, in milliseconds.
	DistributedDdlTaskTimeout *Settings_Int64Setting `protobuf:"bytes,71,opt,name=distributed_ddl_task_timeout,json=distributedDdlTaskTimeout,proto3" json:"distributed_ddl_task_timeout,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings-max_bytes_before_external_group_by).
	MaxBytesBeforeExternalGroupBy *Settings_Int64Setting `protobuf:"bytes,72,opt,name=max_bytes_before_external_group_by,json=maxBytesBeforeExternalGroupBy,proto3" json:"max_bytes_before_external_group_by,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/order-by#implementation-details).
	MaxBytesBeforeExternalSort *Settings_Int64Setting `protobuf:"bytes,73,opt,name=max_bytes_before_external_sort,json=maxBytesBeforeExternalSort,proto3" json:"max_bytes_before_external_sort,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://github.com/ClickHouse/ClickHouse/blob/2442c71e273c041448bc5e0b5a406dedcd9e006c/src/Core/Settings.h#L156).
	GroupByTwoLevelThreshold *Settings_Int64Setting `protobuf:"bytes,74,opt,name=group_by_two_level_threshold,json=groupByTwoLevelThreshold,proto3" json:"group_by_two_level_threshold,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://github.com/ClickHouse/ClickHouse/blob/2442c71e273c041448bc5e0b5a406dedcd9e006c/src/Core/Settings.h#L157).
	GroupByTwoLevelThresholdBytes *Settings_Int64Setting `protobuf:"bytes,75,opt,name=group_by_two_level_threshold_bytes,json=groupByTwoLevelThresholdBytes,proto3" json:"group_by_two_level_threshold_bytes,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#low_cardinality_allow_in_native_format).
	LowCardinalityAllowInNativeFormat *Settings_BoolSetting `protobuf:"bytes,76,opt,name=low_cardinality_allow_in_native_format,json=lowCardinalityAllowInNativeFormat,proto3" json:"low_cardinality_allow_in_native_format,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://github.com/ClickHouse/ClickHouse/blob/2442c71e273c041448bc5e0b5a406dedcd9e006c/src/Core/Settings.h#L340).
	EmptyResultForAggregationByEmptySet *Settings_BoolSetting `protobuf:"bytes,77,opt,name=empty_result_for_aggregation_by_empty_set,json=emptyResultForAggregationByEmptySet,proto3" json:"empty_result_for_aggregation_by_empty_set,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#skip_unavailable_shards).
	SkipUnavailableShards *Settings_BoolSetting `protobuf:"bytes,78,opt,name=skip_unavailable_shards,json=skipUnavailableShards,proto3" json:"skip_unavailable_shards,omitempty"`
	// Minimal execution speed in rows per second.
	MinExecutionSpeed *Settings_Int64Setting `protobuf:"bytes,79,opt,name=min_execution_speed,json=minExecutionSpeed,proto3" json:"min_execution_speed,omitempty"`
	// Minimal execution speed in bytes per second.
	MinExecutionSpeedBytes *Settings_Int64Setting `protobuf:"bytes,80,opt,name=min_execution_speed_bytes,json=minExecutionSpeedBytes,proto3" json:"min_execution_speed_bytes,omitempty"`
	// Aggregate function to use for implementation of count(DISTINCT ...).
	CountDistinctImplementation *Settings_CountDistinctImplementationSetting `protobuf:"bytes,81,opt,name=count_distinct_implementation,json=countDistinctImplementation,proto3" json:"count_distinct_implementation,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#max-rows-in-distinct).
	MaxRowsInSet *Settings_Int64Setting `protobuf:"bytes,82,opt,name=max_rows_in_set,json=maxRowsInSet,proto3" json:"max_rows_in_set,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#max-bytes-in-set).
	MaxBytesInSet *Settings_Int64Setting `protobuf:"bytes,83,opt,name=max_bytes_in_set,json=maxBytesInSet,proto3" json:"max_bytes_in_set,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#set-overflow-mode).
	SetOverflowMode *Settings_OverflowModeSetting `protobuf:"bytes,84,opt,name=set_overflow_mode,json=setOverflowMode,proto3" json:"set_overflow_mode,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings-max_rows_in_join).
	MaxRowsInJoin *Settings_Int64Setting `protobuf:"bytes,85,opt,name=max_rows_in_join,json=maxRowsInJoin,proto3" json:"max_rows_in_join,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings-max_bytes_in_join).
	MaxBytesInJoin *Settings_Int64Setting `protobuf:"bytes,86,opt,name=max_bytes_in_join,json=maxBytesInJoin,proto3" json:"max_bytes_in_join,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings-join_overflow_mode).
	JoinOverflowMode *Settings_OverflowModeSetting `protobuf:"bytes,87,opt,name=join_overflow_mode,json=joinOverflowMode,proto3" json:"join_overflow_mode,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://github.com/ClickHouse/ClickHouse/blob/2442c71e273c041448bc5e0b5a406dedcd9e006c/src/Core/Settings.h#L339).
	JoinedSubqueryRequiresAlias *Settings_BoolSetting `protobuf:"bytes,88,opt,name=joined_subquery_requires_alias,json=joinedSubqueryRequiresAlias,proto3" json:"joined_subquery_requires_alias,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#join_use_nulls).
	JoinUseNulls *Settings_BoolSetting `protobuf:"bytes,89,opt,name=join_use_nulls,json=joinUseNulls,proto3" json:"join_use_nulls,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#transform_null_in).
	TransformNullIn *Settings_BoolSetting `protobuf:"bytes,90,opt,name=transform_null_in,json=transformNullIn,proto3" json:"transform_null_in,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#allow_introspection_functions).
	AllowIntrospectionFunctions *Settings_BoolSetting `protobuf:"bytes,91,opt,name=allow_introspection_functions,json=allowIntrospectionFunctions,proto3" json:"allow_introspection_functions,omitempty"`
	// Connection timeout with failover in milliseconds.
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#connect-timeout-with-failover-ms).
	ConnectTimeoutWithFailover *Settings_Int64Setting `protobuf:"bytes,92,opt,name=connect_timeout_with_failover,json=connectTimeoutWithFailover,proto3" json:"connect_timeout_with_failover,omitempty"`
	// Check that the speed is not too low after the specified time has elapsed.
	TimeoutBeforeCheckingExecutionSpeed *Settings_Int64Setting `protobuf:"bytes,93,opt,name=timeout_before_checking_execution_speed,json=timeoutBeforeCheckingExecutionSpeed,proto3" json:"timeout_before_checking_execution_speed,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#insert_quorum_parallel).
	InsertQuorumParallel *Settings_BoolSetting `protobuf:"bytes,94,opt,name=insert_quorum_parallel,json=insertQuorumParallel,proto3" json:"insert_quorum_parallel,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#insert_null_as_default).
	InsertNullAsDefault *Settings_BoolSetting `protobuf:"bytes,95,opt,name=insert_null_as_default,json=insertNullAsDefault,proto3" json:"insert_null_as_default,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#deduplicate-blocks-in-dependent-materialized-views).
	DeduplicateBlocksInDependentMaterializedViews *Settings_BoolSetting `protobuf:"bytes,96,opt,name=deduplicate_blocks_in_dependent_materialized_views,json=deduplicateBlocksInDependentMaterializedViews,proto3" json:"deduplicate_blocks_in_dependent_materialized_views,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/ru/operations/settings/query-complexity#max-partitions-per-insert-block).
	MaxPartitionsPerInsertBlock *Settings_Int64Setting `protobuf:"bytes,97,opt,name=max_partitions_per_insert_block,json=maxPartitionsPerInsertBlock,proto3" json:"max_partitions_per_insert_block,omitempty"`
	// The maximum number of concurrent requests per user.
	MaxConcurrentQueriesForUser *Settings_Int64Setting `protobuf:"bytes,98,opt,name=max_concurrent_queries_for_user,json=maxConcurrentQueriesForUser,proto3" json:"max_concurrent_queries_for_user,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#join_algorithm).
	JoinAlgorithm *Settings_JoinAlgorithmSetting `protobuf:"bytes,99,opt,name=join_algorithm,json=joinAlgorithm,proto3" json:"join_algorithm,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#any_join_distinct_right_table_keys).
	AnyJoinDistinctRightTableKeys *Settings_BoolSetting `protobuf:"bytes,100,opt,name=any_join_distinct_right_table_keys,json=anyJoinDistinctRightTableKeys,proto3" json:"any_join_distinct_right_table_keys,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#input_format_null_as_default).
	InputFormatNullAsDefault *Settings_BoolSetting `protobuf:"bytes,101,opt,name=input_format_null_as_default,json=inputFormatNullAsDefault,proto3" json:"input_format_null_as_default,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#date_time_input_format).
	DateTimeInputFormat *Settings_DateTimeInputFormatSetting `protobuf:"bytes,102,opt,name=date_time_input_format,json=dateTimeInputFormat,proto3" json:"date_time_input_format,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#input_format_with_names_use_header).
	InputFormatWithNamesUseHeader *Settings_BoolSetting `protobuf:"bytes,103,opt,name=input_format_with_names_use_header,json=inputFormatWithNamesUseHeader,proto3" json:"input_format_with_names_use_header,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#date_time_output_format).
	DateTimeOutputFormat *Settings_DateTimeOutputFormatSetting `protobuf:"bytes,104,opt,name=date_time_output_format,json=dateTimeOutputFormat,proto3" json:"date_time_output_format,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#allow_suspicious_low_cardinality_types).
	AllowSuspiciousLowCardinalityTypes *Settings_BoolSetting `protobuf:"bytes,105,opt,name=allow_suspicious_low_cardinality_types,json=allowSuspiciousLowCardinalityTypes,proto3" json:"allow_suspicious_low_cardinality_types,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#cancel-http-readonly-queries-on-client-close).
	CancelHttpReadonlyQueriesOnClientClose *Settings_BoolSetting `protobuf:"bytes,106,opt,name=cancel_http_readonly_queries_on_client_close,json=cancelHttpReadonlyQueriesOnClientClose,proto3" json:"cancel_http_readonly_queries_on_client_close,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#setting-max_http_get_redirects).
	MaxHttpGetRedirects *Settings_Int64Setting `protobuf:"bytes,107,opt,name=max_http_get_redirects,json=maxHttpGetRedirects,proto3" json:"max_http_get_redirects,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#flatten-nested).
	FlattenNested *Settings_BoolSetting `protobuf:"bytes,108,opt,name=flatten_nested,json=flattenNested,proto3" json:"flatten_nested,omitempty"`
	// Regular expression (for Regexp format)
	FormatRegexp *Settings_StringSetting `protobuf:"bytes,109,opt,name=format_regexp,json=formatRegexp,proto3" json:"format_regexp,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#format_regexp_escaping_rule).
	FormatRegexpEscapingRule *Settings_FormatRegexpEscapingRuleSetting `protobuf:"bytes,110,opt,name=format_regexp_escaping_rule,json=formatRegexpEscapingRule,proto3" json:"format_regexp_escaping_rule,omitempty"`
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#format_regexp_skip_unmatched).
	FormatRegexpSkipUnmatched *Settings_BoolSetting `protobuf:"bytes,111,opt,name=format_regexp_skip_unmatched,json=formatRegexpSkipUnmatched,proto3" json:"format_regexp_skip_unmatched,omitempty"`
	// // See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#async-insert).
	AsyncInsert *Settings_BoolSetting `protobuf:"bytes,112,opt,name=async_insert,json=asyncInsert,proto3" json:"async_insert,omitempty"`
	// // See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#async-insert-threads).
	AsyncInsertThreads *Settings_Int64Setting `protobuf:"bytes,113,opt,name=async_insert_threads,json=asyncInsertThreads,proto3" json:"async_insert_threads,omitempty"`
	// // See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#wait-for-async-insert).
	WaitForAsyncInsert *Settings_BoolSetting `protobuf:"bytes,114,opt,name=wait_for_async_insert,json=waitForAsyncInsert,proto3" json:"wait_for_async_insert,omitempty"`
	// // See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#wait-for-async-insert-timeout).
	WaitForAsyncInsertTimeout *Settings_Int64Setting `protobuf:"bytes,115,opt,name=wait_for_async_insert_timeout,json=waitForAsyncInsertTimeout,proto3" json:"wait_for_async_insert_timeout,omitempty"`
	// // See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#async-insert-max-data-size).
	AsyncInsertMaxDataSize *Settings_Int64Setting `protobuf:"bytes,116,opt,name=async_insert_max_data_size,json=asyncInsertMaxDataSize,proto3" json:"async_insert_max_data_size,omitempty"`
	// // See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#async-insert-busy-timeout-ms).
	AsyncInsertBusyTimeout *Settings_Int64Setting `protobuf:"bytes,117,opt,name=async_insert_busy_timeout,json=asyncInsertBusyTimeout,proto3" json:"async_insert_busy_timeout,omitempty"`
	// // See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#async-insert-stale-timeout-ms).
	AsyncInsertStaleTimeout *Settings_Int64Setting `protobuf:"bytes,118,opt,name=async_insert_stale_timeout,json=asyncInsertStaleTimeout,proto3" json:"async_insert_stale_timeout,omitempty"`
	// Whenever query memory usage becomes larger than every next step in number of
	// bytes the memory profiler will collect the allocating stack trace. Zero means
	// disabled memory profiler.
	MemoryProfilerStep *Settings_Int64Setting `protobuf:"bytes,119,opt,name=memory_profiler_step,json=memoryProfilerStep,proto3" json:"memory_profiler_step,omitempty"`
	// Collect random allocations and deallocations and write them into
	// system.trace_log with 'MemorySample' trace_type. The probability is for every
	// alloc/free regardless to the size of the allocation.
	MemoryProfilerSampleProbability *Settings_DoubleSetting `protobuf:"bytes,120,opt,name=memory_profiler_sample_probability,json=memoryProfilerSampleProbability,proto3" json:"memory_profiler_sample_probability,omitempty"`
	// Sets the maximum number of parallel threads for the SELECT query data read phase
	// with the FINAL modifier.
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#max-final-threads).
	MaxFinalThreads *Settings_Int64Setting `protobuf:"bytes,121,opt,name=max_final_threads,json=maxFinalThreads,proto3" json:"max_final_threads,omitempty"`
	// Enables or disables order-preserving parallel parsing of data formats. Supported
	// only for [TSV](https://clickhouse.com/docs/en/interfaces/formats#tabseparated),
	// [TKSV](https://clickhouse.com/docs/en/interfaces/formats#tskv),
	// [CSV](https://clickhouse.com/docs/en/interfaces/formats#csv) and
	// [JSONEachRow](https://clickhouse.com/docs/en/interfaces/formats#jsoneachrow)
	// formats.
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
	InputFormatParallelParsing *Settings_BoolSetting `protobuf:"bytes,122,opt,name=input_format_parallel_parsing,json=inputFormatParallelParsing,proto3" json:"input_format_parallel_parsing,omitempty"`
	// Enables or disables the insertion of JSON data with nested objects.
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
	InputFormatImportNestedJson *Settings_BoolSetting `protobuf:"bytes,123,opt,name=input_format_import_nested_json,json=inputFormatImportNestedJson,proto3" json:"input_format_import_nested_json,omitempty"`
	// Method of reading data from local filesystem, one of: read, pread, mmap,
	// io_uring, pread_threadpool. The 'io_uring' method is experimental and does not
	// work for Log, TinyLog, StripeLog, File, Set and Join, and other tables with
	// append-able files in presence of concurrent reads and writes.
	LocalFilesystemReadMethod *Settings_LocalFilesystemReadMethodSetting `protobuf:"bytes,124,opt,name=local_filesystem_read_method,json=localFilesystemReadMethod,proto3" json:"local_filesystem_read_method,omitempty"`
	// The maximum size of the buffer to read from the filesystem.
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/codebrowser/ClickHouse/src/Core/Settings.h.html#DB::SettingsTraits::Data::max_read_buffer_size)
	MaxReadBufferSize *Settings_Int64Setting `protobuf:"bytes,125,opt,name=max_read_buffer_size,json=maxReadBufferSize,proto3" json:"max_read_buffer_size,omitempty"`
	// The setting sets the maximum number of retries for ClickHouse Keeper (or
	// ZooKeeper) requests during insert into replicated MergeTree. Only Keeper
	// requests which failed due to network error, Keeper session timeout, or request
	// timeout are considered for retries.
	// Default: 20 from 23.2, 0(disabled) before
	// Min_version: 22.11
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#insert_keeper_max_retries)
	InsertKeeperMaxRetries *Settings_Int64Setting `protobuf:"bytes,126,opt,name=insert_keeper_max_retries,json=insertKeeperMaxRetries,proto3" json:"insert_keeper_max_retries,omitempty"`
	// The maximum amount of data consumed by temporary files on disk in bytes for all
	// concurrently running user queries. Zero means unlimited.
	// Default: 0 - unlimited
	// Min_version: 22.10
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_user)
	MaxTemporaryDataOnDiskSizeForUser *Settings_Int64Setting `protobuf:"bytes,127,opt,name=max_temporary_data_on_disk_size_for_user,json=maxTemporaryDataOnDiskSizeForUser,proto3" json:"max_temporary_data_on_disk_size_for_user,omitempty"`
	// The maximum amount of data consumed by temporary files on disk in bytes for all
	// concurrently running queries. Zero means unlimited.
	// Default: 0 - unlimited
	// Min_version: 22.10
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_query)
	MaxTemporaryDataOnDiskSizeForQuery *Settings_Int64Setting `protobuf:"bytes,128,opt,name=max_temporary_data_on_disk_size_for_query,json=maxTemporaryDataOnDiskSizeForQuery,proto3" json:"max_temporary_data_on_disk_size_for_query,omitempty"`
	// Limits maximum recursion depth in the recursive descent parser. Allows
	// controlling the stack size.
	// Default: 1000
	// Min_version: 20.4
	// Special: 0 - unlimited
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_parser_depth)
	MaxParserDepth *Settings_Int64Setting `protobuf:"bytes,129,opt,name=max_parser_depth,json=maxParserDepth,proto3" json:"max_parser_depth,omitempty"`
	// Method of reading data from remote filesystem, one of: read, threadpool.
	// Default: read
	// Min_version: 21.11
	// See in-depth description in [ClickHouse
	// GitHub](https://github.com/ClickHouse/ClickHouse/blob/f9558345e886876b9132d9c018e357f7fa9b22a3/src/Core/Settings.h#L660)
	RemoteFilesystemReadMethod *Settings_RemoteFilesystemReadMethodSetting `protobuf:"bytes,130,opt,name=remote_filesystem_read_method,json=remoteFilesystemReadMethod,proto3" json:"remote_filesystem_read_method,omitempty"`
	// It represents soft memory limit in case when hard limit is reached on user
	// level. This value is used to compute overcommit ratio for the query. Zero means
	// skip the query.
	// Default: 1GiB
	// Min_version: 22.5
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator)
	MemoryOvercommitRatioDenominator *Settings_Int64Setting `protobuf:"bytes,131,opt,name=memory_overcommit_ratio_denominator,json=memoryOvercommitRatioDenominator,proto3" json:"memory_overcommit_ratio_denominator,omitempty"`
	// It represents soft memory limit in case when hard limit is reached on global
	// level. This value is used to compute overcommit ratio for the query. Zero means
	// skip the query.
	// Default: 1GiB
	// Min_version: 22.5
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator_for_user)
	MemoryOvercommitRatioDenominatorForUser *Settings_Int64Setting `protobuf:"bytes,132,opt,name=memory_overcommit_ratio_denominator_for_user,json=memoryOvercommitRatioDenominatorForUser,proto3" json:"memory_overcommit_ratio_denominator_for_user,omitempty"`
	// Maximum time thread will wait for memory to be freed in the case of memory
	// overcommit on a user level. If the timeout is reached and memory is not freed,
	// an exception is thrown.
	// Default: 5000000
	// Min_version: 22.5
	// See in-depth description in [ClickHouse
	// documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_usage_overcommit_max_wait_microseconds)
	MemoryUsageOvercommitMaxWaitMicroseconds *Settings_Int64Setting `protobuf:"bytes,133,opt,name=memory_usage_overcommit_max_wait_microseconds,json=memoryUsageOvercommitMaxWaitMicroseconds,proto3" json:"memory_usage_overcommit_max_wait_microseconds,omitempty"`
}

func (x *Settings) Reset() {
	*x = Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings) ProtoMessage() {}

func (x *Settings) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings.ProtoReflect.Descriptor instead.
func (*Settings) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{9}
}

func (x *Settings) GetReadonly() *Settings_Int64Setting {
	if x != nil {
		return x.Readonly
	}
	return nil
}

func (x *Settings) GetAllowDdl() *Settings_BoolSetting {
	if x != nil {
		return x.AllowDdl
	}
	return nil
}

func (x *Settings) GetInsertQuorum() *Settings_Int64Setting {
	if x != nil {
		return x.InsertQuorum
	}
	return nil
}

func (x *Settings) GetInsertQuorumTimeout() *Settings_Int64Setting {
	if x != nil {
		return x.InsertQuorumTimeout
	}
	return nil
}

func (x *Settings) GetSelectSequentialConsistency() *Settings_BoolSetting {
	if x != nil {
		return x.SelectSequentialConsistency
	}
	return nil
}

func (x *Settings) GetMaxReplicaDelayForDistributedQueries() *Settings_Int64Setting {
	if x != nil {
		return x.MaxReplicaDelayForDistributedQueries
	}
	return nil
}

func (x *Settings) GetFallbackToStaleReplicasForDistributedQueries() *Settings_BoolSetting {
	if x != nil {
		return x.FallbackToStaleReplicasForDistributedQueries
	}
	return nil
}

func (x *Settings) GetMaxThreads() *Settings_Int64Setting {
	if x != nil {
		return x.MaxThreads
	}
	return nil
}

func (x *Settings) GetMaxBlockSize() *Settings_Int64Setting {
	if x != nil {
		return x.MaxBlockSize
	}
	return nil
}

func (x *Settings) GetMaxInsertBlockSize() *Settings_Int64Setting {
	if x != nil {
		return x.MaxInsertBlockSize
	}
	return nil
}

func (x *Settings) GetMaxMemoryUsage() *Settings_Int64Setting {
	if x != nil {
		return x.MaxMemoryUsage
	}
	return nil
}

func (x *Settings) GetMaxMemoryUsageForUser() *Settings_Int64Setting {
	if x != nil {
		return x.MaxMemoryUsageForUser
	}
	return nil
}

func (x *Settings) GetMaxRowsToRead() *Settings_Int64Setting {
	if x != nil {
		return x.MaxRowsToRead
	}
	return nil
}

func (x *Settings) GetMaxBytesToRead() *Settings_Int64Setting {
	if x != nil {
		return x.MaxBytesToRead
	}
	return nil
}

func (x *Settings) GetReadOverflowMode() *Settings_OverflowModeSetting {
	if x != nil {
		return x.ReadOverflowMode
	}
	return nil
}

func (x *Settings) GetMaxRowsToGroupBy() *Settings_Int64Setting {
	if x != nil {
		return x.MaxRowsToGroupBy
	}
	return nil
}

func (x *Settings) GetGroupByOverflowMode() *Settings_GroupByOverflowModeSetting {
	if x != nil {
		return x.GroupByOverflowMode
	}
	return nil
}

func (x *Settings) GetMaxRowsToSort() *Settings_Int64Setting {
	if x != nil {
		return x.MaxRowsToSort
	}
	return nil
}

func (x *Settings) GetMaxBytesToSort() *Settings_Int64Setting {
	if x != nil {
		return x.MaxBytesToSort
	}
	return nil
}

func (x *Settings) GetSortOverflowMode() *Settings_OverflowModeSetting {
	if x != nil {
		return x.SortOverflowMode
	}
	return nil
}

func (x *Settings) GetMaxResultRows() *Settings_Int64Setting {
	if x != nil {
		return x.MaxResultRows
	}
	return nil
}

func (x *Settings) GetMaxResultBytes() *Settings_Int64Setting {
	if x != nil {
		return x.MaxResultBytes
	}
	return nil
}

func (x *Settings) GetResultOverflowMode() *Settings_OverflowModeSetting {
	if x != nil {
		return x.ResultOverflowMode
	}
	return nil
}

func (x *Settings) GetMaxRowsInDistinct() *Settings_Int64Setting {
	if x != nil {
		return x.MaxRowsInDistinct
	}
	return nil
}

func (x *Settings) GetMaxBytesInDistinct() *Settings_Int64Setting {
	if x != nil {
		return x.MaxBytesInDistinct
	}
	return nil
}

func (x *Settings) GetDistinctOverflowMode() *Settings_OverflowModeSetting {
	if x != nil {
		return x.DistinctOverflowMode
	}
	return nil
}

func (x *Settings) GetMaxRowsToTransfer() *Settings_Int64Setting {
	if x != nil {
		return x.MaxRowsToTransfer
	}
	return nil
}

func (x *Settings) GetMaxBytesToTransfer() *Settings_Int64Setting {
	if x != nil {
		return x.MaxBytesToTransfer
	}
	return nil
}

func (x *Settings) GetTransferOverflowMode() *Settings_OverflowModeSetting {
	if x != nil {
		return x.TransferOverflowMode
	}
	return nil
}

func (x *Settings) GetMaxExecutionTime() *Settings_Int64Setting {
	if x != nil {
		return x.MaxExecutionTime
	}
	return nil
}

func (x *Settings) GetTimeoutOverflowMode() *Settings_OverflowModeSetting {
	if x != nil {
		return x.TimeoutOverflowMode
	}
	return nil
}

func (x *Settings) GetMaxColumnsToRead() *Settings_Int64Setting {
	if x != nil {
		return x.MaxColumnsToRead
	}
	return nil
}

func (x *Settings) GetMaxTemporaryColumns() *Settings_Int64Setting {
	if x != nil {
		return x.MaxTemporaryColumns
	}
	return nil
}

func (x *Settings) GetMaxTemporaryNonConstColumns() *Settings_Int64Setting {
	if x != nil {
		return x.MaxTemporaryNonConstColumns
	}
	return nil
}

func (x *Settings) GetMaxQuerySize() *Settings_Int64Setting {
	if x != nil {
		return x.MaxQuerySize
	}
	return nil
}

func (x *Settings) GetMaxAstDepth() *Settings_Int64Setting {
	if x != nil {
		return x.MaxAstDepth
	}
	return nil
}

func (x *Settings) GetMaxAstElements() *Settings_Int64Setting {
	if x != nil {
		return x.MaxAstElements
	}
	return nil
}

func (x *Settings) GetMaxExpandedAstElements() *Settings_Int64Setting {
	if x != nil {
		return x.MaxExpandedAstElements
	}
	return nil
}

func (x *Settings) GetConnectTimeout() *Settings_Int64Setting {
	if x != nil {
		return x.ConnectTimeout
	}
	return nil
}

func (x *Settings) GetReceiveTimeout() *Settings_Int64Setting {
	if x != nil {
		return x.ReceiveTimeout
	}
	return nil
}

func (x *Settings) GetSendTimeout() *Settings_Int64Setting {
	if x != nil {
		return x.SendTimeout
	}
	return nil
}

func (x *Settings) GetReplicationAlterPartitionsSync() *Settings_Int64Setting {
	if x != nil {
		return x.ReplicationAlterPartitionsSync
	}
	return nil
}

func (x *Settings) GetDistributedProductMode() *Settings_DistributedProductModeSetting {
	if x != nil {
		return x.DistributedProductMode
	}
	return nil
}

func (x *Settings) GetCompileExpressions() *Settings_BoolSetting {
	if x != nil {
		return x.CompileExpressions
	}
	return nil
}

func (x *Settings) GetMinCountToCompileExpression() *Settings_Int64Setting {
	if x != nil {
		return x.MinCountToCompileExpression
	}
	return nil
}

func (x *Settings) GetMinInsertBlockSizeRows() *Settings_Int64Setting {
	if x != nil {
		return x.MinInsertBlockSizeRows
	}
	return nil
}

func (x *Settings) GetMinInsertBlockSizeBytes() *Settings_Int64Setting {
	if x != nil {
		return x.MinInsertBlockSizeBytes
	}
	return nil
}

func (x *Settings) GetMinBytesToUseDirectIo() *Settings_Int64Setting {
	if x != nil {
		return x.MinBytesToUseDirectIo
	}
	return nil
}

func (x *Settings) GetUseUncompressedCache() *Settings_BoolSetting {
	if x != nil {
		return x.UseUncompressedCache
	}
	return nil
}

func (x *Settings) GetMergeTreeMaxRowsToUseCache() *Settings_Int64Setting {
	if x != nil {
		return x.MergeTreeMaxRowsToUseCache
	}
	return nil
}

func (x *Settings) GetMergeTreeMaxBytesToUseCache() *Settings_Int64Setting {
	if x != nil {
		return x.MergeTreeMaxBytesToUseCache
	}
	return nil
}

func (x *Settings) GetMergeTreeMinRowsForConcurrentRead() *Settings_Int64Setting {
	if x != nil {
		return x.MergeTreeMinRowsForConcurrentRead
	}
	return nil
}

func (x *Settings) GetMergeTreeMinBytesForConcurrentRead() *Settings_Int64Setting {
	if x != nil {
		return x.MergeTreeMinBytesForConcurrentRead
	}
	return nil
}

func (x *Settings) GetPriority() *Settings_Int64Setting {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *Settings) GetMaxNetworkBandwidth() *Settings_Int64Setting {
	if x != nil {
		return x.MaxNetworkBandwidth
	}
	return nil
}

func (x *Settings) GetMaxNetworkBandwidthForUser() *Settings_Int64Setting {
	if x != nil {
		return x.MaxNetworkBandwidthForUser
	}
	return nil
}

func (x *Settings) GetForceIndexByDate() *Settings_BoolSetting {
	if x != nil {
		return x.ForceIndexByDate
	}
	return nil
}

func (x *Settings) GetForcePrimaryKey() *Settings_BoolSetting {
	if x != nil {
		return x.ForcePrimaryKey
	}
	return nil
}

func (x *Settings) GetInputFormatValuesInterpretExpressions() *Settings_BoolSetting {
	if x != nil {
		return x.InputFormatValuesInterpretExpressions
	}
	return nil
}

func (x *Settings) GetInputFormatDefaultsForOmittedFields() *Settings_BoolSetting {
	if x != nil {
		return x.InputFormatDefaultsForOmittedFields
	}
	return nil
}

func (x *Settings) GetOutputFormatJsonQuote_64BitIntegers() *Settings_BoolSetting {
	if x != nil {
		return x.OutputFormatJsonQuote_64BitIntegers
	}
	return nil
}

func (x *Settings) GetOutputFormatJsonQuoteDenormals() *Settings_BoolSetting {
	if x != nil {
		return x.OutputFormatJsonQuoteDenormals
	}
	return nil
}

func (x *Settings) GetHttpConnectionTimeout() *Settings_Int64Setting {
	if x != nil {
		return x.HttpConnectionTimeout
	}
	return nil
}

func (x *Settings) GetHttpReceiveTimeout() *Settings_Int64Setting {
	if x != nil {
		return x.HttpReceiveTimeout
	}
	return nil
}

func (x *Settings) GetHttpSendTimeout() *Settings_Int64Setting {
	if x != nil {
		return x.HttpSendTimeout
	}
	return nil
}

func (x *Settings) GetEnableHttpCompression() *Settings_BoolSetting {
	if x != nil {
		return x.EnableHttpCompression
	}
	return nil
}

func (x *Settings) GetSendProgressInHttpHeaders() *Settings_BoolSetting {
	if x != nil {
		return x.SendProgressInHttpHeaders
	}
	return nil
}

func (x *Settings) GetHttpHeadersProgressInterval() *Settings_Int64Setting {
	if x != nil {
		return x.HttpHeadersProgressInterval
	}
	return nil
}

func (x *Settings) GetAddHttpCorsHeader() *Settings_BoolSetting {
	if x != nil {
		return x.AddHttpCorsHeader
	}
	return nil
}

func (x *Settings) GetDistributedAggregationMemoryEfficient() *Settings_BoolSetting {
	if x != nil {
		return x.DistributedAggregationMemoryEfficient
	}
	return nil
}

func (x *Settings) GetDistributedDdlTaskTimeout() *Settings_Int64Setting {
	if x != nil {
		return x.DistributedDdlTaskTimeout
	}
	return nil
}

func (x *Settings) GetMaxBytesBeforeExternalGroupBy() *Settings_Int64Setting {
	if x != nil {
		return x.MaxBytesBeforeExternalGroupBy
	}
	return nil
}

func (x *Settings) GetMaxBytesBeforeExternalSort() *Settings_Int64Setting {
	if x != nil {
		return x.MaxBytesBeforeExternalSort
	}
	return nil
}

func (x *Settings) GetGroupByTwoLevelThreshold() *Settings_Int64Setting {
	if x != nil {
		return x.GroupByTwoLevelThreshold
	}
	return nil
}

func (x *Settings) GetGroupByTwoLevelThresholdBytes() *Settings_Int64Setting {
	if x != nil {
		return x.GroupByTwoLevelThresholdBytes
	}
	return nil
}

func (x *Settings) GetLowCardinalityAllowInNativeFormat() *Settings_BoolSetting {
	if x != nil {
		return x.LowCardinalityAllowInNativeFormat
	}
	return nil
}

func (x *Settings) GetEmptyResultForAggregationByEmptySet() *Settings_BoolSetting {
	if x != nil {
		return x.EmptyResultForAggregationByEmptySet
	}
	return nil
}

func (x *Settings) GetSkipUnavailableShards() *Settings_BoolSetting {
	if x != nil {
		return x.SkipUnavailableShards
	}
	return nil
}

func (x *Settings) GetMinExecutionSpeed() *Settings_Int64Setting {
	if x != nil {
		return x.MinExecutionSpeed
	}
	return nil
}

func (x *Settings) GetMinExecutionSpeedBytes() *Settings_Int64Setting {
	if x != nil {
		return x.MinExecutionSpeedBytes
	}
	return nil
}

func (x *Settings) GetCountDistinctImplementation() *Settings_CountDistinctImplementationSetting {
	if x != nil {
		return x.CountDistinctImplementation
	}
	return nil
}

func (x *Settings) GetMaxRowsInSet() *Settings_Int64Setting {
	if x != nil {
		return x.MaxRowsInSet
	}
	return nil
}

func (x *Settings) GetMaxBytesInSet() *Settings_Int64Setting {
	if x != nil {
		return x.MaxBytesInSet
	}
	return nil
}

func (x *Settings) GetSetOverflowMode() *Settings_OverflowModeSetting {
	if x != nil {
		return x.SetOverflowMode
	}
	return nil
}

func (x *Settings) GetMaxRowsInJoin() *Settings_Int64Setting {
	if x != nil {
		return x.MaxRowsInJoin
	}
	return nil
}

func (x *Settings) GetMaxBytesInJoin() *Settings_Int64Setting {
	if x != nil {
		return x.MaxBytesInJoin
	}
	return nil
}

func (x *Settings) GetJoinOverflowMode() *Settings_OverflowModeSetting {
	if x != nil {
		return x.JoinOverflowMode
	}
	return nil
}

func (x *Settings) GetJoinedSubqueryRequiresAlias() *Settings_BoolSetting {
	if x != nil {
		return x.JoinedSubqueryRequiresAlias
	}
	return nil
}

func (x *Settings) GetJoinUseNulls() *Settings_BoolSetting {
	if x != nil {
		return x.JoinUseNulls
	}
	return nil
}

func (x *Settings) GetTransformNullIn() *Settings_BoolSetting {
	if x != nil {
		return x.TransformNullIn
	}
	return nil
}

func (x *Settings) GetAllowIntrospectionFunctions() *Settings_BoolSetting {
	if x != nil {
		return x.AllowIntrospectionFunctions
	}
	return nil
}

func (x *Settings) GetConnectTimeoutWithFailover() *Settings_Int64Setting {
	if x != nil {
		return x.ConnectTimeoutWithFailover
	}
	return nil
}

func (x *Settings) GetTimeoutBeforeCheckingExecutionSpeed() *Settings_Int64Setting {
	if x != nil {
		return x.TimeoutBeforeCheckingExecutionSpeed
	}
	return nil
}

func (x *Settings) GetInsertQuorumParallel() *Settings_BoolSetting {
	if x != nil {
		return x.InsertQuorumParallel
	}
	return nil
}

func (x *Settings) GetInsertNullAsDefault() *Settings_BoolSetting {
	if x != nil {
		return x.InsertNullAsDefault
	}
	return nil
}

func (x *Settings) GetDeduplicateBlocksInDependentMaterializedViews() *Settings_BoolSetting {
	if x != nil {
		return x.DeduplicateBlocksInDependentMaterializedViews
	}
	return nil
}

func (x *Settings) GetMaxPartitionsPerInsertBlock() *Settings_Int64Setting {
	if x != nil {
		return x.MaxPartitionsPerInsertBlock
	}
	return nil
}

func (x *Settings) GetMaxConcurrentQueriesForUser() *Settings_Int64Setting {
	if x != nil {
		return x.MaxConcurrentQueriesForUser
	}
	return nil
}

func (x *Settings) GetJoinAlgorithm() *Settings_JoinAlgorithmSetting {
	if x != nil {
		return x.JoinAlgorithm
	}
	return nil
}

func (x *Settings) GetAnyJoinDistinctRightTableKeys() *Settings_BoolSetting {
	if x != nil {
		return x.AnyJoinDistinctRightTableKeys
	}
	return nil
}

func (x *Settings) GetInputFormatNullAsDefault() *Settings_BoolSetting {
	if x != nil {
		return x.InputFormatNullAsDefault
	}
	return nil
}

func (x *Settings) GetDateTimeInputFormat() *Settings_DateTimeInputFormatSetting {
	if x != nil {
		return x.DateTimeInputFormat
	}
	return nil
}

func (x *Settings) GetInputFormatWithNamesUseHeader() *Settings_BoolSetting {
	if x != nil {
		return x.InputFormatWithNamesUseHeader
	}
	return nil
}

func (x *Settings) GetDateTimeOutputFormat() *Settings_DateTimeOutputFormatSetting {
	if x != nil {
		return x.DateTimeOutputFormat
	}
	return nil
}

func (x *Settings) GetAllowSuspiciousLowCardinalityTypes() *Settings_BoolSetting {
	if x != nil {
		return x.AllowSuspiciousLowCardinalityTypes
	}
	return nil
}

func (x *Settings) GetCancelHttpReadonlyQueriesOnClientClose() *Settings_BoolSetting {
	if x != nil {
		return x.CancelHttpReadonlyQueriesOnClientClose
	}
	return nil
}

func (x *Settings) GetMaxHttpGetRedirects() *Settings_Int64Setting {
	if x != nil {
		return x.MaxHttpGetRedirects
	}
	return nil
}

func (x *Settings) GetFlattenNested() *Settings_BoolSetting {
	if x != nil {
		return x.FlattenNested
	}
	return nil
}

func (x *Settings) GetFormatRegexp() *Settings_StringSetting {
	if x != nil {
		return x.FormatRegexp
	}
	return nil
}

func (x *Settings) GetFormatRegexpEscapingRule() *Settings_FormatRegexpEscapingRuleSetting {
	if x != nil {
		return x.FormatRegexpEscapingRule
	}
	return nil
}

func (x *Settings) GetFormatRegexpSkipUnmatched() *Settings_BoolSetting {
	if x != nil {
		return x.FormatRegexpSkipUnmatched
	}
	return nil
}

func (x *Settings) GetAsyncInsert() *Settings_BoolSetting {
	if x != nil {
		return x.AsyncInsert
	}
	return nil
}

func (x *Settings) GetAsyncInsertThreads() *Settings_Int64Setting {
	if x != nil {
		return x.AsyncInsertThreads
	}
	return nil
}

func (x *Settings) GetWaitForAsyncInsert() *Settings_BoolSetting {
	if x != nil {
		return x.WaitForAsyncInsert
	}
	return nil
}

func (x *Settings) GetWaitForAsyncInsertTimeout() *Settings_Int64Setting {
	if x != nil {
		return x.WaitForAsyncInsertTimeout
	}
	return nil
}

func (x *Settings) GetAsyncInsertMaxDataSize() *Settings_Int64Setting {
	if x != nil {
		return x.AsyncInsertMaxDataSize
	}
	return nil
}

func (x *Settings) GetAsyncInsertBusyTimeout() *Settings_Int64Setting {
	if x != nil {
		return x.AsyncInsertBusyTimeout
	}
	return nil
}

func (x *Settings) GetAsyncInsertStaleTimeout() *Settings_Int64Setting {
	if x != nil {
		return x.AsyncInsertStaleTimeout
	}
	return nil
}

func (x *Settings) GetMemoryProfilerStep() *Settings_Int64Setting {
	if x != nil {
		return x.MemoryProfilerStep
	}
	return nil
}

func (x *Settings) GetMemoryProfilerSampleProbability() *Settings_DoubleSetting {
	if x != nil {
		return x.MemoryProfilerSampleProbability
	}
	return nil
}

func (x *Settings) GetMaxFinalThreads() *Settings_Int64Setting {
	if x != nil {
		return x.MaxFinalThreads
	}
	return nil
}

func (x *Settings) GetInputFormatParallelParsing() *Settings_BoolSetting {
	if x != nil {
		return x.InputFormatParallelParsing
	}
	return nil
}

func (x *Settings) GetInputFormatImportNestedJson() *Settings_BoolSetting {
	if x != nil {
		return x.InputFormatImportNestedJson
	}
	return nil
}

func (x *Settings) GetLocalFilesystemReadMethod() *Settings_LocalFilesystemReadMethodSetting {
	if x != nil {
		return x.LocalFilesystemReadMethod
	}
	return nil
}

func (x *Settings) GetMaxReadBufferSize() *Settings_Int64Setting {
	if x != nil {
		return x.MaxReadBufferSize
	}
	return nil
}

func (x *Settings) GetInsertKeeperMaxRetries() *Settings_Int64Setting {
	if x != nil {
		return x.InsertKeeperMaxRetries
	}
	return nil
}

func (x *Settings) GetMaxTemporaryDataOnDiskSizeForUser() *Settings_Int64Setting {
	if x != nil {
		return x.MaxTemporaryDataOnDiskSizeForUser
	}
	return nil
}

func (x *Settings) GetMaxTemporaryDataOnDiskSizeForQuery() *Settings_Int64Setting {
	if x != nil {
		return x.MaxTemporaryDataOnDiskSizeForQuery
	}
	return nil
}

func (x *Settings) GetMaxParserDepth() *Settings_Int64Setting {
	if x != nil {
		return x.MaxParserDepth
	}
	return nil
}

func (x *Settings) GetRemoteFilesystemReadMethod() *Settings_RemoteFilesystemReadMethodSetting {
	if x != nil {
		return x.RemoteFilesystemReadMethod
	}
	return nil
}

func (x *Settings) GetMemoryOvercommitRatioDenominator() *Settings_Int64Setting {
	if x != nil {
		return x.MemoryOvercommitRatioDenominator
	}
	return nil
}

func (x *Settings) GetMemoryOvercommitRatioDenominatorForUser() *Settings_Int64Setting {
	if x != nil {
		return x.MemoryOvercommitRatioDenominatorForUser
	}
	return nil
}

func (x *Settings) GetMemoryUsageOvercommitMaxWaitMicroseconds() *Settings_Int64Setting {
	if x != nil {
		return x.MemoryUsageOvercommitMaxWaitMicroseconds
	}
	return nil
}

// Represents writability constraint value.
type Settings_WritabilityConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Writability value.
	Value Settings_Writability `protobuf:"varint,1,opt,name=value,proto3,enum=doublecloud.clickhouse.v1.Settings_Writability" json:"value,omitempty"`
}

func (x *Settings_WritabilityConstraint) Reset() {
	*x = Settings_WritabilityConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings_WritabilityConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_WritabilityConstraint) ProtoMessage() {}

func (x *Settings_WritabilityConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_WritabilityConstraint.ProtoReflect.Descriptor instead.
func (*Settings_WritabilityConstraint) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{9, 0}
}

func (x *Settings_WritabilityConstraint) GetValue() Settings_Writability {
	if x != nil {
		return x.Value
	}
	return Settings_WRITABILITY_INVALID
}

// Represents `int64` setting and its constraints.
type Settings_Int64Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Setting value.
	Value *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Min constraint specifies lower boundary for a numeric setting.
	Min *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=min,proto3" json:"min,omitempty"`
	// Max constraint specifies upper boundary for a numeric setting.
	Max *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=max,proto3" json:"max,omitempty"`
	// Writability constraint specifies how the user can change this setting.
	Writability *Settings_WritabilityConstraint `protobuf:"bytes,4,opt,name=writability,proto3" json:"writability,omitempty"`
}

func (x *Settings_Int64Setting) Reset() {
	*x = Settings_Int64Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings_Int64Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_Int64Setting) ProtoMessage() {}

func (x *Settings_Int64Setting) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_Int64Setting.ProtoReflect.Descriptor instead.
func (*Settings_Int64Setting) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{9, 1}
}

func (x *Settings_Int64Setting) GetValue() *wrapperspb.Int64Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Settings_Int64Setting) GetMin() *wrapperspb.Int64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Settings_Int64Setting) GetMax() *wrapperspb.Int64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Settings_Int64Setting) GetWritability() *Settings_WritabilityConstraint {
	if x != nil {
		return x.Writability
	}
	return nil
}

// Represents `double` setting and its constraints.
type Settings_DoubleSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Setting value.
	Value *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Min constraint specifies lower boundary for a numeric setting.
	Min *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=min,proto3" json:"min,omitempty"`
	// Max constraint specifies upper boundary for a numeric setting.
	Max *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=max,proto3" json:"max,omitempty"`
	// Writability constraint specifies how the user can change this setting.
	Writability *Settings_WritabilityConstraint `protobuf:"bytes,4,opt,name=writability,proto3" json:"writability,omitempty"`
}

func (x *Settings_DoubleSetting) Reset() {
	*x = Settings_DoubleSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings_DoubleSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_DoubleSetting) ProtoMessage() {}

func (x *Settings_DoubleSetting) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_DoubleSetting.ProtoReflect.Descriptor instead.
func (*Settings_DoubleSetting) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{9, 2}
}

func (x *Settings_DoubleSetting) GetValue() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Settings_DoubleSetting) GetMin() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Settings_DoubleSetting) GetMax() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Settings_DoubleSetting) GetWritability() *Settings_WritabilityConstraint {
	if x != nil {
		return x.Writability
	}
	return nil
}

// Represents `bool` setting and its constraints.
type Settings_BoolSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Setting value.
	Value *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Writability constraint specifies how the user can change this setting.
	Writability *Settings_WritabilityConstraint `protobuf:"bytes,2,opt,name=writability,proto3" json:"writability,omitempty"`
}

func (x *Settings_BoolSetting) Reset() {
	*x = Settings_BoolSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings_BoolSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_BoolSetting) ProtoMessage() {}

func (x *Settings_BoolSetting) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_BoolSetting.ProtoReflect.Descriptor instead.
func (*Settings_BoolSetting) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{9, 3}
}

func (x *Settings_BoolSetting) GetValue() *wrapperspb.BoolValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Settings_BoolSetting) GetWritability() *Settings_WritabilityConstraint {
	if x != nil {
		return x.Writability
	}
	return nil
}

// Represents `string` setting and its constraints.
type Settings_StringSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Setting value.
	Value *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Writability constraint specifies how the user can change this setting.
	Writability *Settings_WritabilityConstraint `protobuf:"bytes,2,opt,name=writability,proto3" json:"writability,omitempty"`
}

func (x *Settings_StringSetting) Reset() {
	*x = Settings_StringSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings_StringSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_StringSetting) ProtoMessage() {}

func (x *Settings_StringSetting) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_StringSetting.ProtoReflect.Descriptor instead.
func (*Settings_StringSetting) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{9, 4}
}

func (x *Settings_StringSetting) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Settings_StringSetting) GetWritability() *Settings_WritabilityConstraint {
	if x != nil {
		return x.Writability
	}
	return nil
}

// Represents `overflow_mode` setting and its constraints.
type Settings_OverflowModeSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Setting value.
	Value Settings_OverflowMode `protobuf:"varint,1,opt,name=value,proto3,enum=doublecloud.clickhouse.v1.Settings_OverflowMode" json:"value,omitempty"`
	// Writability constraint specifies how the user can change this setting.
	Writability *Settings_WritabilityConstraint `protobuf:"bytes,2,opt,name=writability,proto3" json:"writability,omitempty"`
}

func (x *Settings_OverflowModeSetting) Reset() {
	*x = Settings_OverflowModeSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings_OverflowModeSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_OverflowModeSetting) ProtoMessage() {}

func (x *Settings_OverflowModeSetting) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_OverflowModeSetting.ProtoReflect.Descriptor instead.
func (*Settings_OverflowModeSetting) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{9, 5}
}

func (x *Settings_OverflowModeSetting) GetValue() Settings_OverflowMode {
	if x != nil {
		return x.Value
	}
	return Settings_OVERFLOW_MODE_INVALID
}

func (x *Settings_OverflowModeSetting) GetWritability() *Settings_WritabilityConstraint {
	if x != nil {
		return x.Writability
	}
	return nil
}

// Represents `group_by_overflow_mode` setting and its constraints.
type Settings_GroupByOverflowModeSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Setting value.
	Value Settings_GroupByOverflowMode `protobuf:"varint,1,opt,name=value,proto3,enum=doublecloud.clickhouse.v1.Settings_GroupByOverflowMode" json:"value,omitempty"`
	// Writability constraint specifies how the user can change this setting.
	Writability *Settings_WritabilityConstraint `protobuf:"bytes,2,opt,name=writability,proto3" json:"writability,omitempty"`
}

func (x *Settings_GroupByOverflowModeSetting) Reset() {
	*x = Settings_GroupByOverflowModeSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings_GroupByOverflowModeSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_GroupByOverflowModeSetting) ProtoMessage() {}

func (x *Settings_GroupByOverflowModeSetting) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_GroupByOverflowModeSetting.ProtoReflect.Descriptor instead.
func (*Settings_GroupByOverflowModeSetting) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{9, 6}
}

func (x *Settings_GroupByOverflowModeSetting) GetValue() Settings_GroupByOverflowMode {
	if x != nil {
		return x.Value
	}
	return Settings_GROUP_BY_OVERFLOW_MODE_INVALID
}

func (x *Settings_GroupByOverflowModeSetting) GetWritability() *Settings_WritabilityConstraint {
	if x != nil {
		return x.Writability
	}
	return nil
}

// Represents `distributed_product_mode` setting and its constraints.
type Settings_DistributedProductModeSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Setting value.
	Value Settings_DistributedProductMode `protobuf:"varint,1,opt,name=value,proto3,enum=doublecloud.clickhouse.v1.Settings_DistributedProductMode" json:"value,omitempty"`
	// Writability constraint specifies how the user can change this setting.
	Writability *Settings_WritabilityConstraint `protobuf:"bytes,2,opt,name=writability,proto3" json:"writability,omitempty"`
}

func (x *Settings_DistributedProductModeSetting) Reset() {
	*x = Settings_DistributedProductModeSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings_DistributedProductModeSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_DistributedProductModeSetting) ProtoMessage() {}

func (x *Settings_DistributedProductModeSetting) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_DistributedProductModeSetting.ProtoReflect.Descriptor instead.
func (*Settings_DistributedProductModeSetting) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{9, 7}
}

func (x *Settings_DistributedProductModeSetting) GetValue() Settings_DistributedProductMode {
	if x != nil {
		return x.Value
	}
	return Settings_DISTRIBUTED_PRODUCT_MODE_INVALID
}

func (x *Settings_DistributedProductModeSetting) GetWritability() *Settings_WritabilityConstraint {
	if x != nil {
		return x.Writability
	}
	return nil
}

// Represents `count_distinct_implementation` setting and its constraints.
type Settings_CountDistinctImplementationSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Setting value.
	Value Settings_CountDistinctImplementation `protobuf:"varint,1,opt,name=value,proto3,enum=doublecloud.clickhouse.v1.Settings_CountDistinctImplementation" json:"value,omitempty"`
	// Writability constraint specifies how the user can change this setting.
	Writability *Settings_WritabilityConstraint `protobuf:"bytes,2,opt,name=writability,proto3" json:"writability,omitempty"`
}

func (x *Settings_CountDistinctImplementationSetting) Reset() {
	*x = Settings_CountDistinctImplementationSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings_CountDistinctImplementationSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_CountDistinctImplementationSetting) ProtoMessage() {}

func (x *Settings_CountDistinctImplementationSetting) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_CountDistinctImplementationSetting.ProtoReflect.Descriptor instead.
func (*Settings_CountDistinctImplementationSetting) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{9, 8}
}

func (x *Settings_CountDistinctImplementationSetting) GetValue() Settings_CountDistinctImplementation {
	if x != nil {
		return x.Value
	}
	return Settings_COUNT_DISTINCT_IMPLEMENTATION_INVALID
}

func (x *Settings_CountDistinctImplementationSetting) GetWritability() *Settings_WritabilityConstraint {
	if x != nil {
		return x.Writability
	}
	return nil
}

// Represents `join_algorithm` setting and its constraints.
type Settings_JoinAlgorithmSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Setting value.
	Value []Settings_JoinAlgorithm `protobuf:"varint,1,rep,packed,name=value,proto3,enum=doublecloud.clickhouse.v1.Settings_JoinAlgorithm" json:"value,omitempty"`
	// Writability constraint specifies how the user can change this setting.
	Writability *Settings_WritabilityConstraint `protobuf:"bytes,2,opt,name=writability,proto3" json:"writability,omitempty"`
}

func (x *Settings_JoinAlgorithmSetting) Reset() {
	*x = Settings_JoinAlgorithmSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings_JoinAlgorithmSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_JoinAlgorithmSetting) ProtoMessage() {}

func (x *Settings_JoinAlgorithmSetting) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_JoinAlgorithmSetting.ProtoReflect.Descriptor instead.
func (*Settings_JoinAlgorithmSetting) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{9, 9}
}

func (x *Settings_JoinAlgorithmSetting) GetValue() []Settings_JoinAlgorithm {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Settings_JoinAlgorithmSetting) GetWritability() *Settings_WritabilityConstraint {
	if x != nil {
		return x.Writability
	}
	return nil
}

// Represents `format_regexp_escaping_rule` setting and its constraints.
type Settings_FormatRegexpEscapingRuleSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Setting value.
	Value Settings_FormatRegexpEscapingRule `protobuf:"varint,1,opt,name=value,proto3,enum=doublecloud.clickhouse.v1.Settings_FormatRegexpEscapingRule" json:"value,omitempty"`
	// Writability constraint specifies how the user can change this setting.
	Writability *Settings_WritabilityConstraint `protobuf:"bytes,2,opt,name=writability,proto3" json:"writability,omitempty"`
}

func (x *Settings_FormatRegexpEscapingRuleSetting) Reset() {
	*x = Settings_FormatRegexpEscapingRuleSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings_FormatRegexpEscapingRuleSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_FormatRegexpEscapingRuleSetting) ProtoMessage() {}

func (x *Settings_FormatRegexpEscapingRuleSetting) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_FormatRegexpEscapingRuleSetting.ProtoReflect.Descriptor instead.
func (*Settings_FormatRegexpEscapingRuleSetting) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{9, 10}
}

func (x *Settings_FormatRegexpEscapingRuleSetting) GetValue() Settings_FormatRegexpEscapingRule {
	if x != nil {
		return x.Value
	}
	return Settings_FORMAT_REGEXP_ESCAPING_RULE_INVALID
}

func (x *Settings_FormatRegexpEscapingRuleSetting) GetWritability() *Settings_WritabilityConstraint {
	if x != nil {
		return x.Writability
	}
	return nil
}

// Represents `date_time_input_format` setting and its constraints.
type Settings_DateTimeInputFormatSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Setting value.
	Value Settings_DateTimeInputFormat `protobuf:"varint,1,opt,name=value,proto3,enum=doublecloud.clickhouse.v1.Settings_DateTimeInputFormat" json:"value,omitempty"`
	// Writability constraint specifies how the user can change this setting.
	Writability *Settings_WritabilityConstraint `protobuf:"bytes,2,opt,name=writability,proto3" json:"writability,omitempty"`
}

func (x *Settings_DateTimeInputFormatSetting) Reset() {
	*x = Settings_DateTimeInputFormatSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings_DateTimeInputFormatSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_DateTimeInputFormatSetting) ProtoMessage() {}

func (x *Settings_DateTimeInputFormatSetting) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_DateTimeInputFormatSetting.ProtoReflect.Descriptor instead.
func (*Settings_DateTimeInputFormatSetting) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{9, 11}
}

func (x *Settings_DateTimeInputFormatSetting) GetValue() Settings_DateTimeInputFormat {
	if x != nil {
		return x.Value
	}
	return Settings_DATE_TIME_INPUT_FORMAT_INVALID
}

func (x *Settings_DateTimeInputFormatSetting) GetWritability() *Settings_WritabilityConstraint {
	if x != nil {
		return x.Writability
	}
	return nil
}

// Represents `date_time_output_format` setting and its constraints.
type Settings_DateTimeOutputFormatSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Setting value.
	Value Settings_DateTimeOutputFormat `protobuf:"varint,1,opt,name=value,proto3,enum=doublecloud.clickhouse.v1.Settings_DateTimeOutputFormat" json:"value,omitempty"`
	// Writability constraint specifies how the user can change this setting.
	Writability *Settings_WritabilityConstraint `protobuf:"bytes,2,opt,name=writability,proto3" json:"writability,omitempty"`
}

func (x *Settings_DateTimeOutputFormatSetting) Reset() {
	*x = Settings_DateTimeOutputFormatSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings_DateTimeOutputFormatSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_DateTimeOutputFormatSetting) ProtoMessage() {}

func (x *Settings_DateTimeOutputFormatSetting) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_DateTimeOutputFormatSetting.ProtoReflect.Descriptor instead.
func (*Settings_DateTimeOutputFormatSetting) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{9, 12}
}

func (x *Settings_DateTimeOutputFormatSetting) GetValue() Settings_DateTimeOutputFormat {
	if x != nil {
		return x.Value
	}
	return Settings_DATE_TIME_OUTPUT_FORMAT_INVALID
}

func (x *Settings_DateTimeOutputFormatSetting) GetWritability() *Settings_WritabilityConstraint {
	if x != nil {
		return x.Writability
	}
	return nil
}

// Represents `local_filesystem_read_method` setting and its constraints.
type Settings_LocalFilesystemReadMethodSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Setting value.
	Value Settings_LocalFilesystemReadMethod `protobuf:"varint,1,opt,name=value,proto3,enum=doublecloud.clickhouse.v1.Settings_LocalFilesystemReadMethod" json:"value,omitempty"`
	// Writability constraint specifies how the user can change this setting.
	Writability *Settings_WritabilityConstraint `protobuf:"bytes,2,opt,name=writability,proto3" json:"writability,omitempty"`
}

func (x *Settings_LocalFilesystemReadMethodSetting) Reset() {
	*x = Settings_LocalFilesystemReadMethodSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings_LocalFilesystemReadMethodSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_LocalFilesystemReadMethodSetting) ProtoMessage() {}

func (x *Settings_LocalFilesystemReadMethodSetting) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_LocalFilesystemReadMethodSetting.ProtoReflect.Descriptor instead.
func (*Settings_LocalFilesystemReadMethodSetting) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{9, 13}
}

func (x *Settings_LocalFilesystemReadMethodSetting) GetValue() Settings_LocalFilesystemReadMethod {
	if x != nil {
		return x.Value
	}
	return Settings_LOCAL_FILESYSTEM_READ_METHOD_INVALID
}

func (x *Settings_LocalFilesystemReadMethodSetting) GetWritability() *Settings_WritabilityConstraint {
	if x != nil {
		return x.Writability
	}
	return nil
}

// Represents `remote_filesystem_read_method` setting and its constraints.
type Settings_RemoteFilesystemReadMethodSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Setting value.
	Value Settings_RemoteFilesystemReadMethod `protobuf:"varint,1,opt,name=value,proto3,enum=doublecloud.clickhouse.v1.Settings_RemoteFilesystemReadMethod" json:"value,omitempty"`
	// Writability constraint specifies how the user can change this setting.
	Writability *Settings_WritabilityConstraint `protobuf:"bytes,2,opt,name=writability,proto3" json:"writability,omitempty"`
}

func (x *Settings_RemoteFilesystemReadMethodSetting) Reset() {
	*x = Settings_RemoteFilesystemReadMethodSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings_RemoteFilesystemReadMethodSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_RemoteFilesystemReadMethodSetting) ProtoMessage() {}

func (x *Settings_RemoteFilesystemReadMethodSetting) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_user_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_RemoteFilesystemReadMethodSetting.ProtoReflect.Descriptor instead.
func (*Settings_RemoteFilesystemReadMethodSetting) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP(), []int{9, 14}
}

func (x *Settings_RemoteFilesystemReadMethodSetting) GetValue() Settings_RemoteFilesystemReadMethod {
	if x != nil {
		return x.Value
	}
	return Settings_REMOTE_FILESYSTEM_READ_METHOD_INVALID
}

func (x *Settings_RemoteFilesystemReadMethodSetting) GetWritability() *Settings_WritabilityConstraint {
	if x != nil {
		return x.Writability
	}
	return nil
}

var File_doublecloud_clickhouse_v1_user_proto protoreflect.FileDescriptor

var file_doublecloud_clickhouse_v1_user_proto_rawDesc = []byte{
	0x0a, 0x24, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xe9, 0x03, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4c, 0x0a,
	0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x0c, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x65, 0x73, 0x52, 0x08, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0a,
	0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0e,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x0d,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x89, 0x02,
	0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73,
	0x12, 0x3f, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x46, 0x0a, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x0a, 0x71,
	0x75, 0x6f, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xd4, 0x02, 0x0a, 0x0e, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x12, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x1b, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x27, 0x0a, 0x23, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x5f, 0x50,
	0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x49, 0x44, 0x45,
	0x4e, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x31, 0x5f, 0x50, 0x41, 0x53,
	0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x43, 0x52, 0x59, 0x50, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x03,
	0x22, 0x4c, 0x0a, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61,
	0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x22, 0x25,
	0x0a, 0x0d, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x48, 0x0a, 0x08, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x61, 0x6e, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x22,
	0x46, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52,
	0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x22, 0x0a, 0x0a, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xc9, 0x20, 0x0a, 0x05,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd6,
	0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x13, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42,
	0x41, 0x53, 0x45, 0x53, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x53, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x53, 0x10,
	0x03, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x44, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x52, 0x49,
	0x45, 0x53, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x53,
	0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54,
	0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x09,
	0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x0a, 0x12, 0x20,
	0x0a, 0x1c, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x10, 0x0b,
	0x12, 0x23, 0x0a, 0x1f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x43, 0x4f, 0x4c,
	0x55, 0x4d, 0x4e, 0x10, 0x0c, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f,
	0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x10, 0x0d, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x10, 0x0e, 0x12, 0x22,
	0x0a, 0x1e, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e,
	0x10, 0x0f, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43,
	0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x10, 0x10, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x54,
	0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x10,
	0x11, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x10, 0x12, 0x12,
	0x24, 0x0a, 0x20, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x13, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x42, 0x59, 0x10, 0x14, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c,
	0x45, 0x5f, 0x42, 0x59, 0x10, 0x15, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x5f,
	0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x16, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x17, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4d,
	0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58,
	0x10, 0x18, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x49, 0x4e,
	0x44, 0x45, 0x58, 0x10, 0x19, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58,
	0x10, 0x1a, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1b, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x52,
	0x4f, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1c, 0x12,
	0x2c, 0x0a, 0x28, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1d, 0x12, 0x26, 0x0a,
	0x22, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54,
	0x45, 0x52, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x1e, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1f, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44,
	0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x10, 0x20, 0x12, 0x25, 0x0a,
	0x21, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54,
	0x45, 0x52, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49,
	0x4e, 0x54, 0x10, 0x21, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52,
	0x41, 0x49, 0x4e, 0x54, 0x10, 0x22, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x54, 0x4c, 0x10,
	0x23, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x5f, 0x54, 0x54, 0x4c, 0x10, 0x24, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x45,
	0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x25, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x4f,
	0x56, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x26, 0x12, 0x25,
	0x0a, 0x21, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x27, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5a,
	0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x28, 0x12, 0x27, 0x0a,
	0x23, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54,
	0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54,
	0x49, 0x4e, 0x47, 0x53, 0x10, 0x29, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x2a, 0x12, 0x1b,
	0x0a, 0x17, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x2b, 0x12, 0x1e, 0x0a, 0x1a, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x10, 0x2c, 0x12, 0x22, 0x0a, 0x1e, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52,
	0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x10, 0x2d, 0x12,
	0x27, 0x0a, 0x23, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x2e, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x56, 0x49,
	0x45, 0x57, 0x10, 0x2f, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x30, 0x12, 0x1f, 0x0a, 0x1b, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x10, 0x31, 0x12, 0x1c, 0x0a, 0x18,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x32, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x33, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x34, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x41, 0x52, 0x59, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x35, 0x12, 0x30, 0x0a, 0x2c, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x52, 0x42, 0x49, 0x54, 0x52, 0x41,
	0x52, 0x59, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x41, 0x52, 0x59, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x36, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x37, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x38, 0x12, 0x16,
	0x0a, 0x12, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x10, 0x39, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42,
	0x41, 0x53, 0x45, 0x10, 0x3a, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x3b, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x3c, 0x12, 0x1f, 0x0a, 0x1b,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50,
	0x5f, 0x44, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x3d, 0x12, 0x1d, 0x0a,
	0x19, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x3e, 0x12, 0x25, 0x0a, 0x21,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x3f, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x40, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x52, 0x4f, 0x50, 0x5f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x41, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x10,
	0x42, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4d, 0x49, 0x5a, 0x45, 0x10, 0x43, 0x12, 0x16, 0x0a, 0x12, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55,
	0x50, 0x10, 0x44, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x45, 0x12,
	0x20, 0x0a, 0x1c, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b,
	0x49, 0x4c, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x46, 0x12, 0x2d, 0x0a, 0x29, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x44, 0x53, 0x10, 0x47,
	0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x48, 0x12, 0x1a, 0x0a,
	0x16, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54,
	0x45, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x49, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x10, 0x4a, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10,
	0x4b, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x4c, 0x12, 0x19, 0x0a,
	0x15, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x4d, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x41, 0x44, 0x4d,
	0x49, 0x4e, 0x10, 0x4e, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x57, 0x5f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x4f, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x57,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x50, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x4f,
	0x57, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x51, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x10, 0x52, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x51, 0x55,
	0x4f, 0x54, 0x41, 0x10, 0x53, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x10,
	0x54, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x55, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f,
	0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x10, 0x56, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x57, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x53, 0x10, 0x58, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x10,
	0x59, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x52, 0x4f, 0x57, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x49,
	0x45, 0x53, 0x10, 0x5a, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x53, 0x10,
	0x5b, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x10, 0x5c, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x5d, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x5e, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x44, 0x5f, 0x43,
	0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x5f, 0x12, 0x21, 0x0a, 0x1d, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x10, 0x60, 0x12, 0x1d,
	0x0a, 0x19, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x61, 0x12, 0x1d, 0x0a,
	0x19, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x53, 0x10, 0x62, 0x12, 0x21, 0x0a, 0x1d,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x54, 0x54, 0x4c, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x53, 0x10, 0x63, 0x12,
	0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x45, 0x53, 0x10, 0x64, 0x12,
	0x1c, 0x0a, 0x18, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x53, 0x10, 0x65, 0x12, 0x1c, 0x0a,
	0x18, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x53, 0x10, 0x66, 0x12, 0x29, 0x0a, 0x25, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55,
	0x45, 0x55, 0x45, 0x53, 0x10, 0x67, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x10, 0x68, 0x12, 0x23, 0x0a, 0x1f, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x10, 0x69,
	0x12, 0x26, 0x0a, 0x22, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x10, 0x6a, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x52,
	0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x10, 0x6b,
	0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x10, 0x6c, 0x12, 0x18,
	0x0a, 0x14, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49,
	0x43, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x6d, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x4f, 0x53, 0x50, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x52, 0x4c, 0x10, 0x6f, 0x12, 0x16, 0x0a, 0x12,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f,
	0x54, 0x45, 0x10, 0x70, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x47, 0x4f, 0x10, 0x71, 0x12, 0x15, 0x0a, 0x11, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x59, 0x53, 0x51, 0x4c,
	0x10, 0x72, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52, 0x45, 0x53, 0x10, 0x73, 0x12, 0x14, 0x0a, 0x10,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x44, 0x42, 0x43,
	0x10, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4a, 0x44, 0x42, 0x43, 0x10, 0x75, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x44, 0x46, 0x53, 0x10, 0x76, 0x12, 0x12,
	0x0a, 0x0e, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x33,
	0x10, 0x77, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x78, 0x22, 0x9b, 0x9b, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4c, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f,
	0x6e, 0x6c, 0x79, 0x12, 0x4c, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x64, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x64,
	0x6c, 0x12, 0x55, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x6f, 0x72,
	0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x12, 0x64, 0x0a, 0x15, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x5f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x73,
	0x0a, 0x1d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x1b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x89, 0x01, 0x0a, 0x29, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x24, 0x6d, 0x61, 0x78, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x46, 0x6f, 0x72, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x99, 0x01, 0x0a, 0x32, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x5f,
	0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x2c, 0x66,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0b, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x56,
	0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x63, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x5a, 0x0a, 0x10, 0x6d,
	0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6a, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x15, 0x6d, 0x61,
	0x78, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x0d, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x12, 0x5b,
	0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x6d, 0x61, 0x78,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x12, 0x65, 0x0a, 0x12, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4f, 0x76, 0x65,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x10, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x60, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x79, 0x12, 0x73, 0x0a, 0x16, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x79, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4f, 0x76, 0x65,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x6d, 0x61, 0x78,
	0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x77, 0x73, 0x54, 0x6f,
	0x53, 0x6f, 0x72, 0x74, 0x12, 0x5b, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x53, 0x6f, 0x72,
	0x74, 0x12, 0x65, 0x0a, 0x12, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x76, 0x65, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x58, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x6f,
	0x77, 0x73, 0x12, 0x5a, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0e,
	0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x69,
	0x0a, 0x14, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x76, 0x65,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x61, 0x0a, 0x14, 0x6d, 0x61, 0x78,
	0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63,
	0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x52, 0x6f,
	0x77, 0x73, 0x49, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x12, 0x63, 0x0a, 0x15,
	0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x63, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x6d,
	0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63,
	0x74, 0x12, 0x6d, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x4d,
	0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x64, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x63, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x61, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x11, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x6d, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4f, 0x76,
	0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x5e, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6b, 0x0a, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x13, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x5f, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x54,
	0x6f, 0x52, 0x65, 0x61, 0x64, 0x12, 0x64, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x54, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x76, 0x0a, 0x1f, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x1b, 0x6d, 0x61, 0x78, 0x54, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x72, 0x79, 0x4e, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x12, 0x56, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x6d,
	0x61, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x6d,
	0x61, 0x78, 0x5f, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x41, 0x73, 0x74, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x12, 0x5a, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x6d,
	0x61, 0x78, 0x41, 0x73, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x6b, 0x0a,
	0x19, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x73,
	0x74, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x41,
	0x73, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x59, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x53, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x7b, 0x0a, 0x21, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x1e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x79,
	0x6e, 0x63, 0x12, 0x7b, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x60, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x63,
	0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x76, 0x0a, 0x1f, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74,
	0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x1b, 0x6d, 0x69,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x1a, 0x6d, 0x69, 0x6e,
	0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x16, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x69, 0x7a, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x6e, 0x0a, 0x1b, 0x6d, 0x69, 0x6e, 0x5f, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x17,
	0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x1a, 0x6d, 0x69, 0x6e, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x6f, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x15, 0x6d,
	0x69, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x49, 0x6f, 0x12, 0x65, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x75, 0x73, 0x65, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x76, 0x0a, 0x20, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f,
	0x77, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x1a, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x72,
	0x65, 0x65, 0x4d, 0x61, 0x78, 0x52, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x12, 0x78, 0x0a, 0x21, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x65,
	0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75,
	0x73, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x1b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4d, 0x61, 0x78, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x84, 0x01,
	0x0a, 0x27, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x6d, 0x69, 0x6e,
	0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x21, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4d, 0x69, 0x6e, 0x52,
	0x6f, 0x77, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x12, 0x86, 0x01, 0x0a, 0x28, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x74,
	0x72, 0x65, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x22, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x54, 0x72, 0x65, 0x65, 0x4d, 0x69, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64, 0x12, 0x4c, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x64, 0x0a, 0x15, 0x6d,
	0x61, 0x78, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x6d, 0x61,
	0x78, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x74, 0x0a, 0x1e, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x1a, 0x6d, 0x61, 0x78,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x4b, 0x65, 0x79, 0x12, 0x89, 0x01, 0x0a, 0x29, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x25, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x86, 0x01, 0x0a, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6f,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x23, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x4f, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x27, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6a, 0x73, 0x6f, 0x6e,
	0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x36, 0x34, 0x62, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x22, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x36, 0x34, 0x62, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x73,
	0x12, 0x7b, 0x0a, 0x22, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x1e, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x68, 0x0a,
	0x17, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x15, 0x68, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x62, 0x0a, 0x14, 0x68, 0x74, 0x74, 0x70, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x5c, 0x0a, 0x11, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x53, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x67, 0x0a, 0x17, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x15, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x48, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x71, 0x0a, 0x1d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x19, 0x73, 0x65, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x75, 0x0a, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x1b, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x60, 0x0a, 0x14,
	0x61, 0x64, 0x64, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x73, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x61, 0x64, 0x64,
	0x48, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x72, 0x73, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x88,
	0x01, 0x0a, 0x28, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x25, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x71, 0x0a, 0x1c, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x64, 0x6c, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x19, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x44, 0x64,
	0x6c, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x7b, 0x0a, 0x22,
	0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x62, 0x79, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x1d, 0x6d, 0x61, 0x78, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x74, 0x0a, 0x1e, 0x6d, 0x61, 0x78,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x49, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x1a, 0x6d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x6f, 0x72, 0x74, 0x12,
	0x70, 0x0a, 0x1c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x77, 0x6f, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x18, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79,
	0x54, 0x77, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x7b, 0x0a, 0x22, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x77,
	0x6f, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x1d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x54, 0x77, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x82,
	0x01, 0x0a, 0x26, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x21, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x87, 0x01, 0x0a, 0x29, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x23, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x65, 0x74, 0x12, 0x67, 0x0a,
	0x17, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x15, 0x73, 0x6b, 0x69, 0x70, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x60, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x4f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x6b, 0x0a, 0x19, 0x6d, 0x69, 0x6e, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x6d,
	0x69, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x1d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74,
	0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x1b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x63, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x69,
	0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x6d,
	0x61, 0x78, 0x52, 0x6f, 0x77, 0x73, 0x49, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x59, 0x0a, 0x10, 0x6d,
	0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x49, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x63, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x54, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x4d,
	0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x4f,
	0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x6d,
	0x61, 0x78, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x18,
	0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x77, 0x73,
	0x49, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x5b, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x56, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x4a,
	0x6f, 0x69, 0x6e, 0x12, 0x65, 0x0a, 0x12, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x6a, 0x6f, 0x69, 0x6e, 0x4f, 0x76,
	0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x74, 0x0a, 0x1e, 0x6a, 0x6f,
	0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x58, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x1b, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x62, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x12, 0x55, 0x0a, 0x0e, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6c,
	0x6c, 0x73, 0x18, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x6a, 0x6f, 0x69, 0x6e, 0x55,
	0x73, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x73, 0x12, 0x5b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x18, 0x5a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x75,
	0x6c, 0x6c, 0x49, 0x6e, 0x12, 0x73, 0x0a, 0x1d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x1b, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x73, 0x0a, 0x1d, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x57, 0x69, 0x74, 0x68, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x86,
	0x01, 0x0a, 0x27, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x23, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x65, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x5f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65,
	0x6c, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x12, 0x64,
	0x0a, 0x16, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x61, 0x73,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x13, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x41, 0x73, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x9a, 0x01, 0x0a, 0x32, 0x64, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x60, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x2d, 0x64, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x49, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77,
	0x73, 0x12, 0x76, 0x0a, 0x1f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x1b, 0x6d, 0x61,
	0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x76, 0x0a, 0x1f, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x62, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x1b, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x5f, 0x0a, 0x0e, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4a,
	0x6f, 0x69, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6a, 0x6f, 0x69, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x12, 0x7a, 0x0a, 0x22, 0x61, 0x6e, 0x79, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x1d, 0x61, 0x6e, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x6f,
	0x0a, 0x1c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6e,
	0x75, 0x6c, 0x6c, 0x5f, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x18, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x41, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x73, 0x0a, 0x16, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x13, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x7a, 0x0a, 0x22, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f,
	0x75, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x1d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x55, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x76, 0x0a, 0x17, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x68, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x14, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x83, 0x01, 0x0a, 0x26, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6c, 0x6f,
	0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x22, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x4c, 0x6f, 0x77, 0x43, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x8d,
	0x01, 0x0a, 0x2c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18,
	0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x26, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x48, 0x74,
	0x74, 0x70, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x4f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x65,
	0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x72,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x13, 0x6d, 0x61, 0x78, 0x48, 0x74, 0x74, 0x70, 0x47, 0x65, 0x74, 0x52, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x0e, 0x66, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0d,
	0x66, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x56, 0x0a,
	0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x6d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52,
	0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x82, 0x01, 0x0a, 0x1b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x5f, 0x65, 0x73, 0x63, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x45, 0x73, 0x63,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x18, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x45, 0x73,
	0x63, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x70, 0x0a, 0x1c, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x5f, 0x73, 0x6b, 0x69, 0x70,
	0x5f, 0x75, 0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x19, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x53,
	0x6b, 0x69, 0x70, 0x55, 0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x52, 0x0a, 0x0c,
	0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x18, 0x70, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x0b, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x12, 0x62, 0x0a, 0x14, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x12, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x12, 0x62, 0x0a, 0x15, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x18, 0x72, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x77, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x73, 0x79,
	0x6e, 0x63, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x72, 0x0a, 0x1d, 0x77, 0x61, 0x69, 0x74,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x19, 0x77, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x6c, 0x0a, 0x1a,
	0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x16, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4d,
	0x61, 0x78, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x6b, 0x0a, 0x19, 0x61, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x16, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x42, 0x75, 0x73, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x6d, 0x0a, 0x1a, 0x61, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x17, 0x61,
	0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x62, 0x0a, 0x14, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x77,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x12, 0x7e, 0x0a, 0x22, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x1f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x5c, 0x0a, 0x11, 0x6d, 0x61,
	0x78, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18,
	0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x72, 0x0a, 0x1d, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65,
	0x6c, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x1a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x75, 0x0a, 0x1f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18,
	0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x1b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4a,
	0x73, 0x6f, 0x6e, 0x12, 0x85, 0x01, 0x0a, 0x1c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x61, 0x0a, 0x14, 0x6d,
	0x61, 0x78, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x6d, 0x61, 0x78,
	0x52, 0x65, 0x61, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x6b,
	0x0a, 0x19, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x7e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x16, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4b, 0x65, 0x65, 0x70, 0x65,
	0x72, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x28,
	0x6d, 0x61, 0x78, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x21, 0x6d, 0x61, 0x78, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x4f, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x46, 0x6f, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x88, 0x01, 0x0a, 0x29, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x22, 0x6d, 0x61, 0x78, 0x54,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x6e, 0x44, 0x69,
	0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x5b,
	0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x6d, 0x61, 0x78,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x89, 0x01, 0x0a, 0x1d,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x82, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x1a, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x61,
	0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x80, 0x01, 0x0a, 0x23, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x20, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x4f, 0x76, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x44,
	0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x90, 0x01, 0x0a, 0x2c, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x84, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x27, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4f, 0x76, 0x65, 0x72,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x44, 0x65, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x92, 0x01,
	0x0a, 0x2d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x61,
	0x69, 0x74, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x28, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d,
	0x61, 0x78, 0x57, 0x61, 0x69, 0x74, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x1a, 0x5e, 0x0a, 0x15, 0x57, 0x72, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x57, 0x72, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0xfc, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x03, 0x6d, 0x61, 0x78, 0x12, 0x5b, 0x0a, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x1a, 0x80, 0x02, 0x0a, 0x0d, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x5b, 0x0a, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x1a, 0x9c, 0x01, 0x0a, 0x0b, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x1a, 0xa0, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x77, 0x72, 0x69,
	0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xba, 0x01, 0x0a, 0x13, 0x4f, 0x76, 0x65, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x46,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x1a, 0xc8, 0x01, 0x0a, 0x1a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4f,
	0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x37, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4f, 0x76,
	0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xce,
	0x01, 0x0a, 0x1d, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3a, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x57, 0x72, 0x69,
	0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a,
	0xd8, 0x01, 0x0a, 0x22, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63,
	0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x55, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5b, 0x0a,
	0x0b, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x77,
	0x72, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xbc, 0x01, 0x0a, 0x14, 0x4a,
	0x6f, 0x69, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5b, 0x0a, 0x0b,
	0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x77, 0x72,
	0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xd2, 0x01, 0x0a, 0x1f, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x45, 0x73, 0x63, 0x61, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x45, 0x73,
	0x63, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xc8,
	0x01, 0x0a, 0x1a, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5b, 0x0a, 0x0b,
	0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x77, 0x72,
	0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xca, 0x01, 0x0a, 0x1b, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x77, 0x72, 0x69,
	0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xd4, 0x01, 0x0a, 0x20, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x53, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x5b, 0x0a, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x52, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xd6, 0x01,
	0x0a, 0x21, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x54, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x77, 0x72, 0x69,
	0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x7f, 0x0a, 0x0b, 0x57, 0x72, 0x69, 0x74, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x13, 0x57, 0x52, 0x49, 0x54, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x57, 0x52, 0x49, 0x54, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x52, 0x49, 0x54, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12,
	0x26, 0x0a, 0x22, 0x57, 0x52, 0x49, 0x54, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03, 0x22, 0x5b, 0x0a, 0x0c, 0x4f, 0x76, 0x65, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x56, 0x45, 0x52, 0x46,
	0x4c, 0x4f, 0x57, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4f,
	0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x52, 0x45,
	0x41, 0x4b, 0x10, 0x02, 0x22, 0x9d, 0x01, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79,
	0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x1e,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x59, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x20, 0x0a, 0x1c, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x59, 0x5f, 0x4f, 0x56, 0x45,
	0x52, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x57,
	0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x59, 0x5f, 0x4f,
	0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x52, 0x45,
	0x41, 0x4b, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x59,
	0x5f, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41,
	0x4e, 0x59, 0x10, 0x03, 0x22, 0xce, 0x01, 0x0a, 0x16, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x24, 0x0a, 0x20, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x44, 0x5f, 0x50,
	0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x49, 0x53, 0x54,
	0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f,
	0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10,
	0x03, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x44,
	0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x10, 0x04, 0x22, 0xb2, 0x02, 0x0a, 0x1b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44,
	0x49, 0x53, 0x54, 0x49, 0x4e, 0x43, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x26, 0x0a, 0x22, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x49, 0x4e,
	0x43, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x51, 0x10, 0x01, 0x12, 0x2f, 0x0a, 0x2b, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x43, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x51, 0x5f, 0x43,
	0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x32, 0x0a, 0x2e, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x43, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x4c,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x51, 0x5f,
	0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x36, 0x34, 0x10, 0x03, 0x12, 0x2d, 0x0a,
	0x29, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x43, 0x54, 0x5f,
	0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x49, 0x51, 0x5f, 0x48, 0x4c, 0x4c, 0x5f, 0x31, 0x32, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x43, 0x54, 0x5f, 0x49,
	0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
	0x49, 0x51, 0x5f, 0x45, 0x58, 0x41, 0x43, 0x54, 0x10, 0x05, 0x22, 0x8c, 0x02, 0x0a, 0x0d, 0x4a,
	0x6f, 0x69, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1a, 0x0a, 0x16,
	0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4a, 0x4f, 0x49, 0x4e,
	0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10,
	0x01, 0x12, 0x20, 0x0a, 0x1c, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49,
	0x54, 0x48, 0x4d, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4c, 0x4c, 0x45, 0x4c, 0x5f, 0x48, 0x41, 0x53,
	0x48, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x4c, 0x47, 0x4f,
	0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x4d, 0x45,
	0x52, 0x47, 0x45, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x4c,
	0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x04,
	0x12, 0x17, 0x0a, 0x13, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54,
	0x48, 0x4d, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x4a, 0x4f, 0x49,
	0x4e, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x46, 0x55, 0x4c, 0x4c,
	0x5f, 0x53, 0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x10, 0x06,
	0x12, 0x27, 0x0a, 0x23, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54,
	0x48, 0x4d, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41,
	0x4c, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x10, 0x07, 0x22, 0xa9, 0x02, 0x0a, 0x18, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x45, 0x73, 0x63, 0x61, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x5f, 0x52, 0x45, 0x47, 0x45, 0x58, 0x50, 0x5f, 0x45, 0x53, 0x43, 0x41, 0x50, 0x49, 0x4e, 0x47,
	0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x27, 0x0a, 0x23, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x45, 0x58, 0x50,
	0x5f, 0x45, 0x53, 0x43, 0x41, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x45,
	0x53, 0x43, 0x41, 0x50, 0x45, 0x44, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x45, 0x58, 0x50, 0x5f, 0x45, 0x53, 0x43, 0x41, 0x50, 0x49,
	0x4e, 0x47, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x23, 0x0a, 0x1f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x45, 0x58,
	0x50, 0x5f, 0x45, 0x53, 0x43, 0x41, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f,
	0x43, 0x53, 0x56, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f,
	0x52, 0x45, 0x47, 0x45, 0x58, 0x50, 0x5f, 0x45, 0x53, 0x43, 0x41, 0x50, 0x49, 0x4e, 0x47, 0x5f,
	0x52, 0x55, 0x4c, 0x45, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x45, 0x58, 0x50, 0x5f, 0x45, 0x53, 0x43,
	0x41, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x58, 0x4d, 0x4c, 0x10, 0x05,
	0x12, 0x23, 0x0a, 0x1f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x45, 0x58,
	0x50, 0x5f, 0x45, 0x53, 0x43, 0x41, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f,
	0x52, 0x41, 0x57, 0x10, 0x06, 0x22, 0xae, 0x01, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x22, 0x0a,
	0x1e, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49,
	0x4e, 0x50, 0x55, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x42, 0x45, 0x53, 0x54,
	0x5f, 0x45, 0x46, 0x46, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x42, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x46, 0x46, 0x4f, 0x52,
	0x54, 0x5f, 0x55, 0x53, 0x10, 0x03, 0x22, 0xac, 0x01, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x23, 0x0a, 0x1f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4f, 0x55, 0x54,
	0x50, 0x55, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f,
	0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x5f, 0x49, 0x53, 0x4f, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x58, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54,
	0x41, 0x4d, 0x50, 0x10, 0x03, 0x22, 0xee, 0x01, 0x0a, 0x19, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x28, 0x0a, 0x24, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a,
	0x21, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x10, 0x01, 0x12, 0x31, 0x0a, 0x2d, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41,
	0x44, 0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x4c, 0x4f, 0x43, 0x41, 0x4c,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x41, 0x44, 0x10, 0x03, 0x12,
	0x25, 0x0a, 0x21, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f,
	0x4e, 0x4d, 0x41, 0x50, 0x10, 0x04, 0x22, 0x9d, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f,
	0x44, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x4d, 0x4f,
	0x54, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44,
	0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x02, 0x42, 0x49, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_doublecloud_clickhouse_v1_user_proto_rawDescOnce sync.Once
	file_doublecloud_clickhouse_v1_user_proto_rawDescData = file_doublecloud_clickhouse_v1_user_proto_rawDesc
)

func file_doublecloud_clickhouse_v1_user_proto_rawDescGZIP() []byte {
	file_doublecloud_clickhouse_v1_user_proto_rawDescOnce.Do(func() {
		file_doublecloud_clickhouse_v1_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_doublecloud_clickhouse_v1_user_proto_rawDescData)
	})
	return file_doublecloud_clickhouse_v1_user_proto_rawDescData
}

var file_doublecloud_clickhouse_v1_user_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_doublecloud_clickhouse_v1_user_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_doublecloud_clickhouse_v1_user_proto_goTypes = []interface{}{
	(Authentication_IdentificationType)(0),              // 0: doublecloud.clickhouse.v1.Authentication.IdentificationType
	(Grant_AccessType)(0),                               // 1: doublecloud.clickhouse.v1.Grant.AccessType
	(Settings_Writability)(0),                           // 2: doublecloud.clickhouse.v1.Settings.Writability
	(Settings_OverflowMode)(0),                          // 3: doublecloud.clickhouse.v1.Settings.OverflowMode
	(Settings_GroupByOverflowMode)(0),                   // 4: doublecloud.clickhouse.v1.Settings.GroupByOverflowMode
	(Settings_DistributedProductMode)(0),                // 5: doublecloud.clickhouse.v1.Settings.DistributedProductMode
	(Settings_CountDistinctImplementation)(0),           // 6: doublecloud.clickhouse.v1.Settings.CountDistinctImplementation
	(Settings_JoinAlgorithm)(0),                         // 7: doublecloud.clickhouse.v1.Settings.JoinAlgorithm
	(Settings_FormatRegexpEscapingRule)(0),              // 8: doublecloud.clickhouse.v1.Settings.FormatRegexpEscapingRule
	(Settings_DateTimeInputFormat)(0),                   // 9: doublecloud.clickhouse.v1.Settings.DateTimeInputFormat
	(Settings_DateTimeOutputFormat)(0),                  // 10: doublecloud.clickhouse.v1.Settings.DateTimeOutputFormat
	(Settings_LocalFilesystemReadMethod)(0),             // 11: doublecloud.clickhouse.v1.Settings.LocalFilesystemReadMethod
	(Settings_RemoteFilesystemReadMethod)(0),            // 12: doublecloud.clickhouse.v1.Settings.RemoteFilesystemReadMethod
	(*User)(nil),                                        // 13: doublecloud.clickhouse.v1.User
	(*Role)(nil),                                        // 14: doublecloud.clickhouse.v1.Role
	(*Authentication)(nil),                              // 15: doublecloud.clickhouse.v1.Authentication
	(*DefaultRoles)(nil),                                // 16: doublecloud.clickhouse.v1.DefaultRoles
	(*AssignedRoles)(nil),                               // 17: doublecloud.clickhouse.v1.AssignedRoles
	(*Grantees)(nil),                                    // 18: doublecloud.clickhouse.v1.Grantees
	(*Privileges)(nil),                                  // 19: doublecloud.clickhouse.v1.Privileges
	(*QuotaNames)(nil),                                  // 20: doublecloud.clickhouse.v1.QuotaNames
	(*Grant)(nil),                                       // 21: doublecloud.clickhouse.v1.Grant
	(*Settings)(nil),                                    // 22: doublecloud.clickhouse.v1.Settings
	(*Settings_WritabilityConstraint)(nil),              // 23: doublecloud.clickhouse.v1.Settings.WritabilityConstraint
	(*Settings_Int64Setting)(nil),                       // 24: doublecloud.clickhouse.v1.Settings.Int64Setting
	(*Settings_DoubleSetting)(nil),                      // 25: doublecloud.clickhouse.v1.Settings.DoubleSetting
	(*Settings_BoolSetting)(nil),                        // 26: doublecloud.clickhouse.v1.Settings.BoolSetting
	(*Settings_StringSetting)(nil),                      // 27: doublecloud.clickhouse.v1.Settings.StringSetting
	(*Settings_OverflowModeSetting)(nil),                // 28: doublecloud.clickhouse.v1.Settings.OverflowModeSetting
	(*Settings_GroupByOverflowModeSetting)(nil),         // 29: doublecloud.clickhouse.v1.Settings.GroupByOverflowModeSetting
	(*Settings_DistributedProductModeSetting)(nil),      // 30: doublecloud.clickhouse.v1.Settings.DistributedProductModeSetting
	(*Settings_CountDistinctImplementationSetting)(nil), // 31: doublecloud.clickhouse.v1.Settings.CountDistinctImplementationSetting
	(*Settings_JoinAlgorithmSetting)(nil),               // 32: doublecloud.clickhouse.v1.Settings.JoinAlgorithmSetting
	(*Settings_FormatRegexpEscapingRuleSetting)(nil),    // 33: doublecloud.clickhouse.v1.Settings.FormatRegexpEscapingRuleSetting
	(*Settings_DateTimeInputFormatSetting)(nil),         // 34: doublecloud.clickhouse.v1.Settings.DateTimeInputFormatSetting
	(*Settings_DateTimeOutputFormatSetting)(nil),        // 35: doublecloud.clickhouse.v1.Settings.DateTimeOutputFormatSetting
	(*Settings_LocalFilesystemReadMethodSetting)(nil),   // 36: doublecloud.clickhouse.v1.Settings.LocalFilesystemReadMethodSetting
	(*Settings_RemoteFilesystemReadMethodSetting)(nil),  // 37: doublecloud.clickhouse.v1.Settings.RemoteFilesystemReadMethodSetting
	(*wrapperspb.StringValue)(nil),                      // 38: google.protobuf.StringValue
	(*wrapperspb.Int64Value)(nil),                       // 39: google.protobuf.Int64Value
	(*wrapperspb.DoubleValue)(nil),                      // 40: google.protobuf.DoubleValue
	(*wrapperspb.BoolValue)(nil),                        // 41: google.protobuf.BoolValue
}
var file_doublecloud_clickhouse_v1_user_proto_depIdxs = []int32{
	16,  // 0: doublecloud.clickhouse.v1.User.default_roles:type_name -> doublecloud.clickhouse.v1.DefaultRoles
	18,  // 1: doublecloud.clickhouse.v1.User.grantees:type_name -> doublecloud.clickhouse.v1.Grantees
	19,  // 2: doublecloud.clickhouse.v1.User.privileges:type_name -> doublecloud.clickhouse.v1.Privileges
	22,  // 3: doublecloud.clickhouse.v1.User.settings:type_name -> doublecloud.clickhouse.v1.Settings
	20,  // 4: doublecloud.clickhouse.v1.User.quota_names:type_name -> doublecloud.clickhouse.v1.QuotaNames
	17,  // 5: doublecloud.clickhouse.v1.User.assigned_roles:type_name -> doublecloud.clickhouse.v1.AssignedRoles
	19,  // 6: doublecloud.clickhouse.v1.Role.privileges:type_name -> doublecloud.clickhouse.v1.Privileges
	22,  // 7: doublecloud.clickhouse.v1.Role.settings:type_name -> doublecloud.clickhouse.v1.Settings
	20,  // 8: doublecloud.clickhouse.v1.Role.quota_names:type_name -> doublecloud.clickhouse.v1.QuotaNames
	0,   // 9: doublecloud.clickhouse.v1.Authentication.type:type_name -> doublecloud.clickhouse.v1.Authentication.IdentificationType
	38,  // 10: doublecloud.clickhouse.v1.Authentication.password:type_name -> google.protobuf.StringValue
	21,  // 11: doublecloud.clickhouse.v1.Privileges.grants:type_name -> doublecloud.clickhouse.v1.Grant
	1,   // 12: doublecloud.clickhouse.v1.Grant.access_type:type_name -> doublecloud.clickhouse.v1.Grant.AccessType
	24,  // 13: doublecloud.clickhouse.v1.Settings.readonly:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	26,  // 14: doublecloud.clickhouse.v1.Settings.allow_ddl:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	24,  // 15: doublecloud.clickhouse.v1.Settings.insert_quorum:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 16: doublecloud.clickhouse.v1.Settings.insert_quorum_timeout:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	26,  // 17: doublecloud.clickhouse.v1.Settings.select_sequential_consistency:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	24,  // 18: doublecloud.clickhouse.v1.Settings.max_replica_delay_for_distributed_queries:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	26,  // 19: doublecloud.clickhouse.v1.Settings.fallback_to_stale_replicas_for_distributed_queries:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	24,  // 20: doublecloud.clickhouse.v1.Settings.max_threads:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 21: doublecloud.clickhouse.v1.Settings.max_block_size:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 22: doublecloud.clickhouse.v1.Settings.max_insert_block_size:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 23: doublecloud.clickhouse.v1.Settings.max_memory_usage:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 24: doublecloud.clickhouse.v1.Settings.max_memory_usage_for_user:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 25: doublecloud.clickhouse.v1.Settings.max_rows_to_read:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 26: doublecloud.clickhouse.v1.Settings.max_bytes_to_read:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	28,  // 27: doublecloud.clickhouse.v1.Settings.read_overflow_mode:type_name -> doublecloud.clickhouse.v1.Settings.OverflowModeSetting
	24,  // 28: doublecloud.clickhouse.v1.Settings.max_rows_to_group_by:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	29,  // 29: doublecloud.clickhouse.v1.Settings.group_by_overflow_mode:type_name -> doublecloud.clickhouse.v1.Settings.GroupByOverflowModeSetting
	24,  // 30: doublecloud.clickhouse.v1.Settings.max_rows_to_sort:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 31: doublecloud.clickhouse.v1.Settings.max_bytes_to_sort:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	28,  // 32: doublecloud.clickhouse.v1.Settings.sort_overflow_mode:type_name -> doublecloud.clickhouse.v1.Settings.OverflowModeSetting
	24,  // 33: doublecloud.clickhouse.v1.Settings.max_result_rows:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 34: doublecloud.clickhouse.v1.Settings.max_result_bytes:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	28,  // 35: doublecloud.clickhouse.v1.Settings.result_overflow_mode:type_name -> doublecloud.clickhouse.v1.Settings.OverflowModeSetting
	24,  // 36: doublecloud.clickhouse.v1.Settings.max_rows_in_distinct:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 37: doublecloud.clickhouse.v1.Settings.max_bytes_in_distinct:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	28,  // 38: doublecloud.clickhouse.v1.Settings.distinct_overflow_mode:type_name -> doublecloud.clickhouse.v1.Settings.OverflowModeSetting
	24,  // 39: doublecloud.clickhouse.v1.Settings.max_rows_to_transfer:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 40: doublecloud.clickhouse.v1.Settings.max_bytes_to_transfer:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	28,  // 41: doublecloud.clickhouse.v1.Settings.transfer_overflow_mode:type_name -> doublecloud.clickhouse.v1.Settings.OverflowModeSetting
	24,  // 42: doublecloud.clickhouse.v1.Settings.max_execution_time:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	28,  // 43: doublecloud.clickhouse.v1.Settings.timeout_overflow_mode:type_name -> doublecloud.clickhouse.v1.Settings.OverflowModeSetting
	24,  // 44: doublecloud.clickhouse.v1.Settings.max_columns_to_read:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 45: doublecloud.clickhouse.v1.Settings.max_temporary_columns:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 46: doublecloud.clickhouse.v1.Settings.max_temporary_non_const_columns:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 47: doublecloud.clickhouse.v1.Settings.max_query_size:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 48: doublecloud.clickhouse.v1.Settings.max_ast_depth:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 49: doublecloud.clickhouse.v1.Settings.max_ast_elements:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 50: doublecloud.clickhouse.v1.Settings.max_expanded_ast_elements:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 51: doublecloud.clickhouse.v1.Settings.connect_timeout:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 52: doublecloud.clickhouse.v1.Settings.receive_timeout:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 53: doublecloud.clickhouse.v1.Settings.send_timeout:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 54: doublecloud.clickhouse.v1.Settings.replication_alter_partitions_sync:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	30,  // 55: doublecloud.clickhouse.v1.Settings.distributed_product_mode:type_name -> doublecloud.clickhouse.v1.Settings.DistributedProductModeSetting
	26,  // 56: doublecloud.clickhouse.v1.Settings.compile_expressions:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	24,  // 57: doublecloud.clickhouse.v1.Settings.min_count_to_compile_expression:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 58: doublecloud.clickhouse.v1.Settings.min_insert_block_size_rows:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 59: doublecloud.clickhouse.v1.Settings.min_insert_block_size_bytes:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 60: doublecloud.clickhouse.v1.Settings.min_bytes_to_use_direct_io:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	26,  // 61: doublecloud.clickhouse.v1.Settings.use_uncompressed_cache:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	24,  // 62: doublecloud.clickhouse.v1.Settings.merge_tree_max_rows_to_use_cache:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 63: doublecloud.clickhouse.v1.Settings.merge_tree_max_bytes_to_use_cache:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 64: doublecloud.clickhouse.v1.Settings.merge_tree_min_rows_for_concurrent_read:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 65: doublecloud.clickhouse.v1.Settings.merge_tree_min_bytes_for_concurrent_read:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 66: doublecloud.clickhouse.v1.Settings.priority:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 67: doublecloud.clickhouse.v1.Settings.max_network_bandwidth:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 68: doublecloud.clickhouse.v1.Settings.max_network_bandwidth_for_user:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	26,  // 69: doublecloud.clickhouse.v1.Settings.force_index_by_date:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	26,  // 70: doublecloud.clickhouse.v1.Settings.force_primary_key:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	26,  // 71: doublecloud.clickhouse.v1.Settings.input_format_values_interpret_expressions:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	26,  // 72: doublecloud.clickhouse.v1.Settings.input_format_defaults_for_omitted_fields:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	26,  // 73: doublecloud.clickhouse.v1.Settings.output_format_json_quote_64bit_integers:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	26,  // 74: doublecloud.clickhouse.v1.Settings.output_format_json_quote_denormals:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	24,  // 75: doublecloud.clickhouse.v1.Settings.http_connection_timeout:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 76: doublecloud.clickhouse.v1.Settings.http_receive_timeout:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 77: doublecloud.clickhouse.v1.Settings.http_send_timeout:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	26,  // 78: doublecloud.clickhouse.v1.Settings.enable_http_compression:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	26,  // 79: doublecloud.clickhouse.v1.Settings.send_progress_in_http_headers:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	24,  // 80: doublecloud.clickhouse.v1.Settings.http_headers_progress_interval:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	26,  // 81: doublecloud.clickhouse.v1.Settings.add_http_cors_header:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	26,  // 82: doublecloud.clickhouse.v1.Settings.distributed_aggregation_memory_efficient:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	24,  // 83: doublecloud.clickhouse.v1.Settings.distributed_ddl_task_timeout:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 84: doublecloud.clickhouse.v1.Settings.max_bytes_before_external_group_by:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 85: doublecloud.clickhouse.v1.Settings.max_bytes_before_external_sort:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 86: doublecloud.clickhouse.v1.Settings.group_by_two_level_threshold:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 87: doublecloud.clickhouse.v1.Settings.group_by_two_level_threshold_bytes:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	26,  // 88: doublecloud.clickhouse.v1.Settings.low_cardinality_allow_in_native_format:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	26,  // 89: doublecloud.clickhouse.v1.Settings.empty_result_for_aggregation_by_empty_set:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	26,  // 90: doublecloud.clickhouse.v1.Settings.skip_unavailable_shards:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	24,  // 91: doublecloud.clickhouse.v1.Settings.min_execution_speed:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 92: doublecloud.clickhouse.v1.Settings.min_execution_speed_bytes:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	31,  // 93: doublecloud.clickhouse.v1.Settings.count_distinct_implementation:type_name -> doublecloud.clickhouse.v1.Settings.CountDistinctImplementationSetting
	24,  // 94: doublecloud.clickhouse.v1.Settings.max_rows_in_set:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 95: doublecloud.clickhouse.v1.Settings.max_bytes_in_set:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	28,  // 96: doublecloud.clickhouse.v1.Settings.set_overflow_mode:type_name -> doublecloud.clickhouse.v1.Settings.OverflowModeSetting
	24,  // 97: doublecloud.clickhouse.v1.Settings.max_rows_in_join:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 98: doublecloud.clickhouse.v1.Settings.max_bytes_in_join:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	28,  // 99: doublecloud.clickhouse.v1.Settings.join_overflow_mode:type_name -> doublecloud.clickhouse.v1.Settings.OverflowModeSetting
	26,  // 100: doublecloud.clickhouse.v1.Settings.joined_subquery_requires_alias:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	26,  // 101: doublecloud.clickhouse.v1.Settings.join_use_nulls:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	26,  // 102: doublecloud.clickhouse.v1.Settings.transform_null_in:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	26,  // 103: doublecloud.clickhouse.v1.Settings.allow_introspection_functions:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	24,  // 104: doublecloud.clickhouse.v1.Settings.connect_timeout_with_failover:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 105: doublecloud.clickhouse.v1.Settings.timeout_before_checking_execution_speed:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	26,  // 106: doublecloud.clickhouse.v1.Settings.insert_quorum_parallel:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	26,  // 107: doublecloud.clickhouse.v1.Settings.insert_null_as_default:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	26,  // 108: doublecloud.clickhouse.v1.Settings.deduplicate_blocks_in_dependent_materialized_views:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	24,  // 109: doublecloud.clickhouse.v1.Settings.max_partitions_per_insert_block:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 110: doublecloud.clickhouse.v1.Settings.max_concurrent_queries_for_user:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	32,  // 111: doublecloud.clickhouse.v1.Settings.join_algorithm:type_name -> doublecloud.clickhouse.v1.Settings.JoinAlgorithmSetting
	26,  // 112: doublecloud.clickhouse.v1.Settings.any_join_distinct_right_table_keys:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	26,  // 113: doublecloud.clickhouse.v1.Settings.input_format_null_as_default:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	34,  // 114: doublecloud.clickhouse.v1.Settings.date_time_input_format:type_name -> doublecloud.clickhouse.v1.Settings.DateTimeInputFormatSetting
	26,  // 115: doublecloud.clickhouse.v1.Settings.input_format_with_names_use_header:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	35,  // 116: doublecloud.clickhouse.v1.Settings.date_time_output_format:type_name -> doublecloud.clickhouse.v1.Settings.DateTimeOutputFormatSetting
	26,  // 117: doublecloud.clickhouse.v1.Settings.allow_suspicious_low_cardinality_types:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	26,  // 118: doublecloud.clickhouse.v1.Settings.cancel_http_readonly_queries_on_client_close:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	24,  // 119: doublecloud.clickhouse.v1.Settings.max_http_get_redirects:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	26,  // 120: doublecloud.clickhouse.v1.Settings.flatten_nested:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	27,  // 121: doublecloud.clickhouse.v1.Settings.format_regexp:type_name -> doublecloud.clickhouse.v1.Settings.StringSetting
	33,  // 122: doublecloud.clickhouse.v1.Settings.format_regexp_escaping_rule:type_name -> doublecloud.clickhouse.v1.Settings.FormatRegexpEscapingRuleSetting
	26,  // 123: doublecloud.clickhouse.v1.Settings.format_regexp_skip_unmatched:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	26,  // 124: doublecloud.clickhouse.v1.Settings.async_insert:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	24,  // 125: doublecloud.clickhouse.v1.Settings.async_insert_threads:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	26,  // 126: doublecloud.clickhouse.v1.Settings.wait_for_async_insert:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	24,  // 127: doublecloud.clickhouse.v1.Settings.wait_for_async_insert_timeout:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 128: doublecloud.clickhouse.v1.Settings.async_insert_max_data_size:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 129: doublecloud.clickhouse.v1.Settings.async_insert_busy_timeout:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 130: doublecloud.clickhouse.v1.Settings.async_insert_stale_timeout:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 131: doublecloud.clickhouse.v1.Settings.memory_profiler_step:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	25,  // 132: doublecloud.clickhouse.v1.Settings.memory_profiler_sample_probability:type_name -> doublecloud.clickhouse.v1.Settings.DoubleSetting
	24,  // 133: doublecloud.clickhouse.v1.Settings.max_final_threads:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	26,  // 134: doublecloud.clickhouse.v1.Settings.input_format_parallel_parsing:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	26,  // 135: doublecloud.clickhouse.v1.Settings.input_format_import_nested_json:type_name -> doublecloud.clickhouse.v1.Settings.BoolSetting
	36,  // 136: doublecloud.clickhouse.v1.Settings.local_filesystem_read_method:type_name -> doublecloud.clickhouse.v1.Settings.LocalFilesystemReadMethodSetting
	24,  // 137: doublecloud.clickhouse.v1.Settings.max_read_buffer_size:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 138: doublecloud.clickhouse.v1.Settings.insert_keeper_max_retries:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 139: doublecloud.clickhouse.v1.Settings.max_temporary_data_on_disk_size_for_user:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 140: doublecloud.clickhouse.v1.Settings.max_temporary_data_on_disk_size_for_query:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 141: doublecloud.clickhouse.v1.Settings.max_parser_depth:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	37,  // 142: doublecloud.clickhouse.v1.Settings.remote_filesystem_read_method:type_name -> doublecloud.clickhouse.v1.Settings.RemoteFilesystemReadMethodSetting
	24,  // 143: doublecloud.clickhouse.v1.Settings.memory_overcommit_ratio_denominator:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 144: doublecloud.clickhouse.v1.Settings.memory_overcommit_ratio_denominator_for_user:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	24,  // 145: doublecloud.clickhouse.v1.Settings.memory_usage_overcommit_max_wait_microseconds:type_name -> doublecloud.clickhouse.v1.Settings.Int64Setting
	2,   // 146: doublecloud.clickhouse.v1.Settings.WritabilityConstraint.value:type_name -> doublecloud.clickhouse.v1.Settings.Writability
	39,  // 147: doublecloud.clickhouse.v1.Settings.Int64Setting.value:type_name -> google.protobuf.Int64Value
	39,  // 148: doublecloud.clickhouse.v1.Settings.Int64Setting.min:type_name -> google.protobuf.Int64Value
	39,  // 149: doublecloud.clickhouse.v1.Settings.Int64Setting.max:type_name -> google.protobuf.Int64Value
	23,  // 150: doublecloud.clickhouse.v1.Settings.Int64Setting.writability:type_name -> doublecloud.clickhouse.v1.Settings.WritabilityConstraint
	40,  // 151: doublecloud.clickhouse.v1.Settings.DoubleSetting.value:type_name -> google.protobuf.DoubleValue
	40,  // 152: doublecloud.clickhouse.v1.Settings.DoubleSetting.min:type_name -> google.protobuf.DoubleValue
	40,  // 153: doublecloud.clickhouse.v1.Settings.DoubleSetting.max:type_name -> google.protobuf.DoubleValue
	23,  // 154: doublecloud.clickhouse.v1.Settings.DoubleSetting.writability:type_name -> doublecloud.clickhouse.v1.Settings.WritabilityConstraint
	41,  // 155: doublecloud.clickhouse.v1.Settings.BoolSetting.value:type_name -> google.protobuf.BoolValue
	23,  // 156: doublecloud.clickhouse.v1.Settings.BoolSetting.writability:type_name -> doublecloud.clickhouse.v1.Settings.WritabilityConstraint
	38,  // 157: doublecloud.clickhouse.v1.Settings.StringSetting.value:type_name -> google.protobuf.StringValue
	23,  // 158: doublecloud.clickhouse.v1.Settings.StringSetting.writability:type_name -> doublecloud.clickhouse.v1.Settings.WritabilityConstraint
	3,   // 159: doublecloud.clickhouse.v1.Settings.OverflowModeSetting.value:type_name -> doublecloud.clickhouse.v1.Settings.OverflowMode
	23,  // 160: doublecloud.clickhouse.v1.Settings.OverflowModeSetting.writability:type_name -> doublecloud.clickhouse.v1.Settings.WritabilityConstraint
	4,   // 161: doublecloud.clickhouse.v1.Settings.GroupByOverflowModeSetting.value:type_name -> doublecloud.clickhouse.v1.Settings.GroupByOverflowMode
	23,  // 162: doublecloud.clickhouse.v1.Settings.GroupByOverflowModeSetting.writability:type_name -> doublecloud.clickhouse.v1.Settings.WritabilityConstraint
	5,   // 163: doublecloud.clickhouse.v1.Settings.DistributedProductModeSetting.value:type_name -> doublecloud.clickhouse.v1.Settings.DistributedProductMode
	23,  // 164: doublecloud.clickhouse.v1.Settings.DistributedProductModeSetting.writability:type_name -> doublecloud.clickhouse.v1.Settings.WritabilityConstraint
	6,   // 165: doublecloud.clickhouse.v1.Settings.CountDistinctImplementationSetting.value:type_name -> doublecloud.clickhouse.v1.Settings.CountDistinctImplementation
	23,  // 166: doublecloud.clickhouse.v1.Settings.CountDistinctImplementationSetting.writability:type_name -> doublecloud.clickhouse.v1.Settings.WritabilityConstraint
	7,   // 167: doublecloud.clickhouse.v1.Settings.JoinAlgorithmSetting.value:type_name -> doublecloud.clickhouse.v1.Settings.JoinAlgorithm
	23,  // 168: doublecloud.clickhouse.v1.Settings.JoinAlgorithmSetting.writability:type_name -> doublecloud.clickhouse.v1.Settings.WritabilityConstraint
	8,   // 169: doublecloud.clickhouse.v1.Settings.FormatRegexpEscapingRuleSetting.value:type_name -> doublecloud.clickhouse.v1.Settings.FormatRegexpEscapingRule
	23,  // 170: doublecloud.clickhouse.v1.Settings.FormatRegexpEscapingRuleSetting.writability:type_name -> doublecloud.clickhouse.v1.Settings.WritabilityConstraint
	9,   // 171: doublecloud.clickhouse.v1.Settings.DateTimeInputFormatSetting.value:type_name -> doublecloud.clickhouse.v1.Settings.DateTimeInputFormat
	23,  // 172: doublecloud.clickhouse.v1.Settings.DateTimeInputFormatSetting.writability:type_name -> doublecloud.clickhouse.v1.Settings.WritabilityConstraint
	10,  // 173: doublecloud.clickhouse.v1.Settings.DateTimeOutputFormatSetting.value:type_name -> doublecloud.clickhouse.v1.Settings.DateTimeOutputFormat
	23,  // 174: doublecloud.clickhouse.v1.Settings.DateTimeOutputFormatSetting.writability:type_name -> doublecloud.clickhouse.v1.Settings.WritabilityConstraint
	11,  // 175: doublecloud.clickhouse.v1.Settings.LocalFilesystemReadMethodSetting.value:type_name -> doublecloud.clickhouse.v1.Settings.LocalFilesystemReadMethod
	23,  // 176: doublecloud.clickhouse.v1.Settings.LocalFilesystemReadMethodSetting.writability:type_name -> doublecloud.clickhouse.v1.Settings.WritabilityConstraint
	12,  // 177: doublecloud.clickhouse.v1.Settings.RemoteFilesystemReadMethodSetting.value:type_name -> doublecloud.clickhouse.v1.Settings.RemoteFilesystemReadMethod
	23,  // 178: doublecloud.clickhouse.v1.Settings.RemoteFilesystemReadMethodSetting.writability:type_name -> doublecloud.clickhouse.v1.Settings.WritabilityConstraint
	179, // [179:179] is the sub-list for method output_type
	179, // [179:179] is the sub-list for method input_type
	179, // [179:179] is the sub-list for extension type_name
	179, // [179:179] is the sub-list for extension extendee
	0,   // [0:179] is the sub-list for field type_name
}

func init() { file_doublecloud_clickhouse_v1_user_proto_init() }
func file_doublecloud_clickhouse_v1_user_proto_init() {
	if File_doublecloud_clickhouse_v1_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_doublecloud_clickhouse_v1_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authentication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultRoles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedRoles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Grantees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Privileges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotaNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Grant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_user_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_user_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings_WritabilityConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_user_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings_Int64Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_user_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings_DoubleSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_user_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings_BoolSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_user_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings_StringSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_user_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings_OverflowModeSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_user_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings_GroupByOverflowModeSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_user_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings_DistributedProductModeSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_user_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings_CountDistinctImplementationSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_user_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings_JoinAlgorithmSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_user_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings_FormatRegexpEscapingRuleSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_user_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings_DateTimeInputFormatSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_user_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings_DateTimeOutputFormatSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_user_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings_LocalFilesystemReadMethodSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_user_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings_RemoteFilesystemReadMethodSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_doublecloud_clickhouse_v1_user_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_doublecloud_clickhouse_v1_user_proto_goTypes,
		DependencyIndexes: file_doublecloud_clickhouse_v1_user_proto_depIdxs,
		EnumInfos:         file_doublecloud_clickhouse_v1_user_proto_enumTypes,
		MessageInfos:      file_doublecloud_clickhouse_v1_user_proto_msgTypes,
	}.Build()
	File_doublecloud_clickhouse_v1_user_proto = out.File
	file_doublecloud_clickhouse_v1_user_proto_rawDesc = nil
	file_doublecloud_clickhouse_v1_user_proto_goTypes = nil
	file_doublecloud_clickhouse_v1_user_proto_depIdxs = nil
}
