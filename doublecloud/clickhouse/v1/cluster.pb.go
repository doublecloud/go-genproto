// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: doublecloud/clickhouse/v1/cluster.proto

package clickhouse

import (
	v1 "github.com/doublecloud/go-genproto/doublecloud/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A ClickHouse cluster resource.
type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the ClickHouse cluster.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the project that the ClickHouse cluster belongs to.
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Type of the cloud where instances should be hosted.
	CloudType string `protobuf:"bytes,3,opt,name=cloud_type,json=cloudType,proto3" json:"cloud_type,omitempty"`
	// ID of the region to place instances.
	RegionId string `protobuf:"bytes,4,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// Creation timestamp.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Name of the ClickHouse cluster.
	// The name is unique within the project.
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the ClickHouse cluster.
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	// Current state of the cluster.
	Status v1.ClusterStatus `protobuf:"varint,8,opt,name=status,proto3,enum=doublecloud.v1.ClusterStatus" json:"status,omitempty"`
	// Version of ClickHouse DBMS.
	Version string `protobuf:"bytes,9,opt,name=version,proto3" json:"version,omitempty"`
	// Resources allocated to the ClickHouse cluster.
	Resources *ClusterResources `protobuf:"bytes,10,opt,name=resources,proto3" json:"resources,omitempty"`
	// Connection information.
	ConnectionInfo *ConnectionInfo `protobuf:"bytes,11,opt,name=connection_info,json=connectionInfo,proto3" json:"connection_info,omitempty"`
	// Access settings
	Access *v1.Access `protobuf:"bytes,12,opt,name=access,proto3" json:"access,omitempty"`
	// Private connection information.
	PrivateConnectionInfo *PrivateConnectionInfo `protobuf:"bytes,13,opt,name=private_connection_info,json=privateConnectionInfo,proto3" json:"private_connection_info,omitempty"`
	// DataEncryption settings
	Encryption *v1.DataEncryption `protobuf:"bytes,14,opt,name=encryption,proto3" json:"encryption,omitempty"`
	// ID of the network that the ClickHouse cluster belongs to.
	NetworkId string `protobuf:"bytes,15,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// ClickHouse server configuration.
	ClickhouseConfig *ClickhouseConfig `protobuf:"bytes,16,opt,name=clickhouse_config,json=clickhouseConfig,proto3" json:"clickhouse_config,omitempty"`
	// Window of maintenance operations.
	MaintenanceWindow *v1.MaintenanceWindow `protobuf:"bytes,17,opt,name=maintenance_window,json=maintenanceWindow,proto3" json:"maintenance_window,omitempty"`
	// Maintenance operation planned at nearest maintenance_window.
	MaintenanceOperation *v1.MaintenanceOperation `protobuf:"bytes,18,opt,name=maintenance_operation,json=maintenanceOperation,proto3" json:"maintenance_operation,omitempty"`
	// Prometheus JMX exporter endpoint HTTP basic auth information.
	MetricsExporterConnectionInfo *MetricsExporterConnectionInfo `protobuf:"bytes,19,opt,name=metrics_exporter_connection_info,json=metricsExporterConnectionInfo,proto3" json:"metrics_exporter_connection_info,omitempty"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_cluster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_cluster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *Cluster) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Cluster) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Cluster) GetCloudType() string {
	if x != nil {
		return x.CloudType
	}
	return ""
}

func (x *Cluster) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *Cluster) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Cluster) GetStatus() v1.ClusterStatus {
	if x != nil {
		return x.Status
	}
	return v1.ClusterStatus(0)
}

func (x *Cluster) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Cluster) GetResources() *ClusterResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Cluster) GetConnectionInfo() *ConnectionInfo {
	if x != nil {
		return x.ConnectionInfo
	}
	return nil
}

func (x *Cluster) GetAccess() *v1.Access {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *Cluster) GetPrivateConnectionInfo() *PrivateConnectionInfo {
	if x != nil {
		return x.PrivateConnectionInfo
	}
	return nil
}

func (x *Cluster) GetEncryption() *v1.DataEncryption {
	if x != nil {
		return x.Encryption
	}
	return nil
}

func (x *Cluster) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *Cluster) GetClickhouseConfig() *ClickhouseConfig {
	if x != nil {
		return x.ClickhouseConfig
	}
	return nil
}

func (x *Cluster) GetMaintenanceWindow() *v1.MaintenanceWindow {
	if x != nil {
		return x.MaintenanceWindow
	}
	return nil
}

func (x *Cluster) GetMaintenanceOperation() *v1.MaintenanceOperation {
	if x != nil {
		return x.MaintenanceOperation
	}
	return nil
}

func (x *Cluster) GetMetricsExporterConnectionInfo() *MetricsExporterConnectionInfo {
	if x != nil {
		return x.MetricsExporterConnectionInfo
	}
	return nil
}

// Resources allocated to ClickHouse cluster.
type ClusterResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resources allocated to ClickHouse hosts.
	Clickhouse *ClusterResources_Clickhouse `protobuf:"bytes,1,opt,name=clickhouse,proto3" json:"clickhouse,omitempty"`
	// Resources allocated to dedicated ClickHouse Keeper hosts.
	DedicatedKeeper *ClusterResources_Keeper `protobuf:"bytes,2,opt,name=dedicated_keeper,json=dedicatedKeeper,proto3" json:"dedicated_keeper,omitempty"`
}

func (x *ClusterResources) Reset() {
	*x = ClusterResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_cluster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterResources) ProtoMessage() {}

func (x *ClusterResources) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_cluster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterResources.ProtoReflect.Descriptor instead.
func (*ClusterResources) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *ClusterResources) GetClickhouse() *ClusterResources_Clickhouse {
	if x != nil {
		return x.Clickhouse
	}
	return nil
}

func (x *ClusterResources) GetDedicatedKeeper() *ClusterResources_Keeper {
	if x != nil {
		return x.DedicatedKeeper
	}
	return nil
}

type ConnectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host to connect.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// ClickHouse user.
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// Password for ClickHouse user.
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	// Port to connect using HTTPS protocol.
	HttpsPort *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=https_port,json=httpsPort,proto3" json:"https_port,omitempty"`
	// Port to connect using TCP/native protocol.
	TcpPortSecure *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=tcp_port_secure,json=tcpPortSecure,proto3" json:"tcp_port_secure,omitempty"`
	// Connection string for ClickHouse native protocol.
	NativeProtocol string `protobuf:"bytes,6,opt,name=native_protocol,json=nativeProtocol,proto3" json:"native_protocol,omitempty"`
	// URI to connect using HTTPS protocol.
	HttpsUri string `protobuf:"bytes,7,opt,name=https_uri,json=httpsUri,proto3" json:"https_uri,omitempty"`
	// URI to connect using JDBC protocol.
	JdbcUri string `protobuf:"bytes,8,opt,name=jdbc_uri,json=jdbcUri,proto3" json:"jdbc_uri,omitempty"`
	// URI to connect using ODBC protocol.
	OdbcUri string `protobuf:"bytes,9,opt,name=odbc_uri,json=odbcUri,proto3" json:"odbc_uri,omitempty"`
}

func (x *ConnectionInfo) Reset() {
	*x = ConnectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_cluster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionInfo) ProtoMessage() {}

func (x *ConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_cluster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionInfo.ProtoReflect.Descriptor instead.
func (*ConnectionInfo) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_cluster_proto_rawDescGZIP(), []int{2}
}

func (x *ConnectionInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ConnectionInfo) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ConnectionInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ConnectionInfo) GetHttpsPort() *wrapperspb.Int64Value {
	if x != nil {
		return x.HttpsPort
	}
	return nil
}

func (x *ConnectionInfo) GetTcpPortSecure() *wrapperspb.Int64Value {
	if x != nil {
		return x.TcpPortSecure
	}
	return nil
}

func (x *ConnectionInfo) GetNativeProtocol() string {
	if x != nil {
		return x.NativeProtocol
	}
	return ""
}

func (x *ConnectionInfo) GetHttpsUri() string {
	if x != nil {
		return x.HttpsUri
	}
	return ""
}

func (x *ConnectionInfo) GetJdbcUri() string {
	if x != nil {
		return x.JdbcUri
	}
	return ""
}

func (x *ConnectionInfo) GetOdbcUri() string {
	if x != nil {
		return x.OdbcUri
	}
	return ""
}

type PrivateConnectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host to connect.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// ClickHouse user.
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// Password for ClickHouse user.
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	// Port to connect using HTTPS protocol.
	HttpsPort *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=https_port,json=httpsPort,proto3" json:"https_port,omitempty"`
	// Port to connect using TCP/native protocol.
	TcpPortSecure *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=tcp_port_secure,json=tcpPortSecure,proto3" json:"tcp_port_secure,omitempty"`
	// Connection string for ClickHouse native protocol.
	NativeProtocol string `protobuf:"bytes,6,opt,name=native_protocol,json=nativeProtocol,proto3" json:"native_protocol,omitempty"`
	// URI to connect using HTTPS protocol.
	HttpsUri string `protobuf:"bytes,7,opt,name=https_uri,json=httpsUri,proto3" json:"https_uri,omitempty"`
	// URI to connect using JDBC protocol.
	JdbcUri string `protobuf:"bytes,8,opt,name=jdbc_uri,json=jdbcUri,proto3" json:"jdbc_uri,omitempty"`
	// URI to connect using ODBC protocol.
	OdbcUri string `protobuf:"bytes,9,opt,name=odbc_uri,json=odbcUri,proto3" json:"odbc_uri,omitempty"`
}

func (x *PrivateConnectionInfo) Reset() {
	*x = PrivateConnectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_cluster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateConnectionInfo) ProtoMessage() {}

func (x *PrivateConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_cluster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateConnectionInfo.ProtoReflect.Descriptor instead.
func (*PrivateConnectionInfo) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_cluster_proto_rawDescGZIP(), []int{3}
}

func (x *PrivateConnectionInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *PrivateConnectionInfo) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *PrivateConnectionInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *PrivateConnectionInfo) GetHttpsPort() *wrapperspb.Int64Value {
	if x != nil {
		return x.HttpsPort
	}
	return nil
}

func (x *PrivateConnectionInfo) GetTcpPortSecure() *wrapperspb.Int64Value {
	if x != nil {
		return x.TcpPortSecure
	}
	return nil
}

func (x *PrivateConnectionInfo) GetNativeProtocol() string {
	if x != nil {
		return x.NativeProtocol
	}
	return ""
}

func (x *PrivateConnectionInfo) GetHttpsUri() string {
	if x != nil {
		return x.HttpsUri
	}
	return ""
}

func (x *PrivateConnectionInfo) GetJdbcUri() string {
	if x != nil {
		return x.JdbcUri
	}
	return ""
}

func (x *PrivateConnectionInfo) GetOdbcUri() string {
	if x != nil {
		return x.OdbcUri
	}
	return ""
}

type MetricsExporterConnectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User for HTTP basic auth.
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// Password for HTTP basic auth.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *MetricsExporterConnectionInfo) Reset() {
	*x = MetricsExporterConnectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_cluster_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsExporterConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsExporterConnectionInfo) ProtoMessage() {}

func (x *MetricsExporterConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_cluster_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsExporterConnectionInfo.ProtoReflect.Descriptor instead.
func (*MetricsExporterConnectionInfo) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_cluster_proto_rawDescGZIP(), []int{4}
}

func (x *MetricsExporterConnectionInfo) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *MetricsExporterConnectionInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type Host struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the host.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ID of the ClickHouse cluster.
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the shard that the host belongs to.
	ShardName string `protobuf:"bytes,3,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	// Private dns name.
	PrivateName string `protobuf:"bytes,4,opt,name=private_name,json=privateName,proto3" json:"private_name,omitempty"`
	// Aggregated host status.
	Status v1.HostStatus `protobuf:"varint,5,opt,name=status,proto3,enum=doublecloud.v1.HostStatus" json:"status,omitempty"`
}

func (x *Host) Reset() {
	*x = Host{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_cluster_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Host) ProtoMessage() {}

func (x *Host) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_cluster_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Host.ProtoReflect.Descriptor instead.
func (*Host) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_cluster_proto_rawDescGZIP(), []int{5}
}

func (x *Host) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Host) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *Host) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

func (x *Host) GetPrivateName() string {
	if x != nil {
		return x.PrivateName
	}
	return ""
}

func (x *Host) GetStatus() v1.HostStatus {
	if x != nil {
		return x.Status
	}
	return v1.HostStatus(0)
}

type ClusterResources_Clickhouse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the preset for computational resources available to a host (CPU, memory
	// etc.).
	// Means the minimal resource preset for autoscaling.
	ResourcePresetId string `protobuf:"bytes,1,opt,name=resource_preset_id,json=resourcePresetId,proto3" json:"resource_preset_id,omitempty"`
	// Volume of the storage available to a host, in bytes.
	DiskSize *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	// Number of hosts per shard.
	ReplicaCount *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=replica_count,json=replicaCount,proto3" json:"replica_count,omitempty"`
	// Number of shards in the cluster.
	ShardCount *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=shard_count,json=shardCount,proto3" json:"shard_count,omitempty"`
	// Limit for automatical storage volume scale, in bytes. Autoscaling disabled if
	// not set.
	MaxDiskSize *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=max_disk_size,json=maxDiskSize,proto3" json:"max_disk_size,omitempty"`
}

func (x *ClusterResources_Clickhouse) Reset() {
	*x = ClusterResources_Clickhouse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_cluster_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterResources_Clickhouse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterResources_Clickhouse) ProtoMessage() {}

func (x *ClusterResources_Clickhouse) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_cluster_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterResources_Clickhouse.ProtoReflect.Descriptor instead.
func (*ClusterResources_Clickhouse) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_cluster_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ClusterResources_Clickhouse) GetResourcePresetId() string {
	if x != nil {
		return x.ResourcePresetId
	}
	return ""
}

func (x *ClusterResources_Clickhouse) GetDiskSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.DiskSize
	}
	return nil
}

func (x *ClusterResources_Clickhouse) GetReplicaCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.ReplicaCount
	}
	return nil
}

func (x *ClusterResources_Clickhouse) GetShardCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.ShardCount
	}
	return nil
}

func (x *ClusterResources_Clickhouse) GetMaxDiskSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxDiskSize
	}
	return nil
}

type ClusterResources_Keeper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the preset for computational resources available to a host (CPU, memory
	// etc.).
	// Means the minimal resource preset for autoscaling.
	ResourcePresetId string `protobuf:"bytes,1,opt,name=resource_preset_id,json=resourcePresetId,proto3" json:"resource_preset_id,omitempty"`
	// Volume of the storage available to a host, in bytes.
	DiskSize *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	// Number of keeper hosts.
	ReplicaCount *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=replica_count,json=replicaCount,proto3" json:"replica_count,omitempty"`
	// Limit for automatical storage volume scale, in bytes. Autoscaling disabled if
	// not set.
	MaxDiskSize *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=max_disk_size,json=maxDiskSize,proto3" json:"max_disk_size,omitempty"`
}

func (x *ClusterResources_Keeper) Reset() {
	*x = ClusterResources_Keeper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_clickhouse_v1_cluster_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterResources_Keeper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterResources_Keeper) ProtoMessage() {}

func (x *ClusterResources_Keeper) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_clickhouse_v1_cluster_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterResources_Keeper.ProtoReflect.Descriptor instead.
func (*ClusterResources_Keeper) Descriptor() ([]byte, []int) {
	return file_doublecloud_clickhouse_v1_cluster_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ClusterResources_Keeper) GetResourcePresetId() string {
	if x != nil {
		return x.ResourcePresetId
	}
	return ""
}

func (x *ClusterResources_Keeper) GetDiskSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.DiskSize
	}
	return nil
}

func (x *ClusterResources_Keeper) GetReplicaCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.ReplicaCount
	}
	return nil
}

func (x *ClusterResources_Keeper) GetMaxDiskSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxDiskSize
	}
	return nil
}

var File_doublecloud_clickhouse_v1_cluster_proto protoreflect.FileDescriptor

var file_doublecloud_clickhouse_v1_cluster_proto_rawDesc = []byte{
	0x0a, 0x27, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdb, 0x08,
	0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x68, 0x0a, 0x17, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64,
	0x12, 0x58, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x11, 0x6d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x59, 0x0a, 0x15,
	0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x14, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x81, 0x01, 0x0a, 0x20, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1d, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xf7, 0x05, 0x0a, 0x10,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x56, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x0a, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x64, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x52, 0x0f, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x1a, 0xb5, 0x02, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x40,
	0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f,
	0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x1a,
	0xf3, 0x01, 0x0a, 0x06, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xd1, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3a, 0x0a, 0x0a,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x74, 0x63, 0x70, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x74, 0x63, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x73, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x55, 0x72, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x64, 0x62, 0x63, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x64, 0x62, 0x63, 0x55, 0x72, 0x69, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x64, 0x62, 0x63, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x64, 0x62, 0x63, 0x55, 0x72, 0x69, 0x22, 0xd8, 0x02, 0x0a, 0x15, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x73, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x74, 0x63, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x74, 0x63, 0x70, 0x50, 0x6f,
	0x72, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x73, 0x55, 0x72, 0x69, 0x12, 0x19,
	0x0a, 0x08, 0x6a, 0x64, 0x62, 0x63, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6a, 0x64, 0x62, 0x63, 0x55, 0x72, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x64, 0x62,
	0x63, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x64, 0x62,
	0x63, 0x55, 0x72, 0x69, 0x22, 0x4f, 0x0a, 0x1d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xaf, 0x01, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x49, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_doublecloud_clickhouse_v1_cluster_proto_rawDescOnce sync.Once
	file_doublecloud_clickhouse_v1_cluster_proto_rawDescData = file_doublecloud_clickhouse_v1_cluster_proto_rawDesc
)

func file_doublecloud_clickhouse_v1_cluster_proto_rawDescGZIP() []byte {
	file_doublecloud_clickhouse_v1_cluster_proto_rawDescOnce.Do(func() {
		file_doublecloud_clickhouse_v1_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(file_doublecloud_clickhouse_v1_cluster_proto_rawDescData)
	})
	return file_doublecloud_clickhouse_v1_cluster_proto_rawDescData
}

var file_doublecloud_clickhouse_v1_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_doublecloud_clickhouse_v1_cluster_proto_goTypes = []interface{}{
	(*Cluster)(nil),                       // 0: doublecloud.clickhouse.v1.Cluster
	(*ClusterResources)(nil),              // 1: doublecloud.clickhouse.v1.ClusterResources
	(*ConnectionInfo)(nil),                // 2: doublecloud.clickhouse.v1.ConnectionInfo
	(*PrivateConnectionInfo)(nil),         // 3: doublecloud.clickhouse.v1.PrivateConnectionInfo
	(*MetricsExporterConnectionInfo)(nil), // 4: doublecloud.clickhouse.v1.MetricsExporterConnectionInfo
	(*Host)(nil),                          // 5: doublecloud.clickhouse.v1.Host
	(*ClusterResources_Clickhouse)(nil),   // 6: doublecloud.clickhouse.v1.ClusterResources.Clickhouse
	(*ClusterResources_Keeper)(nil),       // 7: doublecloud.clickhouse.v1.ClusterResources.Keeper
	(*timestamppb.Timestamp)(nil),         // 8: google.protobuf.Timestamp
	(v1.ClusterStatus)(0),                 // 9: doublecloud.v1.ClusterStatus
	(*v1.Access)(nil),                     // 10: doublecloud.v1.Access
	(*v1.DataEncryption)(nil),             // 11: doublecloud.v1.DataEncryption
	(*ClickhouseConfig)(nil),              // 12: doublecloud.clickhouse.v1.ClickhouseConfig
	(*v1.MaintenanceWindow)(nil),          // 13: doublecloud.v1.MaintenanceWindow
	(*v1.MaintenanceOperation)(nil),       // 14: doublecloud.v1.MaintenanceOperation
	(*wrapperspb.Int64Value)(nil),         // 15: google.protobuf.Int64Value
	(v1.HostStatus)(0),                    // 16: doublecloud.v1.HostStatus
}
var file_doublecloud_clickhouse_v1_cluster_proto_depIdxs = []int32{
	8,  // 0: doublecloud.clickhouse.v1.Cluster.create_time:type_name -> google.protobuf.Timestamp
	9,  // 1: doublecloud.clickhouse.v1.Cluster.status:type_name -> doublecloud.v1.ClusterStatus
	1,  // 2: doublecloud.clickhouse.v1.Cluster.resources:type_name -> doublecloud.clickhouse.v1.ClusterResources
	2,  // 3: doublecloud.clickhouse.v1.Cluster.connection_info:type_name -> doublecloud.clickhouse.v1.ConnectionInfo
	10, // 4: doublecloud.clickhouse.v1.Cluster.access:type_name -> doublecloud.v1.Access
	3,  // 5: doublecloud.clickhouse.v1.Cluster.private_connection_info:type_name -> doublecloud.clickhouse.v1.PrivateConnectionInfo
	11, // 6: doublecloud.clickhouse.v1.Cluster.encryption:type_name -> doublecloud.v1.DataEncryption
	12, // 7: doublecloud.clickhouse.v1.Cluster.clickhouse_config:type_name -> doublecloud.clickhouse.v1.ClickhouseConfig
	13, // 8: doublecloud.clickhouse.v1.Cluster.maintenance_window:type_name -> doublecloud.v1.MaintenanceWindow
	14, // 9: doublecloud.clickhouse.v1.Cluster.maintenance_operation:type_name -> doublecloud.v1.MaintenanceOperation
	4,  // 10: doublecloud.clickhouse.v1.Cluster.metrics_exporter_connection_info:type_name -> doublecloud.clickhouse.v1.MetricsExporterConnectionInfo
	6,  // 11: doublecloud.clickhouse.v1.ClusterResources.clickhouse:type_name -> doublecloud.clickhouse.v1.ClusterResources.Clickhouse
	7,  // 12: doublecloud.clickhouse.v1.ClusterResources.dedicated_keeper:type_name -> doublecloud.clickhouse.v1.ClusterResources.Keeper
	15, // 13: doublecloud.clickhouse.v1.ConnectionInfo.https_port:type_name -> google.protobuf.Int64Value
	15, // 14: doublecloud.clickhouse.v1.ConnectionInfo.tcp_port_secure:type_name -> google.protobuf.Int64Value
	15, // 15: doublecloud.clickhouse.v1.PrivateConnectionInfo.https_port:type_name -> google.protobuf.Int64Value
	15, // 16: doublecloud.clickhouse.v1.PrivateConnectionInfo.tcp_port_secure:type_name -> google.protobuf.Int64Value
	16, // 17: doublecloud.clickhouse.v1.Host.status:type_name -> doublecloud.v1.HostStatus
	15, // 18: doublecloud.clickhouse.v1.ClusterResources.Clickhouse.disk_size:type_name -> google.protobuf.Int64Value
	15, // 19: doublecloud.clickhouse.v1.ClusterResources.Clickhouse.replica_count:type_name -> google.protobuf.Int64Value
	15, // 20: doublecloud.clickhouse.v1.ClusterResources.Clickhouse.shard_count:type_name -> google.protobuf.Int64Value
	15, // 21: doublecloud.clickhouse.v1.ClusterResources.Clickhouse.max_disk_size:type_name -> google.protobuf.Int64Value
	15, // 22: doublecloud.clickhouse.v1.ClusterResources.Keeper.disk_size:type_name -> google.protobuf.Int64Value
	15, // 23: doublecloud.clickhouse.v1.ClusterResources.Keeper.replica_count:type_name -> google.protobuf.Int64Value
	15, // 24: doublecloud.clickhouse.v1.ClusterResources.Keeper.max_disk_size:type_name -> google.protobuf.Int64Value
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_doublecloud_clickhouse_v1_cluster_proto_init() }
func file_doublecloud_clickhouse_v1_cluster_proto_init() {
	if File_doublecloud_clickhouse_v1_cluster_proto != nil {
		return
	}
	file_doublecloud_clickhouse_v1_config_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_doublecloud_clickhouse_v1_cluster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_cluster_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_cluster_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_cluster_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateConnectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_cluster_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsExporterConnectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_cluster_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Host); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_cluster_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterResources_Clickhouse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_clickhouse_v1_cluster_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterResources_Keeper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_doublecloud_clickhouse_v1_cluster_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_doublecloud_clickhouse_v1_cluster_proto_goTypes,
		DependencyIndexes: file_doublecloud_clickhouse_v1_cluster_proto_depIdxs,
		MessageInfos:      file_doublecloud_clickhouse_v1_cluster_proto_msgTypes,
	}.Build()
	File_doublecloud_clickhouse_v1_cluster_proto = out.File
	file_doublecloud_clickhouse_v1_cluster_proto_rawDesc = nil
	file_doublecloud_clickhouse_v1_cluster_proto_goTypes = nil
	file_doublecloud_clickhouse_v1_cluster_proto_depIdxs = nil
}
