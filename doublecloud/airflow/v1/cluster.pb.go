// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: doublecloud/airflow/v1/cluster.proto

package airflow

import (
	v1 "github.com/doublecloud/go-genproto/doublecloud/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Airflow cluster.
type Cluster struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Apache Airflow® cluster.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the project that the Apache Airflow® cluster belongs to.
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Type of the cloud where instances should be hosted.
	CloudType string `protobuf:"bytes,3,opt,name=cloud_type,json=cloudType,proto3" json:"cloud_type,omitempty"`
	// ID of the region to place instances.
	RegionId string `protobuf:"bytes,4,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// Creation timestamp.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Name of the Apache Airflow® cluster.
	// The name is unique within the project.
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the Apache Airflow® cluster.
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	// Current state of the cluster.
	Status v1.ClusterStatus `protobuf:"varint,8,opt,name=status,proto3,enum=doublecloud.v1.ClusterStatus" json:"status,omitempty"`
	// Resources allocated to Airflow cluster
	Resources *ClusterResources `protobuf:"bytes,9,opt,name=resources,proto3" json:"resources,omitempty"`
	// Connection information.
	ConnectionInfo *ConnectionInfo `protobuf:"bytes,10,opt,name=connection_info,json=connectionInfo,proto3" json:"connection_info,omitempty"`
	// External network access settings
	Access *v1.Access `protobuf:"bytes,11,opt,name=access,proto3" json:"access,omitempty"`
	// Configuration of the Apache Airflow® cluster.
	Config *AirflowConfig `protobuf:"bytes,12,opt,name=config,proto3" json:"config,omitempty"`
	// ID of the network that the Apache Airflow® cluster belongs to.
	NetworkId string `protobuf:"bytes,13,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// Window of maintenance operations.
	MaintenanceWindow *v1.MaintenanceWindow `protobuf:"bytes,14,opt,name=maintenance_window,json=maintenanceWindow,proto3" json:"maintenance_window,omitempty"`
	// Custom images remote image path and credentials.
	CrConnectionInfo *CrConnectionInfo `protobuf:"bytes,15,opt,name=cr_connection_info,json=crConnectionInfo,proto3" json:"cr_connection_info,omitempty"`
	// Status of managed image.
	ManagedImageStatus *ManagedImageStatus `protobuf:"bytes,16,opt,name=managed_image_status,json=managedImageStatus,proto3" json:"managed_image_status,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	mi := &file_doublecloud_airflow_v1_cluster_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_airflow_v1_cluster_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_doublecloud_airflow_v1_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *Cluster) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Cluster) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Cluster) GetCloudType() string {
	if x != nil {
		return x.CloudType
	}
	return ""
}

func (x *Cluster) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *Cluster) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Cluster) GetStatus() v1.ClusterStatus {
	if x != nil {
		return x.Status
	}
	return v1.ClusterStatus(0)
}

func (x *Cluster) GetResources() *ClusterResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Cluster) GetConnectionInfo() *ConnectionInfo {
	if x != nil {
		return x.ConnectionInfo
	}
	return nil
}

func (x *Cluster) GetAccess() *v1.Access {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *Cluster) GetConfig() *AirflowConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Cluster) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *Cluster) GetMaintenanceWindow() *v1.MaintenanceWindow {
	if x != nil {
		return x.MaintenanceWindow
	}
	return nil
}

func (x *Cluster) GetCrConnectionInfo() *CrConnectionInfo {
	if x != nil {
		return x.CrConnectionInfo
	}
	return nil
}

func (x *Cluster) GetManagedImageStatus() *ManagedImageStatus {
	if x != nil {
		return x.ManagedImageStatus
	}
	return nil
}

// AirflowEnvVariable passing to airflow cluster as system visible variable
type AirflowEnvVariable struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of environment variable
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Value of environment variable
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AirflowEnvVariable) Reset() {
	*x = AirflowEnvVariable{}
	mi := &file_doublecloud_airflow_v1_cluster_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AirflowEnvVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirflowEnvVariable) ProtoMessage() {}

func (x *AirflowEnvVariable) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_airflow_v1_cluster_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirflowEnvVariable.ProtoReflect.Descriptor instead.
func (*AirflowEnvVariable) Descriptor() ([]byte, []int) {
	return file_doublecloud_airflow_v1_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *AirflowEnvVariable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AirflowEnvVariable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Status of managed image.
type ManagedImageStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If not empty, describes the latest managed image build errors.
	BuildErrors string `protobuf:"bytes,1,opt,name=build_errors,json=buildErrors,proto3" json:"build_errors,omitempty"`
	// Currently applied requirements.txt.
	AppliedRequirementsTxt string `protobuf:"bytes,2,opt,name=applied_requirements_txt,json=appliedRequirementsTxt,proto3" json:"applied_requirements_txt,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ManagedImageStatus) Reset() {
	*x = ManagedImageStatus{}
	mi := &file_doublecloud_airflow_v1_cluster_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManagedImageStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedImageStatus) ProtoMessage() {}

func (x *ManagedImageStatus) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_airflow_v1_cluster_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedImageStatus.ProtoReflect.Descriptor instead.
func (*ManagedImageStatus) Descriptor() ([]byte, []int) {
	return file_doublecloud_airflow_v1_cluster_proto_rawDescGZIP(), []int{2}
}

func (x *ManagedImageStatus) GetBuildErrors() string {
	if x != nil {
		return x.BuildErrors
	}
	return ""
}

func (x *ManagedImageStatus) GetAppliedRequirementsTxt() string {
	if x != nil {
		return x.AppliedRequirementsTxt
	}
	return ""
}

// Resources allocated to Airflow cluster
type ClusterResources struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Airflow specific cluster resource config
	Airflow       *ClusterResources_Airflow `protobuf:"bytes,1,opt,name=airflow,proto3" json:"airflow,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterResources) Reset() {
	*x = ClusterResources{}
	mi := &file_doublecloud_airflow_v1_cluster_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterResources) ProtoMessage() {}

func (x *ClusterResources) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_airflow_v1_cluster_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterResources.ProtoReflect.Descriptor instead.
func (*ClusterResources) Descriptor() ([]byte, []int) {
	return file_doublecloud_airflow_v1_cluster_proto_rawDescGZIP(), []int{3}
}

func (x *ClusterResources) GetAirflow() *ClusterResources_Airflow {
	if x != nil {
		return x.Airflow
	}
	return nil
}

// Connection information.
type ConnectionInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Host to connect.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Airflow admin user.
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// Password for Airflow admin user.
	Password      string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectionInfo) Reset() {
	*x = ConnectionInfo{}
	mi := &file_doublecloud_airflow_v1_cluster_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionInfo) ProtoMessage() {}

func (x *ConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_airflow_v1_cluster_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionInfo.ProtoReflect.Descriptor instead.
func (*ConnectionInfo) Descriptor() ([]byte, []int) {
	return file_doublecloud_airflow_v1_cluster_proto_rawDescGZIP(), []int{4}
}

func (x *ConnectionInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ConnectionInfo) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ConnectionInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// Remote container registry connection information.
type CrConnectionInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path to upload custom images.
	RemoteImagePath string `protobuf:"bytes,1,opt,name=remote_image_path,json=remoteImagePath,proto3" json:"remote_image_path,omitempty"`
	// Container registry user.
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// Container registry password.
	Password      string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CrConnectionInfo) Reset() {
	*x = CrConnectionInfo{}
	mi := &file_doublecloud_airflow_v1_cluster_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CrConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrConnectionInfo) ProtoMessage() {}

func (x *CrConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_airflow_v1_cluster_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrConnectionInfo.ProtoReflect.Descriptor instead.
func (*CrConnectionInfo) Descriptor() ([]byte, []int) {
	return file_doublecloud_airflow_v1_cluster_proto_rawDescGZIP(), []int{5}
}

func (x *CrConnectionInfo) GetRemoteImagePath() string {
	if x != nil {
		return x.RemoteImagePath
	}
	return ""
}

func (x *CrConnectionInfo) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *CrConnectionInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// Git sync config
type SyncConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Git repository for Airflow DAGs
	RepoUrl string `protobuf:"bytes,1,opt,name=repo_url,json=repoUrl,proto3" json:"repo_url,omitempty"`
	// Git branch
	Branch string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	// Git revision
	Revision string `protobuf:"bytes,3,opt,name=revision,proto3" json:"revision,omitempty"`
	// Path of directory with DAGs
	DagsPath string `protobuf:"bytes,4,opt,name=dags_path,json=dagsPath,proto3" json:"dags_path,omitempty"`
	// Auth credentials for Git repo
	//
	// Types that are valid to be assigned to Credentials:
	//
	//	*SyncConfig_ApiCredentials
	Credentials   isSyncConfig_Credentials `protobuf_oneof:"credentials"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncConfig) Reset() {
	*x = SyncConfig{}
	mi := &file_doublecloud_airflow_v1_cluster_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncConfig) ProtoMessage() {}

func (x *SyncConfig) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_airflow_v1_cluster_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncConfig.ProtoReflect.Descriptor instead.
func (*SyncConfig) Descriptor() ([]byte, []int) {
	return file_doublecloud_airflow_v1_cluster_proto_rawDescGZIP(), []int{6}
}

func (x *SyncConfig) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *SyncConfig) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *SyncConfig) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *SyncConfig) GetDagsPath() string {
	if x != nil {
		return x.DagsPath
	}
	return ""
}

func (x *SyncConfig) GetCredentials() isSyncConfig_Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *SyncConfig) GetApiCredentials() *GitApiCredentials {
	if x != nil {
		if x, ok := x.Credentials.(*SyncConfig_ApiCredentials); ok {
			return x.ApiCredentials
		}
	}
	return nil
}

type isSyncConfig_Credentials interface {
	isSyncConfig_Credentials()
}

type SyncConfig_ApiCredentials struct {
	ApiCredentials *GitApiCredentials `protobuf:"bytes,5,opt,name=api_credentials,json=apiCredentials,proto3,oneof"`
}

func (*SyncConfig_ApiCredentials) isSyncConfig_Credentials() {}

// Git API Credentials
type GitApiCredentials struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Username for repository auth
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// Password for repository auth
	Password      string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitApiCredentials) Reset() {
	*x = GitApiCredentials{}
	mi := &file_doublecloud_airflow_v1_cluster_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitApiCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitApiCredentials) ProtoMessage() {}

func (x *GitApiCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_airflow_v1_cluster_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitApiCredentials.ProtoReflect.Descriptor instead.
func (*GitApiCredentials) Descriptor() ([]byte, []int) {
	return file_doublecloud_airflow_v1_cluster_proto_rawDescGZIP(), []int{7}
}

func (x *GitApiCredentials) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GitApiCredentials) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// Configuration for Apache Airflow® in the cluster.
type AirflowConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version id of Apache Airflow®.
	VersionId string `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// Git sync config
	GitSync *SyncConfig `protobuf:"bytes,2,opt,name=git_sync,json=gitSync,proto3" json:"git_sync,omitempty"`
	// Custom image digest, Apache Airflow® version must match current version_id.
	CustomImageDigest string `protobuf:"bytes,3,opt,name=custom_image_digest,json=customImageDigest,proto3" json:"custom_image_digest,omitempty"`
	// Target requirements.txt content to construct and apply a custom image in a
	// managed way.
	ManagedRequirementsTxt string `protobuf:"bytes,4,opt,name=managed_requirements_txt,json=managedRequirementsTxt,proto3" json:"managed_requirements_txt,omitempty"`
	// Defines a service account that is avaialble for DC API auth from workers code.
	UserServiceAccountId string `protobuf:"bytes,5,opt,name=user_service_account_id,json=userServiceAccountId,proto3" json:"user_service_account_id,omitempty"`
	// Env variables that passing to your cluster
	EnvVars       []*AirflowEnvVariable `protobuf:"bytes,6,rep,name=env_vars,json=envVars,proto3" json:"env_vars,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AirflowConfig) Reset() {
	*x = AirflowConfig{}
	mi := &file_doublecloud_airflow_v1_cluster_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AirflowConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirflowConfig) ProtoMessage() {}

func (x *AirflowConfig) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_airflow_v1_cluster_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirflowConfig.ProtoReflect.Descriptor instead.
func (*AirflowConfig) Descriptor() ([]byte, []int) {
	return file_doublecloud_airflow_v1_cluster_proto_rawDescGZIP(), []int{8}
}

func (x *AirflowConfig) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *AirflowConfig) GetGitSync() *SyncConfig {
	if x != nil {
		return x.GitSync
	}
	return nil
}

func (x *AirflowConfig) GetCustomImageDigest() string {
	if x != nil {
		return x.CustomImageDigest
	}
	return ""
}

func (x *AirflowConfig) GetManagedRequirementsTxt() string {
	if x != nil {
		return x.ManagedRequirementsTxt
	}
	return ""
}

func (x *AirflowConfig) GetUserServiceAccountId() string {
	if x != nil {
		return x.UserServiceAccountId
	}
	return ""
}

func (x *AirflowConfig) GetEnvVars() []*AirflowEnvVariable {
	if x != nil {
		return x.EnvVars
	}
	return nil
}

type ClusterResources_Airflow struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Max number of Airflow workers
	MaxWorkerCount *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=max_worker_count,json=maxWorkerCount,proto3" json:"max_worker_count,omitempty"`
	// Flavor of Airflow cluster environment
	EnvironmentFlavor string `protobuf:"bytes,2,opt,name=environment_flavor,json=environmentFlavor,proto3" json:"environment_flavor,omitempty"`
	// Min number of Airflow workers
	MinWorkerCount *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=min_worker_count,json=minWorkerCount,proto3" json:"min_worker_count,omitempty"`
	// Concurrency of Airflow workers
	WorkerConcurrency *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=worker_concurrency,json=workerConcurrency,proto3" json:"worker_concurrency,omitempty"`
	// Disk size of Airflow workers (GiB)
	WorkerDiskSize *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=worker_disk_size,json=workerDiskSize,proto3" json:"worker_disk_size,omitempty"`
	// Preset of Airflow cluster workers
	WorkerPreset  string `protobuf:"bytes,6,opt,name=worker_preset,json=workerPreset,proto3" json:"worker_preset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterResources_Airflow) Reset() {
	*x = ClusterResources_Airflow{}
	mi := &file_doublecloud_airflow_v1_cluster_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterResources_Airflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterResources_Airflow) ProtoMessage() {}

func (x *ClusterResources_Airflow) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_airflow_v1_cluster_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterResources_Airflow.ProtoReflect.Descriptor instead.
func (*ClusterResources_Airflow) Descriptor() ([]byte, []int) {
	return file_doublecloud_airflow_v1_cluster_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ClusterResources_Airflow) GetMaxWorkerCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxWorkerCount
	}
	return nil
}

func (x *ClusterResources_Airflow) GetEnvironmentFlavor() string {
	if x != nil {
		return x.EnvironmentFlavor
	}
	return ""
}

func (x *ClusterResources_Airflow) GetMinWorkerCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.MinWorkerCount
	}
	return nil
}

func (x *ClusterResources_Airflow) GetWorkerConcurrency() *wrapperspb.Int64Value {
	if x != nil {
		return x.WorkerConcurrency
	}
	return nil
}

func (x *ClusterResources_Airflow) GetWorkerDiskSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.WorkerDiskSize
	}
	return nil
}

func (x *ClusterResources_Airflow) GetWorkerPreset() string {
	if x != nil {
		return x.WorkerPreset
	}
	return ""
}

var File_doublecloud_airflow_v1_cluster_proto protoreflect.FileDescriptor

var file_doublecloud_airflow_v1_cluster_proto_rawDesc = []byte{
	0x0a, 0x24, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x69,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xcd, 0x06, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x46, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x11, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x10, 0x63, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x5c, 0x0a, 0x14, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x3e, 0x0a, 0x12, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x71, 0x0a, 0x12, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x74, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54,
	0x78, 0x74, 0x22, 0xdf, 0x03, 0x0a, 0x10, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x07, 0x61, 0x69, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x07, 0x61, 0x69, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x1a, 0xfe, 0x02, 0x0a, 0x07, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x12,
	0x45, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6d, 0x69,
	0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x12,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x45, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x22, 0x54, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x6e, 0x0a, 0x10, 0x43, 0x72,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a,
	0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xdd, 0x01, 0x0a, 0x0a, 0x53,
	0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70,
	0x6f, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x67, 0x73,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x67,
	0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x54, 0x0a, 0x0f, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x41, 0x70, 0x69, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x70, 0x69,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x4b, 0x0a, 0x11, 0x47, 0x69,
	0x74, 0x41, 0x70, 0x69, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xd5, 0x02, 0x0a, 0x0d, 0x41, 0x69, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x67, 0x69, 0x74, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07,
	0x67, 0x69, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x74, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x78,
	0x74, 0x12, 0x35, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x08, 0x65, 0x6e, 0x76, 0x5f,
	0x76, 0x61, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x76, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x42,
	0x43, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x69, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_doublecloud_airflow_v1_cluster_proto_rawDescOnce sync.Once
	file_doublecloud_airflow_v1_cluster_proto_rawDescData = file_doublecloud_airflow_v1_cluster_proto_rawDesc
)

func file_doublecloud_airflow_v1_cluster_proto_rawDescGZIP() []byte {
	file_doublecloud_airflow_v1_cluster_proto_rawDescOnce.Do(func() {
		file_doublecloud_airflow_v1_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(file_doublecloud_airflow_v1_cluster_proto_rawDescData)
	})
	return file_doublecloud_airflow_v1_cluster_proto_rawDescData
}

var file_doublecloud_airflow_v1_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_doublecloud_airflow_v1_cluster_proto_goTypes = []any{
	(*Cluster)(nil),                  // 0: doublecloud.airflow.v1.Cluster
	(*AirflowEnvVariable)(nil),       // 1: doublecloud.airflow.v1.AirflowEnvVariable
	(*ManagedImageStatus)(nil),       // 2: doublecloud.airflow.v1.ManagedImageStatus
	(*ClusterResources)(nil),         // 3: doublecloud.airflow.v1.ClusterResources
	(*ConnectionInfo)(nil),           // 4: doublecloud.airflow.v1.ConnectionInfo
	(*CrConnectionInfo)(nil),         // 5: doublecloud.airflow.v1.CrConnectionInfo
	(*SyncConfig)(nil),               // 6: doublecloud.airflow.v1.SyncConfig
	(*GitApiCredentials)(nil),        // 7: doublecloud.airflow.v1.GitApiCredentials
	(*AirflowConfig)(nil),            // 8: doublecloud.airflow.v1.AirflowConfig
	(*ClusterResources_Airflow)(nil), // 9: doublecloud.airflow.v1.ClusterResources.Airflow
	(*timestamppb.Timestamp)(nil),    // 10: google.protobuf.Timestamp
	(v1.ClusterStatus)(0),            // 11: doublecloud.v1.ClusterStatus
	(*v1.Access)(nil),                // 12: doublecloud.v1.Access
	(*v1.MaintenanceWindow)(nil),     // 13: doublecloud.v1.MaintenanceWindow
	(*wrapperspb.Int64Value)(nil),    // 14: google.protobuf.Int64Value
}
var file_doublecloud_airflow_v1_cluster_proto_depIdxs = []int32{
	10, // 0: doublecloud.airflow.v1.Cluster.create_time:type_name -> google.protobuf.Timestamp
	11, // 1: doublecloud.airflow.v1.Cluster.status:type_name -> doublecloud.v1.ClusterStatus
	3,  // 2: doublecloud.airflow.v1.Cluster.resources:type_name -> doublecloud.airflow.v1.ClusterResources
	4,  // 3: doublecloud.airflow.v1.Cluster.connection_info:type_name -> doublecloud.airflow.v1.ConnectionInfo
	12, // 4: doublecloud.airflow.v1.Cluster.access:type_name -> doublecloud.v1.Access
	8,  // 5: doublecloud.airflow.v1.Cluster.config:type_name -> doublecloud.airflow.v1.AirflowConfig
	13, // 6: doublecloud.airflow.v1.Cluster.maintenance_window:type_name -> doublecloud.v1.MaintenanceWindow
	5,  // 7: doublecloud.airflow.v1.Cluster.cr_connection_info:type_name -> doublecloud.airflow.v1.CrConnectionInfo
	2,  // 8: doublecloud.airflow.v1.Cluster.managed_image_status:type_name -> doublecloud.airflow.v1.ManagedImageStatus
	9,  // 9: doublecloud.airflow.v1.ClusterResources.airflow:type_name -> doublecloud.airflow.v1.ClusterResources.Airflow
	7,  // 10: doublecloud.airflow.v1.SyncConfig.api_credentials:type_name -> doublecloud.airflow.v1.GitApiCredentials
	6,  // 11: doublecloud.airflow.v1.AirflowConfig.git_sync:type_name -> doublecloud.airflow.v1.SyncConfig
	1,  // 12: doublecloud.airflow.v1.AirflowConfig.env_vars:type_name -> doublecloud.airflow.v1.AirflowEnvVariable
	14, // 13: doublecloud.airflow.v1.ClusterResources.Airflow.max_worker_count:type_name -> google.protobuf.Int64Value
	14, // 14: doublecloud.airflow.v1.ClusterResources.Airflow.min_worker_count:type_name -> google.protobuf.Int64Value
	14, // 15: doublecloud.airflow.v1.ClusterResources.Airflow.worker_concurrency:type_name -> google.protobuf.Int64Value
	14, // 16: doublecloud.airflow.v1.ClusterResources.Airflow.worker_disk_size:type_name -> google.protobuf.Int64Value
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_doublecloud_airflow_v1_cluster_proto_init() }
func file_doublecloud_airflow_v1_cluster_proto_init() {
	if File_doublecloud_airflow_v1_cluster_proto != nil {
		return
	}
	file_doublecloud_airflow_v1_cluster_proto_msgTypes[6].OneofWrappers = []any{
		(*SyncConfig_ApiCredentials)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_doublecloud_airflow_v1_cluster_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_doublecloud_airflow_v1_cluster_proto_goTypes,
		DependencyIndexes: file_doublecloud_airflow_v1_cluster_proto_depIdxs,
		MessageInfos:      file_doublecloud_airflow_v1_cluster_proto_msgTypes,
	}.Build()
	File_doublecloud_airflow_v1_cluster_proto = out.File
	file_doublecloud_airflow_v1_cluster_proto_rawDesc = nil
	file_doublecloud_airflow_v1_cluster_proto_goTypes = nil
	file_doublecloud_airflow_v1_cluster_proto_depIdxs = nil
}
