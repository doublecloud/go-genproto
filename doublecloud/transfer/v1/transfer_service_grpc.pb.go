// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: doublecloud/transfer/v1/transfer_service.proto

package transfer

import (
	context "context"
	v1 "github.com/doublecloud/go-genproto/doublecloud/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TransferService_Create_FullMethodName                             = "/doublecloud.transfer.v1.TransferService/Create"
	TransferService_Update_FullMethodName                             = "/doublecloud.transfer.v1.TransferService/Update"
	TransferService_Delete_FullMethodName                             = "/doublecloud.transfer.v1.TransferService/Delete"
	TransferService_List_FullMethodName                               = "/doublecloud.transfer.v1.TransferService/List"
	TransferService_Get_FullMethodName                                = "/doublecloud.transfer.v1.TransferService/Get"
	TransferService_Deactivate_FullMethodName                         = "/doublecloud.transfer.v1.TransferService/Deactivate"
	TransferService_Activate_FullMethodName                           = "/doublecloud.transfer.v1.TransferService/Activate"
	TransferService_GetMetrics_FullMethodName                         = "/doublecloud.transfer.v1.TransferService/GetMetrics"
	TransferService_GetMetricExporterConnectionInfo_FullMethodName    = "/doublecloud.transfer.v1.TransferService/GetMetricExporterConnectionInfo"
	TransferService_DeleteMetricExporterConnectionInfo_FullMethodName = "/doublecloud.transfer.v1.TransferService/DeleteMetricExporterConnectionInfo"
)

// TransferServiceClient is the client API for TransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransferServiceClient interface {
	Create(ctx context.Context, in *CreateTransferRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	Update(ctx context.Context, in *UpdateTransferRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	Delete(ctx context.Context, in *DeleteTransferRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	List(ctx context.Context, in *ListTransfersRequest, opts ...grpc.CallOption) (*ListTransfersResponse, error)
	Get(ctx context.Context, in *GetTransferRequest, opts ...grpc.CallOption) (*Transfer, error)
	Deactivate(ctx context.Context, in *DeactivateTransferRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	Activate(ctx context.Context, in *ActivateTransferRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	// Allows scraping of metrics by a prometheus scraper
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*TransferMetrics, error)
	GetMetricExporterConnectionInfo(ctx context.Context, in *MetricExporterConnectionInfoRequest, opts ...grpc.CallOption) (*MetricExporterConnectionInfoMetadata, error)
	DeleteMetricExporterConnectionInfo(ctx context.Context, in *DeleteExporterConnectionInfoRequest, opts ...grpc.CallOption) (*v1.Operation, error)
}

type transferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransferServiceClient(cc grpc.ClientConnInterface) TransferServiceClient {
	return &transferServiceClient{cc}
}

func (c *transferServiceClient) Create(ctx context.Context, in *CreateTransferRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, TransferService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) Update(ctx context.Context, in *UpdateTransferRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, TransferService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) Delete(ctx context.Context, in *DeleteTransferRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, TransferService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) List(ctx context.Context, in *ListTransfersRequest, opts ...grpc.CallOption) (*ListTransfersResponse, error) {
	out := new(ListTransfersResponse)
	err := c.cc.Invoke(ctx, TransferService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) Get(ctx context.Context, in *GetTransferRequest, opts ...grpc.CallOption) (*Transfer, error) {
	out := new(Transfer)
	err := c.cc.Invoke(ctx, TransferService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) Deactivate(ctx context.Context, in *DeactivateTransferRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, TransferService_Deactivate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) Activate(ctx context.Context, in *ActivateTransferRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, TransferService_Activate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*TransferMetrics, error) {
	out := new(TransferMetrics)
	err := c.cc.Invoke(ctx, TransferService_GetMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) GetMetricExporterConnectionInfo(ctx context.Context, in *MetricExporterConnectionInfoRequest, opts ...grpc.CallOption) (*MetricExporterConnectionInfoMetadata, error) {
	out := new(MetricExporterConnectionInfoMetadata)
	err := c.cc.Invoke(ctx, TransferService_GetMetricExporterConnectionInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) DeleteMetricExporterConnectionInfo(ctx context.Context, in *DeleteExporterConnectionInfoRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, TransferService_DeleteMetricExporterConnectionInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransferServiceServer is the server API for TransferService service.
// All implementations must embed UnimplementedTransferServiceServer
// for forward compatibility
type TransferServiceServer interface {
	Create(context.Context, *CreateTransferRequest) (*v1.Operation, error)
	Update(context.Context, *UpdateTransferRequest) (*v1.Operation, error)
	Delete(context.Context, *DeleteTransferRequest) (*v1.Operation, error)
	List(context.Context, *ListTransfersRequest) (*ListTransfersResponse, error)
	Get(context.Context, *GetTransferRequest) (*Transfer, error)
	Deactivate(context.Context, *DeactivateTransferRequest) (*v1.Operation, error)
	Activate(context.Context, *ActivateTransferRequest) (*v1.Operation, error)
	// Allows scraping of metrics by a prometheus scraper
	GetMetrics(context.Context, *GetMetricsRequest) (*TransferMetrics, error)
	GetMetricExporterConnectionInfo(context.Context, *MetricExporterConnectionInfoRequest) (*MetricExporterConnectionInfoMetadata, error)
	DeleteMetricExporterConnectionInfo(context.Context, *DeleteExporterConnectionInfoRequest) (*v1.Operation, error)
	mustEmbedUnimplementedTransferServiceServer()
}

// UnimplementedTransferServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransferServiceServer struct {
}

func (UnimplementedTransferServiceServer) Create(context.Context, *CreateTransferRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTransferServiceServer) Update(context.Context, *UpdateTransferRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTransferServiceServer) Delete(context.Context, *DeleteTransferRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTransferServiceServer) List(context.Context, *ListTransfersRequest) (*ListTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTransferServiceServer) Get(context.Context, *GetTransferRequest) (*Transfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTransferServiceServer) Deactivate(context.Context, *DeactivateTransferRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deactivate not implemented")
}
func (UnimplementedTransferServiceServer) Activate(context.Context, *ActivateTransferRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}
func (UnimplementedTransferServiceServer) GetMetrics(context.Context, *GetMetricsRequest) (*TransferMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedTransferServiceServer) GetMetricExporterConnectionInfo(context.Context, *MetricExporterConnectionInfoRequest) (*MetricExporterConnectionInfoMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricExporterConnectionInfo not implemented")
}
func (UnimplementedTransferServiceServer) DeleteMetricExporterConnectionInfo(context.Context, *DeleteExporterConnectionInfoRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetricExporterConnectionInfo not implemented")
}
func (UnimplementedTransferServiceServer) mustEmbedUnimplementedTransferServiceServer() {}

// UnsafeTransferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransferServiceServer will
// result in compilation errors.
type UnsafeTransferServiceServer interface {
	mustEmbedUnimplementedTransferServiceServer()
}

func RegisterTransferServiceServer(s grpc.ServiceRegistrar, srv TransferServiceServer) {
	s.RegisterService(&TransferService_ServiceDesc, srv)
}

func _TransferService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).Create(ctx, req.(*CreateTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).Update(ctx, req.(*UpdateTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).Delete(ctx, req.(*DeleteTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).List(ctx, req.(*ListTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).Get(ctx, req.(*GetTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_Deactivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).Deactivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_Deactivate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).Deactivate(ctx, req.(*DeactivateTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_Activate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).Activate(ctx, req.(*ActivateTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).GetMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_GetMetricExporterConnectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricExporterConnectionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).GetMetricExporterConnectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_GetMetricExporterConnectionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).GetMetricExporterConnectionInfo(ctx, req.(*MetricExporterConnectionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_DeleteMetricExporterConnectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExporterConnectionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).DeleteMetricExporterConnectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_DeleteMetricExporterConnectionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).DeleteMetricExporterConnectionInfo(ctx, req.(*DeleteExporterConnectionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransferService_ServiceDesc is the grpc.ServiceDesc for TransferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "doublecloud.transfer.v1.TransferService",
	HandlerType: (*TransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TransferService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TransferService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TransferService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _TransferService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TransferService_Get_Handler,
		},
		{
			MethodName: "Deactivate",
			Handler:    _TransferService_Deactivate_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _TransferService_Activate_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _TransferService_GetMetrics_Handler,
		},
		{
			MethodName: "GetMetricExporterConnectionInfo",
			Handler:    _TransferService_GetMetricExporterConnectionInfo_Handler,
		},
		{
			MethodName: "DeleteMetricExporterConnectionInfo",
			Handler:    _TransferService_DeleteMetricExporterConnectionInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "doublecloud/transfer/v1/transfer_service.proto",
}
