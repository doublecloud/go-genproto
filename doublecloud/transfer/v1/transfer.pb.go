// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: doublecloud/transfer/v1/transfer.proto

package transfer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransferType int32

const (
	TransferType_TRANSFER_TYPE_UNSPECIFIED TransferType = 0
	// Snapshot and increment
	TransferType_SNAPSHOT_AND_INCREMENT TransferType = 1
	// Snapshot
	TransferType_SNAPSHOT_ONLY TransferType = 2
	// Increment
	TransferType_INCREMENT_ONLY TransferType = 3
)

// Enum value maps for TransferType.
var (
	TransferType_name = map[int32]string{
		0: "TRANSFER_TYPE_UNSPECIFIED",
		1: "SNAPSHOT_AND_INCREMENT",
		2: "SNAPSHOT_ONLY",
		3: "INCREMENT_ONLY",
	}
	TransferType_value = map[string]int32{
		"TRANSFER_TYPE_UNSPECIFIED": 0,
		"SNAPSHOT_AND_INCREMENT":    1,
		"SNAPSHOT_ONLY":             2,
		"INCREMENT_ONLY":            3,
	}
)

func (x TransferType) Enum() *TransferType {
	p := new(TransferType)
	*p = x
	return p
}

func (x TransferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferType) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_transfer_v1_transfer_proto_enumTypes[0].Descriptor()
}

func (TransferType) Type() protoreflect.EnumType {
	return &file_doublecloud_transfer_v1_transfer_proto_enumTypes[0]
}

func (x TransferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferType.Descriptor instead.
func (TransferType) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{0}
}

type TransferStatus int32

const (
	TransferStatus_TRANSFER_STATUS_UNSPECIFIED TransferStatus = 0
	// Transfer does some work before running
	TransferStatus_CREATING TransferStatus = 1
	// Transfer created but not started by user
	TransferStatus_CREATED TransferStatus = 2
	// Transfer currently doing replication work
	TransferStatus_RUNNING TransferStatus = 3
	// Transfer shutdown
	TransferStatus_STOPPING TransferStatus = 4
	// Transfer stopped by user
	TransferStatus_STOPPED TransferStatus = 5
	// Transfer stopped by system
	TransferStatus_ERROR TransferStatus = 6
	// Transfer copy snapshot
	TransferStatus_SNAPSHOTTING TransferStatus = 7
	// Transfer reach terminal phase
	TransferStatus_DONE TransferStatus = 8
)

// Enum value maps for TransferStatus.
var (
	TransferStatus_name = map[int32]string{
		0: "TRANSFER_STATUS_UNSPECIFIED",
		1: "CREATING",
		2: "CREATED",
		3: "RUNNING",
		4: "STOPPING",
		5: "STOPPED",
		6: "ERROR",
		7: "SNAPSHOTTING",
		8: "DONE",
	}
	TransferStatus_value = map[string]int32{
		"TRANSFER_STATUS_UNSPECIFIED": 0,
		"CREATING":                    1,
		"CREATED":                     2,
		"RUNNING":                     3,
		"STOPPING":                    4,
		"STOPPED":                     5,
		"ERROR":                       6,
		"SNAPSHOTTING":                7,
		"DONE":                        8,
	}
)

func (x TransferStatus) Enum() *TransferStatus {
	p := new(TransferStatus)
	*p = x
	return p
}

func (x TransferStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_transfer_v1_transfer_proto_enumTypes[1].Descriptor()
}

func (TransferStatus) Type() protoreflect.EnumType {
	return &file_doublecloud_transfer_v1_transfer_proto_enumTypes[1]
}

func (x TransferStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferStatus.Descriptor instead.
func (TransferStatus) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{1}
}

type Flavor int32

const (
	Flavor_FLAVOR_UNSPECIFIED Flavor = 0
	Flavor_TINY               Flavor = 4
	Flavor_SMALL              Flavor = 1
	Flavor_MEDIUM             Flavor = 2
	Flavor_LARGE              Flavor = 3
)

// Enum value maps for Flavor.
var (
	Flavor_name = map[int32]string{
		0: "FLAVOR_UNSPECIFIED",
		4: "TINY",
		1: "SMALL",
		2: "MEDIUM",
		3: "LARGE",
	}
	Flavor_value = map[string]int32{
		"FLAVOR_UNSPECIFIED": 0,
		"TINY":               4,
		"SMALL":              1,
		"MEDIUM":             2,
		"LARGE":              3,
	}
)

func (x Flavor) Enum() *Flavor {
	p := new(Flavor)
	*p = x
	return p
}

func (x Flavor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Flavor) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_transfer_v1_transfer_proto_enumTypes[2].Descriptor()
}

func (Flavor) Type() protoreflect.EnumType {
	return &file_doublecloud_transfer_v1_transfer_proto_enumTypes[2]
}

func (x Flavor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Flavor.Descriptor instead.
func (Flavor) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{2}
}

type DBTTransformer_Operation int32

const (
	DBTTransformer_OPERATION_UNSPECIFIED DBTTransformer_Operation = 0
	DBTTransformer_OPERATION_BUILD       DBTTransformer_Operation = 1
	DBTTransformer_OPERATION_COMPILE     DBTTransformer_Operation = 2
	DBTTransformer_OPERATION_DEBUG       DBTTransformer_Operation = 3
	DBTTransformer_OPERATION_PARSE       DBTTransformer_Operation = 4
	DBTTransformer_OPERATION_RUN         DBTTransformer_Operation = 5
	DBTTransformer_OPERATION_SEED        DBTTransformer_Operation = 6
	DBTTransformer_OPERATION_SNAPSHOT    DBTTransformer_Operation = 7
	DBTTransformer_OPERATION_TEST        DBTTransformer_Operation = 8
)

// Enum value maps for DBTTransformer_Operation.
var (
	DBTTransformer_Operation_name = map[int32]string{
		0: "OPERATION_UNSPECIFIED",
		1: "OPERATION_BUILD",
		2: "OPERATION_COMPILE",
		3: "OPERATION_DEBUG",
		4: "OPERATION_PARSE",
		5: "OPERATION_RUN",
		6: "OPERATION_SEED",
		7: "OPERATION_SNAPSHOT",
		8: "OPERATION_TEST",
	}
	DBTTransformer_Operation_value = map[string]int32{
		"OPERATION_UNSPECIFIED": 0,
		"OPERATION_BUILD":       1,
		"OPERATION_COMPILE":     2,
		"OPERATION_DEBUG":       3,
		"OPERATION_PARSE":       4,
		"OPERATION_RUN":         5,
		"OPERATION_SEED":        6,
		"OPERATION_SNAPSHOT":    7,
		"OPERATION_TEST":        8,
	}
)

func (x DBTTransformer_Operation) Enum() *DBTTransformer_Operation {
	p := new(DBTTransformer_Operation)
	*p = x
	return p
}

func (x DBTTransformer_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DBTTransformer_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_transfer_v1_transfer_proto_enumTypes[3].Descriptor()
}

func (DBTTransformer_Operation) Type() protoreflect.EnumType {
	return &file_doublecloud_transfer_v1_transfer_proto_enumTypes[3]
}

func (x DBTTransformer_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DBTTransformer_Operation.Descriptor instead.
func (DBTTransformer_Operation) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{11, 0}
}

// Transfer core entity
type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectId      string            `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Name           string            `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description    string            `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Labels         map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Source         *Endpoint         `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`
	Target         *Endpoint         `protobuf:"bytes,8,opt,name=target,proto3" json:"target,omitempty"`
	Runtime        *Runtime          `protobuf:"bytes,9,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Status         TransferStatus    `protobuf:"varint,10,opt,name=status,proto3,enum=doublecloud.transfer.v1.TransferStatus" json:"status,omitempty"`
	Type           TransferType      `protobuf:"varint,12,opt,name=type,proto3,enum=doublecloud.transfer.v1.TransferType" json:"type,omitempty"`
	Warning        string            `protobuf:"bytes,15,opt,name=warning,proto3" json:"warning,omitempty"`
	Transformation *Transformation   `protobuf:"bytes,17,opt,name=transformation,proto3" json:"transformation,omitempty"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{0}
}

func (x *Transfer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Transfer) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Transfer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Transfer) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Transfer) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Transfer) GetSource() *Endpoint {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Transfer) GetTarget() *Endpoint {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Transfer) GetRuntime() *Runtime {
	if x != nil {
		return x.Runtime
	}
	return nil
}

func (x *Transfer) GetStatus() TransferStatus {
	if x != nil {
		return x.Status
	}
	return TransferStatus_TRANSFER_STATUS_UNSPECIFIED
}

func (x *Transfer) GetType() TransferType {
	if x != nil {
		return x.Type
	}
	return TransferType_TRANSFER_TYPE_UNSPECIFIED
}

func (x *Transfer) GetWarning() string {
	if x != nil {
		return x.Warning
	}
	return ""
}

func (x *Transfer) GetTransformation() *Transformation {
	if x != nil {
		return x.Transformation
	}
	return nil
}

type Runtime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Runtime:
	//
	//	*Runtime_ServerlessRuntime
	//	*Runtime_DedicatedRuntime
	Runtime isRuntime_Runtime `protobuf_oneof:"runtime"`
}

func (x *Runtime) Reset() {
	*x = Runtime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Runtime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Runtime) ProtoMessage() {}

func (x *Runtime) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Runtime.ProtoReflect.Descriptor instead.
func (*Runtime) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{1}
}

func (m *Runtime) GetRuntime() isRuntime_Runtime {
	if m != nil {
		return m.Runtime
	}
	return nil
}

func (x *Runtime) GetServerlessRuntime() *ServerlessRuntime {
	if x, ok := x.GetRuntime().(*Runtime_ServerlessRuntime); ok {
		return x.ServerlessRuntime
	}
	return nil
}

func (x *Runtime) GetDedicatedRuntime() *DedicatedRuntime {
	if x, ok := x.GetRuntime().(*Runtime_DedicatedRuntime); ok {
		return x.DedicatedRuntime
	}
	return nil
}

type isRuntime_Runtime interface {
	isRuntime_Runtime()
}

type Runtime_ServerlessRuntime struct {
	ServerlessRuntime *ServerlessRuntime `protobuf:"bytes,5,opt,name=serverless_runtime,json=serverlessRuntime,proto3,oneof"`
}

type Runtime_DedicatedRuntime struct {
	DedicatedRuntime *DedicatedRuntime `protobuf:"bytes,6,opt,name=dedicated_runtime,json=dedicatedRuntime,proto3,oneof"`
}

func (*Runtime_ServerlessRuntime) isRuntime_Runtime() {}

func (*Runtime_DedicatedRuntime) isRuntime_Runtime() {}

type ServerlessRuntime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobCount int64 `protobuf:"varint,2,opt,name=job_count,json=jobCount,proto3" json:"job_count,omitempty"`
}

func (x *ServerlessRuntime) Reset() {
	*x = ServerlessRuntime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerlessRuntime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerlessRuntime) ProtoMessage() {}

func (x *ServerlessRuntime) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerlessRuntime.ProtoReflect.Descriptor instead.
func (*ServerlessRuntime) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{2}
}

func (x *ServerlessRuntime) GetJobCount() int64 {
	if x != nil {
		return x.JobCount
	}
	return 0
}

type DedicatedRuntime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flavor   Flavor    `protobuf:"varint,2,opt,name=flavor,proto3,enum=doublecloud.transfer.v1.Flavor" json:"flavor,omitempty"`
	Settings *Settings `protobuf:"bytes,8,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *DedicatedRuntime) Reset() {
	*x = DedicatedRuntime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DedicatedRuntime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DedicatedRuntime) ProtoMessage() {}

func (x *DedicatedRuntime) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DedicatedRuntime.ProtoReflect.Descriptor instead.
func (*DedicatedRuntime) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{3}
}

func (x *DedicatedRuntime) GetFlavor() Flavor {
	if x != nil {
		return x.Flavor
	}
	return Flavor_FLAVOR_UNSPECIFIED
}

func (x *DedicatedRuntime) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Settings:
	//
	//	*Settings_AutoSettings
	//	*Settings_ManualSettings
	Settings isSettings_Settings `protobuf_oneof:"settings"`
}

func (x *Settings) Reset() {
	*x = Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings) ProtoMessage() {}

func (x *Settings) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings.ProtoReflect.Descriptor instead.
func (*Settings) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{4}
}

func (m *Settings) GetSettings() isSettings_Settings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (x *Settings) GetAutoSettings() *AutoSettings {
	if x, ok := x.GetSettings().(*Settings_AutoSettings); ok {
		return x.AutoSettings
	}
	return nil
}

func (x *Settings) GetManualSettings() *ManualSettings {
	if x, ok := x.GetSettings().(*Settings_ManualSettings); ok {
		return x.ManualSettings
	}
	return nil
}

type isSettings_Settings interface {
	isSettings_Settings()
}

type Settings_AutoSettings struct {
	AutoSettings *AutoSettings `protobuf:"bytes,1,opt,name=auto_settings,json=autoSettings,proto3,oneof"`
}

type Settings_ManualSettings struct {
	ManualSettings *ManualSettings `protobuf:"bytes,2,opt,name=manual_settings,json=manualSettings,proto3,oneof"`
}

func (*Settings_AutoSettings) isSettings_Settings() {}

func (*Settings_ManualSettings) isSettings_Settings() {}

type AutoSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AutoSettings) Reset() {
	*x = AutoSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoSettings) ProtoMessage() {}

func (x *AutoSettings) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoSettings.ProtoReflect.Descriptor instead.
func (*AutoSettings) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{5}
}

type ManualSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkId string `protobuf:"bytes,4,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
}

func (x *ManualSettings) Reset() {
	*x = ManualSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualSettings) ProtoMessage() {}

func (x *ManualSettings) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualSettings.ProtoReflect.Descriptor instead.
func (*ManualSettings) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{6}
}

func (x *ManualSettings) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

type TablesFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeTables []string `protobuf:"bytes,1,rep,name=include_tables,json=includeTables,proto3" json:"include_tables,omitempty"`
	ExcludeTables []string `protobuf:"bytes,2,rep,name=exclude_tables,json=excludeTables,proto3" json:"exclude_tables,omitempty"`
}

func (x *TablesFilter) Reset() {
	*x = TablesFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TablesFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TablesFilter) ProtoMessage() {}

func (x *TablesFilter) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TablesFilter.ProtoReflect.Descriptor instead.
func (*TablesFilter) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{7}
}

func (x *TablesFilter) GetIncludeTables() []string {
	if x != nil {
		return x.IncludeTables
	}
	return nil
}

func (x *TablesFilter) GetExcludeTables() []string {
	if x != nil {
		return x.ExcludeTables
	}
	return nil
}

type ColumnsFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeColumns []string `protobuf:"bytes,1,rep,name=include_columns,json=includeColumns,proto3" json:"include_columns,omitempty"`
	ExcludeColumns []string `protobuf:"bytes,2,rep,name=exclude_columns,json=excludeColumns,proto3" json:"exclude_columns,omitempty"`
}

func (x *ColumnsFilter) Reset() {
	*x = ColumnsFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnsFilter) ProtoMessage() {}

func (x *ColumnsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnsFilter.ProtoReflect.Descriptor instead.
func (*ColumnsFilter) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{8}
}

func (x *ColumnsFilter) GetIncludeColumns() []string {
	if x != nil {
		return x.IncludeColumns
	}
	return nil
}

func (x *ColumnsFilter) GetExcludeColumns() []string {
	if x != nil {
		return x.ExcludeColumns
	}
	return nil
}

type ReplacePrimaryKeyTransformer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tables *TablesFilter `protobuf:"bytes,1,opt,name=tables,proto3" json:"tables,omitempty"`
	Keys   []string      `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *ReplacePrimaryKeyTransformer) Reset() {
	*x = ReplacePrimaryKeyTransformer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplacePrimaryKeyTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplacePrimaryKeyTransformer) ProtoMessage() {}

func (x *ReplacePrimaryKeyTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplacePrimaryKeyTransformer.ProtoReflect.Descriptor instead.
func (*ReplacePrimaryKeyTransformer) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{9}
}

func (x *ReplacePrimaryKeyTransformer) GetTables() *TablesFilter {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *ReplacePrimaryKeyTransformer) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type ToStringTransformer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tables  *TablesFilter  `protobuf:"bytes,1,opt,name=tables,proto3" json:"tables,omitempty"`
	Columns *ColumnsFilter `protobuf:"bytes,2,opt,name=columns,proto3" json:"columns,omitempty"`
}

func (x *ToStringTransformer) Reset() {
	*x = ToStringTransformer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToStringTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToStringTransformer) ProtoMessage() {}

func (x *ToStringTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToStringTransformer.ProtoReflect.Descriptor instead.
func (*ToStringTransformer) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{10}
}

func (x *ToStringTransformer) GetTables() *TablesFilter {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *ToStringTransformer) GetColumns() *ColumnsFilter {
	if x != nil {
		return x.Columns
	}
	return nil
}

type DBTTransformer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitRepositoryLink string                   `protobuf:"bytes,1,opt,name=git_repository_link,json=gitRepositoryLink,proto3" json:"git_repository_link,omitempty"`
	GitBranch         string                   `protobuf:"bytes,2,opt,name=git_branch,json=gitBranch,proto3" json:"git_branch,omitempty"`
	ProfileName       string                   `protobuf:"bytes,3,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	Operation         DBTTransformer_Operation `protobuf:"varint,4,opt,name=operation,proto3,enum=doublecloud.transfer.v1.DBTTransformer_Operation" json:"operation,omitempty"`
}

func (x *DBTTransformer) Reset() {
	*x = DBTTransformer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBTTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBTTransformer) ProtoMessage() {}

func (x *DBTTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBTTransformer.ProtoReflect.Descriptor instead.
func (*DBTTransformer) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{11}
}

func (x *DBTTransformer) GetGitRepositoryLink() string {
	if x != nil {
		return x.GitRepositoryLink
	}
	return ""
}

func (x *DBTTransformer) GetGitBranch() string {
	if x != nil {
		return x.GitBranch
	}
	return ""
}

func (x *DBTTransformer) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *DBTTransformer) GetOperation() DBTTransformer_Operation {
	if x != nil {
		return x.Operation
	}
	return DBTTransformer_OPERATION_UNSPECIFIED
}

type TableSplitterTransformer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tables   *TablesFilter `protobuf:"bytes,1,opt,name=tables,proto3" json:"tables,omitempty"`
	Columns  []string      `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
	Splitter string        `protobuf:"bytes,3,opt,name=splitter,proto3" json:"splitter,omitempty"`
}

func (x *TableSplitterTransformer) Reset() {
	*x = TableSplitterTransformer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableSplitterTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSplitterTransformer) ProtoMessage() {}

func (x *TableSplitterTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSplitterTransformer.ProtoReflect.Descriptor instead.
func (*TableSplitterTransformer) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{12}
}

func (x *TableSplitterTransformer) GetTables() *TablesFilter {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *TableSplitterTransformer) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *TableSplitterTransformer) GetSplitter() string {
	if x != nil {
		return x.Splitter
	}
	return ""
}

type Transformer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Transformer:
	//
	//	*Transformer_ReplacePrimaryKey
	//	*Transformer_ConvertToString
	//	*Transformer_Dbt
	//	*Transformer_TableSplitterTransformer
	Transformer isTransformer_Transformer `protobuf_oneof:"transformer"`
}

func (x *Transformer) Reset() {
	*x = Transformer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transformer) ProtoMessage() {}

func (x *Transformer) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transformer.ProtoReflect.Descriptor instead.
func (*Transformer) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{13}
}

func (m *Transformer) GetTransformer() isTransformer_Transformer {
	if m != nil {
		return m.Transformer
	}
	return nil
}

func (x *Transformer) GetReplacePrimaryKey() *ReplacePrimaryKeyTransformer {
	if x, ok := x.GetTransformer().(*Transformer_ReplacePrimaryKey); ok {
		return x.ReplacePrimaryKey
	}
	return nil
}

func (x *Transformer) GetConvertToString() *ToStringTransformer {
	if x, ok := x.GetTransformer().(*Transformer_ConvertToString); ok {
		return x.ConvertToString
	}
	return nil
}

func (x *Transformer) GetDbt() *DBTTransformer {
	if x, ok := x.GetTransformer().(*Transformer_Dbt); ok {
		return x.Dbt
	}
	return nil
}

func (x *Transformer) GetTableSplitterTransformer() *TableSplitterTransformer {
	if x, ok := x.GetTransformer().(*Transformer_TableSplitterTransformer); ok {
		return x.TableSplitterTransformer
	}
	return nil
}

type isTransformer_Transformer interface {
	isTransformer_Transformer()
}

type Transformer_ReplacePrimaryKey struct {
	ReplacePrimaryKey *ReplacePrimaryKeyTransformer `protobuf:"bytes,6,opt,name=replace_primary_key,json=replacePrimaryKey,proto3,oneof"`
}

type Transformer_ConvertToString struct {
	ConvertToString *ToStringTransformer `protobuf:"bytes,7,opt,name=convert_to_string,json=convertToString,proto3,oneof"`
}

type Transformer_Dbt struct {
	Dbt *DBTTransformer `protobuf:"bytes,12,opt,name=dbt,proto3,oneof"`
}

type Transformer_TableSplitterTransformer struct {
	TableSplitterTransformer *TableSplitterTransformer `protobuf:"bytes,13,opt,name=table_splitter_transformer,json=tableSplitterTransformer,proto3,oneof"`
}

func (*Transformer_ReplacePrimaryKey) isTransformer_Transformer() {}

func (*Transformer_ConvertToString) isTransformer_Transformer() {}

func (*Transformer_Dbt) isTransformer_Transformer() {}

func (*Transformer_TableSplitterTransformer) isTransformer_Transformer() {}

type Transformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transformers []*Transformer `protobuf:"bytes,1,rep,name=transformers,proto3" json:"transformers,omitempty"`
}

func (x *Transformation) Reset() {
	*x = Transformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transformation) ProtoMessage() {}

func (x *Transformation) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transformation.ProtoReflect.Descriptor instead.
func (*Transformation) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{14}
}

func (x *Transformation) GetTransformers() []*Transformer {
	if x != nil {
		return x.Transformers
	}
	return nil
}

var File_doublecloud_transfer_v1_transfer_proto protoreflect.FileDescriptor

var file_doublecloud_transfer_v1_transfer_proto_rawDesc = []byte{
	0x0a, 0x26, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x1a, 0x26, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x05, 0x0a, 0x08, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x39, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x4f, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcb, 0x01, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73,
	0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c,
	0x65, 0x73, 0x73, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x11, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x58, 0x0a, 0x11, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x10, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65,
	0x73, 0x73, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x62,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6a, 0x6f,
	0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x66,
	0x6c, 0x61, 0x76, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x06, 0x66, 0x6c,
	0x61, 0x76, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x4c, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00,
	0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x52,
	0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x48, 0x00, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x0e,
	0x0a, 0x0c, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x2f,
	0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22,
	0x5c, 0x0a, 0x0c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x61, 0x0a,
	0x0d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x27,
	0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x22, 0x71, 0x0a, 0x1c, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x4b, 0x65, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x12, 0x3d, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x13, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x06, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0xa5, 0x03, 0x0a,
	0x0e, 0x44, 0x42, 0x54, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x13, 0x67, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67, 0x69,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x69, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x4f, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x42, 0x54, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xcf, 0x01, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45, 0x10,
	0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x55, 0x4e, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x45, 0x45, 0x44, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x07,
	0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x10, 0x08, 0x22, 0x8f, 0x01, 0x0a, 0x18, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x12, 0x3d, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x22, 0x91, 0x03, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12,
	0x5a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x03, 0x64,
	0x62, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x42, 0x54, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x03, 0x64, 0x62, 0x74, 0x12, 0x71, 0x0a, 0x1a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x18, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x22, 0x5a, 0x0a, 0x0e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x2a, 0x70, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f,
	0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x4f, 0x4e,
	0x4c, 0x59, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03, 0x2a, 0x9b, 0x01, 0x0a, 0x0e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4e,
	0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x4f, 0x4e, 0x45, 0x10, 0x08, 0x2a, 0x4c, 0x0a, 0x06, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x12, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x49, 0x4e, 0x59,
	0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x41, 0x52,
	0x47, 0x45, 0x10, 0x03, 0x42, 0x45, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67,
	0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x3b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_doublecloud_transfer_v1_transfer_proto_rawDescOnce sync.Once
	file_doublecloud_transfer_v1_transfer_proto_rawDescData = file_doublecloud_transfer_v1_transfer_proto_rawDesc
)

func file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP() []byte {
	file_doublecloud_transfer_v1_transfer_proto_rawDescOnce.Do(func() {
		file_doublecloud_transfer_v1_transfer_proto_rawDescData = protoimpl.X.CompressGZIP(file_doublecloud_transfer_v1_transfer_proto_rawDescData)
	})
	return file_doublecloud_transfer_v1_transfer_proto_rawDescData
}

var file_doublecloud_transfer_v1_transfer_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_doublecloud_transfer_v1_transfer_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_doublecloud_transfer_v1_transfer_proto_goTypes = []interface{}{
	(TransferType)(0),                    // 0: doublecloud.transfer.v1.TransferType
	(TransferStatus)(0),                  // 1: doublecloud.transfer.v1.TransferStatus
	(Flavor)(0),                          // 2: doublecloud.transfer.v1.Flavor
	(DBTTransformer_Operation)(0),        // 3: doublecloud.transfer.v1.DBTTransformer.Operation
	(*Transfer)(nil),                     // 4: doublecloud.transfer.v1.Transfer
	(*Runtime)(nil),                      // 5: doublecloud.transfer.v1.Runtime
	(*ServerlessRuntime)(nil),            // 6: doublecloud.transfer.v1.ServerlessRuntime
	(*DedicatedRuntime)(nil),             // 7: doublecloud.transfer.v1.DedicatedRuntime
	(*Settings)(nil),                     // 8: doublecloud.transfer.v1.Settings
	(*AutoSettings)(nil),                 // 9: doublecloud.transfer.v1.AutoSettings
	(*ManualSettings)(nil),               // 10: doublecloud.transfer.v1.ManualSettings
	(*TablesFilter)(nil),                 // 11: doublecloud.transfer.v1.TablesFilter
	(*ColumnsFilter)(nil),                // 12: doublecloud.transfer.v1.ColumnsFilter
	(*ReplacePrimaryKeyTransformer)(nil), // 13: doublecloud.transfer.v1.ReplacePrimaryKeyTransformer
	(*ToStringTransformer)(nil),          // 14: doublecloud.transfer.v1.ToStringTransformer
	(*DBTTransformer)(nil),               // 15: doublecloud.transfer.v1.DBTTransformer
	(*TableSplitterTransformer)(nil),     // 16: doublecloud.transfer.v1.TableSplitterTransformer
	(*Transformer)(nil),                  // 17: doublecloud.transfer.v1.Transformer
	(*Transformation)(nil),               // 18: doublecloud.transfer.v1.Transformation
	nil,                                  // 19: doublecloud.transfer.v1.Transfer.LabelsEntry
	(*Endpoint)(nil),                     // 20: doublecloud.transfer.v1.Endpoint
}
var file_doublecloud_transfer_v1_transfer_proto_depIdxs = []int32{
	19, // 0: doublecloud.transfer.v1.Transfer.labels:type_name -> doublecloud.transfer.v1.Transfer.LabelsEntry
	20, // 1: doublecloud.transfer.v1.Transfer.source:type_name -> doublecloud.transfer.v1.Endpoint
	20, // 2: doublecloud.transfer.v1.Transfer.target:type_name -> doublecloud.transfer.v1.Endpoint
	5,  // 3: doublecloud.transfer.v1.Transfer.runtime:type_name -> doublecloud.transfer.v1.Runtime
	1,  // 4: doublecloud.transfer.v1.Transfer.status:type_name -> doublecloud.transfer.v1.TransferStatus
	0,  // 5: doublecloud.transfer.v1.Transfer.type:type_name -> doublecloud.transfer.v1.TransferType
	18, // 6: doublecloud.transfer.v1.Transfer.transformation:type_name -> doublecloud.transfer.v1.Transformation
	6,  // 7: doublecloud.transfer.v1.Runtime.serverless_runtime:type_name -> doublecloud.transfer.v1.ServerlessRuntime
	7,  // 8: doublecloud.transfer.v1.Runtime.dedicated_runtime:type_name -> doublecloud.transfer.v1.DedicatedRuntime
	2,  // 9: doublecloud.transfer.v1.DedicatedRuntime.flavor:type_name -> doublecloud.transfer.v1.Flavor
	8,  // 10: doublecloud.transfer.v1.DedicatedRuntime.settings:type_name -> doublecloud.transfer.v1.Settings
	9,  // 11: doublecloud.transfer.v1.Settings.auto_settings:type_name -> doublecloud.transfer.v1.AutoSettings
	10, // 12: doublecloud.transfer.v1.Settings.manual_settings:type_name -> doublecloud.transfer.v1.ManualSettings
	11, // 13: doublecloud.transfer.v1.ReplacePrimaryKeyTransformer.tables:type_name -> doublecloud.transfer.v1.TablesFilter
	11, // 14: doublecloud.transfer.v1.ToStringTransformer.tables:type_name -> doublecloud.transfer.v1.TablesFilter
	12, // 15: doublecloud.transfer.v1.ToStringTransformer.columns:type_name -> doublecloud.transfer.v1.ColumnsFilter
	3,  // 16: doublecloud.transfer.v1.DBTTransformer.operation:type_name -> doublecloud.transfer.v1.DBTTransformer.Operation
	11, // 17: doublecloud.transfer.v1.TableSplitterTransformer.tables:type_name -> doublecloud.transfer.v1.TablesFilter
	13, // 18: doublecloud.transfer.v1.Transformer.replace_primary_key:type_name -> doublecloud.transfer.v1.ReplacePrimaryKeyTransformer
	14, // 19: doublecloud.transfer.v1.Transformer.convert_to_string:type_name -> doublecloud.transfer.v1.ToStringTransformer
	15, // 20: doublecloud.transfer.v1.Transformer.dbt:type_name -> doublecloud.transfer.v1.DBTTransformer
	16, // 21: doublecloud.transfer.v1.Transformer.table_splitter_transformer:type_name -> doublecloud.transfer.v1.TableSplitterTransformer
	17, // 22: doublecloud.transfer.v1.Transformation.transformers:type_name -> doublecloud.transfer.v1.Transformer
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_doublecloud_transfer_v1_transfer_proto_init() }
func file_doublecloud_transfer_v1_transfer_proto_init() {
	if File_doublecloud_transfer_v1_transfer_proto != nil {
		return
	}
	file_doublecloud_transfer_v1_endpoint_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_doublecloud_transfer_v1_transfer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_transfer_v1_transfer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Runtime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_transfer_v1_transfer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerlessRuntime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_transfer_v1_transfer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DedicatedRuntime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_transfer_v1_transfer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_transfer_v1_transfer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_transfer_v1_transfer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_transfer_v1_transfer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TablesFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_transfer_v1_transfer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnsFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_transfer_v1_transfer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplacePrimaryKeyTransformer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_transfer_v1_transfer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToStringTransformer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_transfer_v1_transfer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBTTransformer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_transfer_v1_transfer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableSplitterTransformer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_transfer_v1_transfer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transformer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doublecloud_transfer_v1_transfer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_doublecloud_transfer_v1_transfer_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Runtime_ServerlessRuntime)(nil),
		(*Runtime_DedicatedRuntime)(nil),
	}
	file_doublecloud_transfer_v1_transfer_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Settings_AutoSettings)(nil),
		(*Settings_ManualSettings)(nil),
	}
	file_doublecloud_transfer_v1_transfer_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*Transformer_ReplacePrimaryKey)(nil),
		(*Transformer_ConvertToString)(nil),
		(*Transformer_Dbt)(nil),
		(*Transformer_TableSplitterTransformer)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_doublecloud_transfer_v1_transfer_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_doublecloud_transfer_v1_transfer_proto_goTypes,
		DependencyIndexes: file_doublecloud_transfer_v1_transfer_proto_depIdxs,
		EnumInfos:         file_doublecloud_transfer_v1_transfer_proto_enumTypes,
		MessageInfos:      file_doublecloud_transfer_v1_transfer_proto_msgTypes,
	}.Build()
	File_doublecloud_transfer_v1_transfer_proto = out.File
	file_doublecloud_transfer_v1_transfer_proto_rawDesc = nil
	file_doublecloud_transfer_v1_transfer_proto_goTypes = nil
	file_doublecloud_transfer_v1_transfer_proto_depIdxs = nil
}
