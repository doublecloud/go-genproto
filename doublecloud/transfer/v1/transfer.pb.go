// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: doublecloud/transfer/v1/transfer.proto

package transfer

import (
	endpoint "github.com/doublecloud/go-genproto/doublecloud/transfer/v1/endpoint"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransferType int32

const (
	TransferType_TRANSFER_TYPE_UNSPECIFIED TransferType = 0
	// Snapshot and increment
	TransferType_SNAPSHOT_AND_INCREMENT TransferType = 1
	// Snapshot
	TransferType_SNAPSHOT_ONLY TransferType = 2
	// Increment
	TransferType_INCREMENT_ONLY TransferType = 3
)

// Enum value maps for TransferType.
var (
	TransferType_name = map[int32]string{
		0: "TRANSFER_TYPE_UNSPECIFIED",
		1: "SNAPSHOT_AND_INCREMENT",
		2: "SNAPSHOT_ONLY",
		3: "INCREMENT_ONLY",
	}
	TransferType_value = map[string]int32{
		"TRANSFER_TYPE_UNSPECIFIED": 0,
		"SNAPSHOT_AND_INCREMENT":    1,
		"SNAPSHOT_ONLY":             2,
		"INCREMENT_ONLY":            3,
	}
)

func (x TransferType) Enum() *TransferType {
	p := new(TransferType)
	*p = x
	return p
}

func (x TransferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferType) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_transfer_v1_transfer_proto_enumTypes[0].Descriptor()
}

func (TransferType) Type() protoreflect.EnumType {
	return &file_doublecloud_transfer_v1_transfer_proto_enumTypes[0]
}

func (x TransferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferType.Descriptor instead.
func (TransferType) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{0}
}

type TransferStatus int32

const (
	TransferStatus_TRANSFER_STATUS_UNSPECIFIED TransferStatus = 0
	// Transfer does some work before running
	TransferStatus_CREATING TransferStatus = 1
	// Transfer created but not started by user
	TransferStatus_CREATED TransferStatus = 2
	// Transfer currently doing replication work
	TransferStatus_RUNNING TransferStatus = 3
	// Transfer shutdown
	TransferStatus_STOPPING TransferStatus = 4
	// Transfer stopped by user
	TransferStatus_STOPPED TransferStatus = 5
	// Transfer stopped by system
	TransferStatus_ERROR TransferStatus = 6
	// Transfer copy snapshot
	TransferStatus_SNAPSHOTTING TransferStatus = 7
	// Transfer reach terminal phase
	TransferStatus_DONE TransferStatus = 8
)

// Enum value maps for TransferStatus.
var (
	TransferStatus_name = map[int32]string{
		0: "TRANSFER_STATUS_UNSPECIFIED",
		1: "CREATING",
		2: "CREATED",
		3: "RUNNING",
		4: "STOPPING",
		5: "STOPPED",
		6: "ERROR",
		7: "SNAPSHOTTING",
		8: "DONE",
	}
	TransferStatus_value = map[string]int32{
		"TRANSFER_STATUS_UNSPECIFIED": 0,
		"CREATING":                    1,
		"CREATED":                     2,
		"RUNNING":                     3,
		"STOPPING":                    4,
		"STOPPED":                     5,
		"ERROR":                       6,
		"SNAPSHOTTING":                7,
		"DONE":                        8,
	}
)

func (x TransferStatus) Enum() *TransferStatus {
	p := new(TransferStatus)
	*p = x
	return p
}

func (x TransferStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_transfer_v1_transfer_proto_enumTypes[1].Descriptor()
}

func (TransferStatus) Type() protoreflect.EnumType {
	return &file_doublecloud_transfer_v1_transfer_proto_enumTypes[1]
}

func (x TransferStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferStatus.Descriptor instead.
func (TransferStatus) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{1}
}

type RegularSnapshotScheduleInterval int32

const (
	RegularSnapshotScheduleInterval_REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_UNSPECIFIED RegularSnapshotScheduleInterval = 0
	RegularSnapshotScheduleInterval_REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_15MIN       RegularSnapshotScheduleInterval = 2
	RegularSnapshotScheduleInterval_REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_30MIN       RegularSnapshotScheduleInterval = 3
	RegularSnapshotScheduleInterval_REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_HOUR        RegularSnapshotScheduleInterval = 4
	RegularSnapshotScheduleInterval_REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_2HOUR       RegularSnapshotScheduleInterval = 5
	RegularSnapshotScheduleInterval_REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_3HOUR       RegularSnapshotScheduleInterval = 6
	RegularSnapshotScheduleInterval_REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_6HOUR       RegularSnapshotScheduleInterval = 7
	RegularSnapshotScheduleInterval_REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_8HOUR       RegularSnapshotScheduleInterval = 8
	RegularSnapshotScheduleInterval_REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_12HOUR      RegularSnapshotScheduleInterval = 9
	RegularSnapshotScheduleInterval_REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_DAY         RegularSnapshotScheduleInterval = 10
)

// Enum value maps for RegularSnapshotScheduleInterval.
var (
	RegularSnapshotScheduleInterval_name = map[int32]string{
		0:  "REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_UNSPECIFIED",
		2:  "REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_15MIN",
		3:  "REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_30MIN",
		4:  "REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_HOUR",
		5:  "REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_2HOUR",
		6:  "REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_3HOUR",
		7:  "REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_6HOUR",
		8:  "REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_8HOUR",
		9:  "REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_12HOUR",
		10: "REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_DAY",
	}
	RegularSnapshotScheduleInterval_value = map[string]int32{
		"REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_UNSPECIFIED": 0,
		"REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_15MIN":       2,
		"REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_30MIN":       3,
		"REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_HOUR":        4,
		"REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_2HOUR":       5,
		"REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_3HOUR":       6,
		"REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_6HOUR":       7,
		"REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_8HOUR":       8,
		"REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_12HOUR":      9,
		"REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_DAY":         10,
	}
)

func (x RegularSnapshotScheduleInterval) Enum() *RegularSnapshotScheduleInterval {
	p := new(RegularSnapshotScheduleInterval)
	*p = x
	return p
}

func (x RegularSnapshotScheduleInterval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegularSnapshotScheduleInterval) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_transfer_v1_transfer_proto_enumTypes[2].Descriptor()
}

func (RegularSnapshotScheduleInterval) Type() protoreflect.EnumType {
	return &file_doublecloud_transfer_v1_transfer_proto_enumTypes[2]
}

func (x RegularSnapshotScheduleInterval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegularSnapshotScheduleInterval.Descriptor instead.
func (RegularSnapshotScheduleInterval) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{2}
}

type Flavor int32

const (
	Flavor_FLAVOR_UNSPECIFIED Flavor = 0
	Flavor_SMALL              Flavor = 1
	Flavor_MEDIUM             Flavor = 2
	Flavor_LARGE              Flavor = 3
	Flavor_TINY               Flavor = 4
)

// Enum value maps for Flavor.
var (
	Flavor_name = map[int32]string{
		0: "FLAVOR_UNSPECIFIED",
		1: "SMALL",
		2: "MEDIUM",
		3: "LARGE",
		4: "TINY",
	}
	Flavor_value = map[string]int32{
		"FLAVOR_UNSPECIFIED": 0,
		"SMALL":              1,
		"MEDIUM":             2,
		"LARGE":              3,
		"TINY":               4,
	}
)

func (x Flavor) Enum() *Flavor {
	p := new(Flavor)
	*p = x
	return p
}

func (x Flavor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Flavor) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_transfer_v1_transfer_proto_enumTypes[3].Descriptor()
}

func (Flavor) Type() protoreflect.EnumType {
	return &file_doublecloud_transfer_v1_transfer_proto_enumTypes[3]
}

func (x Flavor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Flavor.Descriptor instead.
func (Flavor) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{3}
}

type DBTTransformer_Operation int32

const (
	DBTTransformer_OPERATION_UNSPECIFIED DBTTransformer_Operation = 0
	DBTTransformer_OPERATION_BUILD       DBTTransformer_Operation = 1
	DBTTransformer_OPERATION_COMPILE     DBTTransformer_Operation = 2
	DBTTransformer_OPERATION_DEBUG       DBTTransformer_Operation = 3
	DBTTransformer_OPERATION_PARSE       DBTTransformer_Operation = 4
	DBTTransformer_OPERATION_RUN         DBTTransformer_Operation = 5
	DBTTransformer_OPERATION_SEED        DBTTransformer_Operation = 6
	DBTTransformer_OPERATION_SNAPSHOT    DBTTransformer_Operation = 7
	DBTTransformer_OPERATION_TEST        DBTTransformer_Operation = 8
)

// Enum value maps for DBTTransformer_Operation.
var (
	DBTTransformer_Operation_name = map[int32]string{
		0: "OPERATION_UNSPECIFIED",
		1: "OPERATION_BUILD",
		2: "OPERATION_COMPILE",
		3: "OPERATION_DEBUG",
		4: "OPERATION_PARSE",
		5: "OPERATION_RUN",
		6: "OPERATION_SEED",
		7: "OPERATION_SNAPSHOT",
		8: "OPERATION_TEST",
	}
	DBTTransformer_Operation_value = map[string]int32{
		"OPERATION_UNSPECIFIED": 0,
		"OPERATION_BUILD":       1,
		"OPERATION_COMPILE":     2,
		"OPERATION_DEBUG":       3,
		"OPERATION_PARSE":       4,
		"OPERATION_RUN":         5,
		"OPERATION_SEED":        6,
		"OPERATION_SNAPSHOT":    7,
		"OPERATION_TEST":        8,
	}
)

func (x DBTTransformer_Operation) Enum() *DBTTransformer_Operation {
	p := new(DBTTransformer_Operation)
	*p = x
	return p
}

func (x DBTTransformer_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DBTTransformer_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_transfer_v1_transfer_proto_enumTypes[4].Descriptor()
}

func (DBTTransformer_Operation) Type() protoreflect.EnumType {
	return &file_doublecloud_transfer_v1_transfer_proto_enumTypes[4]
}

func (x DBTTransformer_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DBTTransformer_Operation.Descriptor instead.
func (DBTTransformer_Operation) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{27, 0}
}

// Transfer core entity
type Transfer struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectId       string                 `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Name            string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description     string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Labels          map[string]string      `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Source          *Endpoint              `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`
	Target          *Endpoint              `protobuf:"bytes,8,opt,name=target,proto3" json:"target,omitempty"`
	Runtime         *Runtime               `protobuf:"bytes,9,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Status          TransferStatus         `protobuf:"varint,10,opt,name=status,proto3,enum=doublecloud.transfer.v1.TransferStatus" json:"status,omitempty"`
	Type            TransferType           `protobuf:"varint,12,opt,name=type,proto3,enum=doublecloud.transfer.v1.TransferType" json:"type,omitempty"`
	Warning         string                 `protobuf:"bytes,15,opt,name=warning,proto3" json:"warning,omitempty"`
	RegularSnapshot *RegularSnapshot       `protobuf:"bytes,16,opt,name=regular_snapshot,json=regularSnapshot,proto3" json:"regular_snapshot,omitempty"`
	Transformation  *Transformation        `protobuf:"bytes,17,opt,name=transformation,proto3" json:"transformation,omitempty"`
	DataObjects     *DataObjects           `protobuf:"bytes,19,opt,name=data_objects,json=dataObjects,proto3" json:"data_objects,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{0}
}

func (x *Transfer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Transfer) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Transfer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Transfer) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Transfer) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Transfer) GetSource() *Endpoint {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Transfer) GetTarget() *Endpoint {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Transfer) GetRuntime() *Runtime {
	if x != nil {
		return x.Runtime
	}
	return nil
}

func (x *Transfer) GetStatus() TransferStatus {
	if x != nil {
		return x.Status
	}
	return TransferStatus_TRANSFER_STATUS_UNSPECIFIED
}

func (x *Transfer) GetType() TransferType {
	if x != nil {
		return x.Type
	}
	return TransferType_TRANSFER_TYPE_UNSPECIFIED
}

func (x *Transfer) GetWarning() string {
	if x != nil {
		return x.Warning
	}
	return ""
}

func (x *Transfer) GetRegularSnapshot() *RegularSnapshot {
	if x != nil {
		return x.RegularSnapshot
	}
	return nil
}

func (x *Transfer) GetTransformation() *Transformation {
	if x != nil {
		return x.Transformation
	}
	return nil
}

func (x *Transfer) GetDataObjects() *DataObjects {
	if x != nil {
		return x.DataObjects
	}
	return nil
}

type Runtime struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Runtime:
	//
	//	*Runtime_ServerlessRuntime
	//	*Runtime_DedicatedRuntime
	Runtime       isRuntime_Runtime `protobuf_oneof:"runtime"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Runtime) Reset() {
	*x = Runtime{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Runtime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Runtime) ProtoMessage() {}

func (x *Runtime) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Runtime.ProtoReflect.Descriptor instead.
func (*Runtime) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{1}
}

func (x *Runtime) GetRuntime() isRuntime_Runtime {
	if x != nil {
		return x.Runtime
	}
	return nil
}

func (x *Runtime) GetServerlessRuntime() *ServerlessRuntime {
	if x != nil {
		if x, ok := x.Runtime.(*Runtime_ServerlessRuntime); ok {
			return x.ServerlessRuntime
		}
	}
	return nil
}

func (x *Runtime) GetDedicatedRuntime() *DedicatedRuntime {
	if x != nil {
		if x, ok := x.Runtime.(*Runtime_DedicatedRuntime); ok {
			return x.DedicatedRuntime
		}
	}
	return nil
}

type isRuntime_Runtime interface {
	isRuntime_Runtime()
}

type Runtime_ServerlessRuntime struct {
	ServerlessRuntime *ServerlessRuntime `protobuf:"bytes,5,opt,name=serverless_runtime,json=serverlessRuntime,proto3,oneof"`
}

type Runtime_DedicatedRuntime struct {
	DedicatedRuntime *DedicatedRuntime `protobuf:"bytes,6,opt,name=dedicated_runtime,json=dedicatedRuntime,proto3,oneof"`
}

func (*Runtime_ServerlessRuntime) isRuntime_Runtime() {}

func (*Runtime_DedicatedRuntime) isRuntime_Runtime() {}

type ServerlessRuntime struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobCount      int64                  `protobuf:"varint,2,opt,name=job_count,json=jobCount,proto3" json:"job_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerlessRuntime) Reset() {
	*x = ServerlessRuntime{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerlessRuntime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerlessRuntime) ProtoMessage() {}

func (x *ServerlessRuntime) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerlessRuntime.ProtoReflect.Descriptor instead.
func (*ServerlessRuntime) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{2}
}

func (x *ServerlessRuntime) GetJobCount() int64 {
	if x != nil {
		return x.JobCount
	}
	return 0
}

type RegularSnapshot struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Mode:
	//
	//	*RegularSnapshot_Settings
	//	*RegularSnapshot_Disabled
	Mode          isRegularSnapshot_Mode `protobuf_oneof:"mode"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegularSnapshot) Reset() {
	*x = RegularSnapshot{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegularSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegularSnapshot) ProtoMessage() {}

func (x *RegularSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegularSnapshot.ProtoReflect.Descriptor instead.
func (*RegularSnapshot) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{3}
}

func (x *RegularSnapshot) GetMode() isRegularSnapshot_Mode {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *RegularSnapshot) GetSettings() *RegularSnapshotSettings {
	if x != nil {
		if x, ok := x.Mode.(*RegularSnapshot_Settings); ok {
			return x.Settings
		}
	}
	return nil
}

func (x *RegularSnapshot) GetDisabled() *RegularSnapshotDisabled {
	if x != nil {
		if x, ok := x.Mode.(*RegularSnapshot_Disabled); ok {
			return x.Disabled
		}
	}
	return nil
}

type isRegularSnapshot_Mode interface {
	isRegularSnapshot_Mode()
}

type RegularSnapshot_Settings struct {
	Settings *RegularSnapshotSettings `protobuf:"bytes,3,opt,name=settings,proto3,oneof"`
}

type RegularSnapshot_Disabled struct {
	Disabled *RegularSnapshotDisabled `protobuf:"bytes,4,opt,name=disabled,proto3,oneof"`
}

func (*RegularSnapshot_Settings) isRegularSnapshot_Mode() {}

func (*RegularSnapshot_Disabled) isRegularSnapshot_Mode() {}

type RegularSnapshotDisabled struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegularSnapshotDisabled) Reset() {
	*x = RegularSnapshotDisabled{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegularSnapshotDisabled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegularSnapshotDisabled) ProtoMessage() {}

func (x *RegularSnapshotDisabled) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegularSnapshotDisabled.ProtoReflect.Descriptor instead.
func (*RegularSnapshotDisabled) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{4}
}

type RegularSnapshotSettings struct {
	state          protoimpl.MessageState          `protogen:"open.v1"`
	Schedule       RegularSnapshotScheduleInterval `protobuf:"varint,1,opt,name=schedule,proto3,enum=doublecloud.transfer.v1.RegularSnapshotScheduleInterval" json:"schedule,omitempty"`
	Tables         []*IncrementalTable             `protobuf:"bytes,2,rep,name=tables,proto3" json:"tables,omitempty"`
	CronExpression string                          `protobuf:"bytes,3,opt,name=cron_expression,json=cronExpression,proto3" json:"cron_expression,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RegularSnapshotSettings) Reset() {
	*x = RegularSnapshotSettings{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegularSnapshotSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegularSnapshotSettings) ProtoMessage() {}

func (x *RegularSnapshotSettings) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegularSnapshotSettings.ProtoReflect.Descriptor instead.
func (*RegularSnapshotSettings) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{5}
}

func (x *RegularSnapshotSettings) GetSchedule() RegularSnapshotScheduleInterval {
	if x != nil {
		return x.Schedule
	}
	return RegularSnapshotScheduleInterval_REGULAR_SNAPSHOT_SCHEDULE_INTERVAL_UNSPECIFIED
}

func (x *RegularSnapshotSettings) GetTables() []*IncrementalTable {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *RegularSnapshotSettings) GetCronExpression() string {
	if x != nil {
		return x.CronExpression
	}
	return ""
}

type IncrementalTable struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TableNamespace string                 `protobuf:"bytes,1,opt,name=table_namespace,json=tableNamespace,proto3" json:"table_namespace,omitempty"`
	TableName      string                 `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	CursorColumn   string                 `protobuf:"bytes,3,opt,name=cursor_column,json=cursorColumn,proto3" json:"cursor_column,omitempty"`
	InitialState   string                 `protobuf:"bytes,4,opt,name=initial_state,json=initialState,proto3" json:"initial_state,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *IncrementalTable) Reset() {
	*x = IncrementalTable{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncrementalTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrementalTable) ProtoMessage() {}

func (x *IncrementalTable) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrementalTable.ProtoReflect.Descriptor instead.
func (*IncrementalTable) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{6}
}

func (x *IncrementalTable) GetTableNamespace() string {
	if x != nil {
		return x.TableNamespace
	}
	return ""
}

func (x *IncrementalTable) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *IncrementalTable) GetCursorColumn() string {
	if x != nil {
		return x.CursorColumn
	}
	return ""
}

func (x *IncrementalTable) GetInitialState() string {
	if x != nil {
		return x.InitialState
	}
	return ""
}

type DedicatedRuntime struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Flavor        Flavor                 `protobuf:"varint,2,opt,name=flavor,proto3,enum=doublecloud.transfer.v1.Flavor" json:"flavor,omitempty"`
	Settings      *Settings              `protobuf:"bytes,8,opt,name=settings,proto3" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DedicatedRuntime) Reset() {
	*x = DedicatedRuntime{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DedicatedRuntime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DedicatedRuntime) ProtoMessage() {}

func (x *DedicatedRuntime) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DedicatedRuntime.ProtoReflect.Descriptor instead.
func (*DedicatedRuntime) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{7}
}

func (x *DedicatedRuntime) GetFlavor() Flavor {
	if x != nil {
		return x.Flavor
	}
	return Flavor_FLAVOR_UNSPECIFIED
}

func (x *DedicatedRuntime) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type Settings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Settings:
	//
	//	*Settings_AutoSettings
	//	*Settings_ManualSettings
	Settings      isSettings_Settings `protobuf_oneof:"settings"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Settings) Reset() {
	*x = Settings{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings) ProtoMessage() {}

func (x *Settings) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings.ProtoReflect.Descriptor instead.
func (*Settings) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{8}
}

func (x *Settings) GetSettings() isSettings_Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *Settings) GetAutoSettings() *AutoSettings {
	if x != nil {
		if x, ok := x.Settings.(*Settings_AutoSettings); ok {
			return x.AutoSettings
		}
	}
	return nil
}

func (x *Settings) GetManualSettings() *ManualSettings {
	if x != nil {
		if x, ok := x.Settings.(*Settings_ManualSettings); ok {
			return x.ManualSettings
		}
	}
	return nil
}

type isSettings_Settings interface {
	isSettings_Settings()
}

type Settings_AutoSettings struct {
	AutoSettings *AutoSettings `protobuf:"bytes,1,opt,name=auto_settings,json=autoSettings,proto3,oneof"`
}

type Settings_ManualSettings struct {
	ManualSettings *ManualSettings `protobuf:"bytes,2,opt,name=manual_settings,json=manualSettings,proto3,oneof"`
}

func (*Settings_AutoSettings) isSettings_Settings() {}

func (*Settings_ManualSettings) isSettings_Settings() {}

type AutoSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AutoSettings) Reset() {
	*x = AutoSettings{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoSettings) ProtoMessage() {}

func (x *AutoSettings) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoSettings.ProtoReflect.Descriptor instead.
func (*AutoSettings) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{9}
}

type ManualSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NetworkId     string                 `protobuf:"bytes,4,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ManualSettings) Reset() {
	*x = ManualSettings{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManualSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualSettings) ProtoMessage() {}

func (x *ManualSettings) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualSettings.ProtoReflect.Descriptor instead.
func (*ManualSettings) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{10}
}

func (x *ManualSettings) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

// Mask function
type MaskFunction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to MaskFunction:
	//
	//	*MaskFunction_MaskFunctionHash
	MaskFunction  isMaskFunction_MaskFunction `protobuf_oneof:"mask_function"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MaskFunction) Reset() {
	*x = MaskFunction{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaskFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaskFunction) ProtoMessage() {}

func (x *MaskFunction) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaskFunction.ProtoReflect.Descriptor instead.
func (*MaskFunction) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{11}
}

func (x *MaskFunction) GetMaskFunction() isMaskFunction_MaskFunction {
	if x != nil {
		return x.MaskFunction
	}
	return nil
}

func (x *MaskFunction) GetMaskFunctionHash() *MaskFunctionHash {
	if x != nil {
		if x, ok := x.MaskFunction.(*MaskFunction_MaskFunctionHash); ok {
			return x.MaskFunctionHash
		}
	}
	return nil
}

type isMaskFunction_MaskFunction interface {
	isMaskFunction_MaskFunction()
}

type MaskFunction_MaskFunctionHash struct {
	// Hash mask function
	MaskFunctionHash *MaskFunctionHash `protobuf:"bytes,1,opt,name=mask_function_hash,json=maskFunctionHash,proto3,oneof"`
}

func (*MaskFunction_MaskFunctionHash) isMaskFunction_MaskFunction() {}

// Hash data using HMAC
type MaskFunctionHash struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This string will be used in the HMAC(sha256, salt) function applied to the
	// column data.
	UserDefinedSalt string `protobuf:"bytes,1,opt,name=user_defined_salt,json=userDefinedSalt,proto3" json:"user_defined_salt,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MaskFunctionHash) Reset() {
	*x = MaskFunctionHash{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaskFunctionHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaskFunctionHash) ProtoMessage() {}

func (x *MaskFunctionHash) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaskFunctionHash.ProtoReflect.Descriptor instead.
func (*MaskFunctionHash) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{12}
}

func (x *MaskFunctionHash) GetUserDefinedSalt() string {
	if x != nil {
		return x.UserDefinedSalt
	}
	return ""
}

// Filter tables using lists of included and excluded tables.
type TablesFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of tables that will be included to transfer
	IncludeTables []string `protobuf:"bytes,1,rep,name=include_tables,json=includeTables,proto3" json:"include_tables,omitempty"`
	// List of tables that will be excluded to transfer
	ExcludeTables []string `protobuf:"bytes,2,rep,name=exclude_tables,json=excludeTables,proto3" json:"exclude_tables,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TablesFilter) Reset() {
	*x = TablesFilter{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TablesFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TablesFilter) ProtoMessage() {}

func (x *TablesFilter) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TablesFilter.ProtoReflect.Descriptor instead.
func (*TablesFilter) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{13}
}

func (x *TablesFilter) GetIncludeTables() []string {
	if x != nil {
		return x.IncludeTables
	}
	return nil
}

func (x *TablesFilter) GetExcludeTables() []string {
	if x != nil {
		return x.ExcludeTables
	}
	return nil
}

// Filter columns using lists of included and excluded columns.
type ColumnsFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of columns that will be included to transfer
	IncludeColumns []string `protobuf:"bytes,1,rep,name=include_columns,json=includeColumns,proto3" json:"include_columns,omitempty"`
	// List of columns that will be excluded to transfer
	ExcludeColumns []string `protobuf:"bytes,2,rep,name=exclude_columns,json=excludeColumns,proto3" json:"exclude_columns,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ColumnsFilter) Reset() {
	*x = ColumnsFilter{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnsFilter) ProtoMessage() {}

func (x *ColumnsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnsFilter.ProtoReflect.Descriptor instead.
func (*ColumnsFilter) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{14}
}

func (x *ColumnsFilter) GetIncludeColumns() []string {
	if x != nil {
		return x.IncludeColumns
	}
	return nil
}

func (x *ColumnsFilter) GetExcludeColumns() []string {
	if x != nil {
		return x.ExcludeColumns
	}
	return nil
}

// Mask field transformer allows you to hash data
type MaskFieldTransformer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of included and excluded tables
	Tables *TablesFilter `protobuf:"bytes,1,opt,name=tables,proto3" json:"tables,omitempty"`
	// Specify the name of the column for data masking (a regular expression).
	Columns []string `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
	// Mask function
	Function      *MaskFunction `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MaskFieldTransformer) Reset() {
	*x = MaskFieldTransformer{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaskFieldTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaskFieldTransformer) ProtoMessage() {}

func (x *MaskFieldTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaskFieldTransformer.ProtoReflect.Descriptor instead.
func (*MaskFieldTransformer) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{15}
}

func (x *MaskFieldTransformer) GetTables() *TablesFilter {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *MaskFieldTransformer) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *MaskFieldTransformer) GetFunction() *MaskFunction {
	if x != nil {
		return x.Function
	}
	return nil
}

// Set up a list of table columns to transfer
type FilterColumnsTransformer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of the tables to filter using lists of included and excluded tables.
	Tables *TablesFilter `protobuf:"bytes,1,opt,name=tables,proto3" json:"tables,omitempty"`
	// List of the columns to transfer to the target tables using lists of included and
	// excluded columns.
	Columns       *ColumnsFilter `protobuf:"bytes,2,opt,name=columns,proto3" json:"columns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterColumnsTransformer) Reset() {
	*x = FilterColumnsTransformer{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterColumnsTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterColumnsTransformer) ProtoMessage() {}

func (x *FilterColumnsTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterColumnsTransformer.ProtoReflect.Descriptor instead.
func (*FilterColumnsTransformer) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{16}
}

func (x *FilterColumnsTransformer) GetTables() *TablesFilter {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *FilterColumnsTransformer) GetColumns() *ColumnsFilter {
	if x != nil {
		return x.Columns
	}
	return nil
}

type Table struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NameSpace     string                 `protobuf:"bytes,1,opt,name=name_space,json=nameSpace,proto3" json:"name_space,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Table) Reset() {
	*x = Table{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{17}
}

func (x *Table) GetNameSpace() string {
	if x != nil {
		return x.NameSpace
	}
	return ""
}

func (x *Table) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Specify rule for renaming table
type RenameTable struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specify the current names of the table in the source
	OriginalName *Table `protobuf:"bytes,1,opt,name=original_name,json=originalName,proto3" json:"original_name,omitempty"`
	// Specify the new names for this table in the target
	NewName       *Table `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenameTable) Reset() {
	*x = RenameTable{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenameTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameTable) ProtoMessage() {}

func (x *RenameTable) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameTable.ProtoReflect.Descriptor instead.
func (*RenameTable) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{18}
}

func (x *RenameTable) GetOriginalName() *Table {
	if x != nil {
		return x.OriginalName
	}
	return nil
}

func (x *RenameTable) GetNewName() *Table {
	if x != nil {
		return x.NewName
	}
	return nil
}

// Set rules for renaming tables by specifying the current names of the tables in
// the source and new names for these tables in the target.
type RenameTablesTransformer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of renaming rules
	RenameTables  []*RenameTable `protobuf:"bytes,1,rep,name=rename_tables,json=renameTables,proto3" json:"rename_tables,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenameTablesTransformer) Reset() {
	*x = RenameTablesTransformer{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenameTablesTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameTablesTransformer) ProtoMessage() {}

func (x *RenameTablesTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameTablesTransformer.ProtoReflect.Descriptor instead.
func (*RenameTablesTransformer) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{19}
}

func (x *RenameTablesTransformer) GetRenameTables() []*RenameTable {
	if x != nil {
		return x.RenameTables
	}
	return nil
}

type SkipEventsTransformer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tables        *TablesFilter          `protobuf:"bytes,1,opt,name=tables,proto3" json:"tables,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SkipEventsTransformer) Reset() {
	*x = SkipEventsTransformer{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SkipEventsTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkipEventsTransformer) ProtoMessage() {}

func (x *SkipEventsTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkipEventsTransformer.ProtoReflect.Descriptor instead.
func (*SkipEventsTransformer) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{20}
}

func (x *SkipEventsTransformer) GetTables() *TablesFilter {
	if x != nil {
		return x.Tables
	}
	return nil
}

// Override primary keys
type ReplacePrimaryKeyTransformer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of included and excluded tables
	Tables *TablesFilter `protobuf:"bytes,1,opt,name=tables,proto3" json:"tables,omitempty"`
	// List of columns to be used as primary keys
	Keys          []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplacePrimaryKeyTransformer) Reset() {
	*x = ReplacePrimaryKeyTransformer{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplacePrimaryKeyTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplacePrimaryKeyTransformer) ProtoMessage() {}

func (x *ReplacePrimaryKeyTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplacePrimaryKeyTransformer.ProtoReflect.Descriptor instead.
func (*ReplacePrimaryKeyTransformer) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{21}
}

func (x *ReplacePrimaryKeyTransformer) GetTables() *TablesFilter {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *ReplacePrimaryKeyTransformer) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

// Convert column values to strings
// The values will be converted depending on the source type
// Conversion rules are described here:
// https://cloud.yandex.com/en/docs/data-transfer/concepts/data-transformation#convert-to-string
type ToStringTransformer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of included and excluded tables
	Tables *TablesFilter `protobuf:"bytes,1,opt,name=tables,proto3" json:"tables,omitempty"`
	// List of included and excluded columns
	Columns       *ColumnsFilter `protobuf:"bytes,2,opt,name=columns,proto3" json:"columns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToStringTransformer) Reset() {
	*x = ToStringTransformer{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToStringTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToStringTransformer) ProtoMessage() {}

func (x *ToStringTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToStringTransformer.ProtoReflect.Descriptor instead.
func (*ToStringTransformer) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{22}
}

func (x *ToStringTransformer) GetTables() *TablesFilter {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *ToStringTransformer) GetColumns() *ColumnsFilter {
	if x != nil {
		return x.Columns
	}
	return nil
}

// Set the number of shards for particular tables and a list of columns whose
// values will be used for calculating a hash to determine a shard.
type SharderTransformer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of included and excluded tables
	Tables *TablesFilter `protobuf:"bytes,1,opt,name=tables,proto3" json:"tables,omitempty"`
	// List of included and excluded columns
	Columns *ColumnsFilter `protobuf:"bytes,2,opt,name=columns,proto3" json:"columns,omitempty"`
	// Number of shards
	ShardsCount   int64 `protobuf:"varint,3,opt,name=shards_count,json=shardsCount,proto3" json:"shards_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SharderTransformer) Reset() {
	*x = SharderTransformer{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SharderTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharderTransformer) ProtoMessage() {}

func (x *SharderTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharderTransformer.ProtoReflect.Descriptor instead.
func (*SharderTransformer) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{23}
}

func (x *SharderTransformer) GetTables() *TablesFilter {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *SharderTransformer) GetColumns() *ColumnsFilter {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *SharderTransformer) GetShardsCount() int64 {
	if x != nil {
		return x.ShardsCount
	}
	return 0
}

type RawDocGroupTransformer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tables        *TablesFilter          `protobuf:"bytes,1,opt,name=tables,proto3" json:"tables,omitempty"`
	Keys          []string               `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	Fields        []string               `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RawDocGroupTransformer) Reset() {
	*x = RawDocGroupTransformer{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RawDocGroupTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawDocGroupTransformer) ProtoMessage() {}

func (x *RawDocGroupTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawDocGroupTransformer.ProtoReflect.Descriptor instead.
func (*RawDocGroupTransformer) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{24}
}

func (x *RawDocGroupTransformer) GetTables() *TablesFilter {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *RawDocGroupTransformer) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *RawDocGroupTransformer) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type RawCdcDocGroupTransformer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keys          []string               `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	Fields        []string               `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RawCdcDocGroupTransformer) Reset() {
	*x = RawCdcDocGroupTransformer{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RawCdcDocGroupTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawCdcDocGroupTransformer) ProtoMessage() {}

func (x *RawCdcDocGroupTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawCdcDocGroupTransformer.ProtoReflect.Descriptor instead.
func (*RawCdcDocGroupTransformer) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{25}
}

func (x *RawCdcDocGroupTransformer) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *RawCdcDocGroupTransformer) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type SQLTransformer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tables        *TablesFilter          `protobuf:"bytes,1,opt,name=tables,proto3" json:"tables,omitempty"`
	Query         string                 `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SQLTransformer) Reset() {
	*x = SQLTransformer{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQLTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLTransformer) ProtoMessage() {}

func (x *SQLTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLTransformer.ProtoReflect.Descriptor instead.
func (*SQLTransformer) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{26}
}

func (x *SQLTransformer) GetTables() *TablesFilter {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *SQLTransformer) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type DBTTransformer struct {
	state             protoimpl.MessageState   `protogen:"open.v1"`
	GitRepositoryLink string                   `protobuf:"bytes,1,opt,name=git_repository_link,json=gitRepositoryLink,proto3" json:"git_repository_link,omitempty"`
	GitBranch         string                   `protobuf:"bytes,2,opt,name=git_branch,json=gitBranch,proto3" json:"git_branch,omitempty"`
	ProfileName       string                   `protobuf:"bytes,3,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	Operation         DBTTransformer_Operation `protobuf:"varint,4,opt,name=operation,proto3,enum=doublecloud.transfer.v1.DBTTransformer_Operation" json:"operation,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DBTTransformer) Reset() {
	*x = DBTTransformer{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DBTTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBTTransformer) ProtoMessage() {}

func (x *DBTTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBTTransformer.ProtoReflect.Descriptor instead.
func (*DBTTransformer) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{27}
}

func (x *DBTTransformer) GetGitRepositoryLink() string {
	if x != nil {
		return x.GitRepositoryLink
	}
	return ""
}

func (x *DBTTransformer) GetGitBranch() string {
	if x != nil {
		return x.GitBranch
	}
	return ""
}

func (x *DBTTransformer) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *DBTTransformer) GetOperation() DBTTransformer_Operation {
	if x != nil {
		return x.Operation
	}
	return DBTTransformer_OPERATION_UNSPECIFIED
}

// A transfer splits the X table into multiple tables (X_1, X_2, ..., X_n) based on
// data.
// If a row was located in the X table before it was split, it is now in the X_i
// table,
// where i is determined by the column list and split string parameters.
// Example:
// If the column list has two columns, month of birth and gender, specified and the
// split string states @,
// information about an employee whose name is John and who was born on February
// 11, 1984,
// from the Employees table will get to a new table named Employees@February@male.
type TableSplitterTransformer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of included and excluded tables
	Tables *TablesFilter `protobuf:"bytes,1,opt,name=tables,proto3" json:"tables,omitempty"`
	// Specify the columns in the tables to be partitioned.
	Columns []string `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
	// Specify the split string to be used for merging components in a new table name.
	Splitter      string `protobuf:"bytes,3,opt,name=splitter,proto3" json:"splitter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TableSplitterTransformer) Reset() {
	*x = TableSplitterTransformer{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableSplitterTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSplitterTransformer) ProtoMessage() {}

func (x *TableSplitterTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSplitterTransformer.ProtoReflect.Descriptor instead.
func (*TableSplitterTransformer) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{28}
}

func (x *TableSplitterTransformer) GetTables() *TablesFilter {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *TableSplitterTransformer) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *TableSplitterTransformer) GetSplitter() string {
	if x != nil {
		return x.Splitter
	}
	return ""
}

// This filter only applies to transfers with queues (Logbroker or Apache Kafka®)
// as a data source.
// When running a transfer, only the strings meeting the specified criteria remain
// in a changefeed.
type FilterRowsTransformer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of included and excluded tables
	Tables *TablesFilter `protobuf:"bytes,1,opt,name=tables,proto3" json:"tables,omitempty"`
	// Filtering criterion. This can be comparison operators for numeric, string, and
	// Boolean values,
	// comparison to NULL, and checking whether a substring is part of a string.
	// Details here:
	// https://cloud.yandex.com/en/docs/data-transfer/concepts/data-transformation#append-only-sources
	Filter        string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterRowsTransformer) Reset() {
	*x = FilterRowsTransformer{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterRowsTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterRowsTransformer) ProtoMessage() {}

func (x *FilterRowsTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterRowsTransformer.ProtoReflect.Descriptor instead.
func (*FilterRowsTransformer) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{29}
}

func (x *FilterRowsTransformer) GetTables() *TablesFilter {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *FilterRowsTransformer) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type NumberToFloatTransformer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tables        *TablesFilter          `protobuf:"bytes,1,opt,name=tables,proto3" json:"tables,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NumberToFloatTransformer) Reset() {
	*x = NumberToFloatTransformer{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NumberToFloatTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberToFloatTransformer) ProtoMessage() {}

func (x *NumberToFloatTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberToFloatTransformer.ProtoReflect.Descriptor instead.
func (*NumberToFloatTransformer) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{30}
}

func (x *NumberToFloatTransformer) GetTables() *TablesFilter {
	if x != nil {
		return x.Tables
	}
	return nil
}

// Some transformers may have limitations and only apply to some source-target
// pairs.
type Transformer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Transformer:
	//
	//	*Transformer_MaskField
	//	*Transformer_FilterColumns
	//	*Transformer_SkipEvents
	//	*Transformer_RenameTables
	//	*Transformer_ReplacePrimaryKey
	//	*Transformer_ConvertToString
	//	*Transformer_SharderTransformer
	//	*Transformer_Sql
	//	*Transformer_Dbt
	//	*Transformer_TableSplitterTransformer
	//	*Transformer_FilterRows
	//	*Transformer_NumberToFloatTransformer
	//	*Transformer_JsonMapperTransformer
	//	*Transformer_CloudFunctionTransformer
	Transformer   isTransformer_Transformer `protobuf_oneof:"transformer"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Transformer) Reset() {
	*x = Transformer{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transformer) ProtoMessage() {}

func (x *Transformer) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transformer.ProtoReflect.Descriptor instead.
func (*Transformer) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{31}
}

func (x *Transformer) GetTransformer() isTransformer_Transformer {
	if x != nil {
		return x.Transformer
	}
	return nil
}

func (x *Transformer) GetMaskField() *MaskFieldTransformer {
	if x != nil {
		if x, ok := x.Transformer.(*Transformer_MaskField); ok {
			return x.MaskField
		}
	}
	return nil
}

func (x *Transformer) GetFilterColumns() *FilterColumnsTransformer {
	if x != nil {
		if x, ok := x.Transformer.(*Transformer_FilterColumns); ok {
			return x.FilterColumns
		}
	}
	return nil
}

func (x *Transformer) GetSkipEvents() *SkipEventsTransformer {
	if x != nil {
		if x, ok := x.Transformer.(*Transformer_SkipEvents); ok {
			return x.SkipEvents
		}
	}
	return nil
}

func (x *Transformer) GetRenameTables() *RenameTablesTransformer {
	if x != nil {
		if x, ok := x.Transformer.(*Transformer_RenameTables); ok {
			return x.RenameTables
		}
	}
	return nil
}

func (x *Transformer) GetReplacePrimaryKey() *ReplacePrimaryKeyTransformer {
	if x != nil {
		if x, ok := x.Transformer.(*Transformer_ReplacePrimaryKey); ok {
			return x.ReplacePrimaryKey
		}
	}
	return nil
}

func (x *Transformer) GetConvertToString() *ToStringTransformer {
	if x != nil {
		if x, ok := x.Transformer.(*Transformer_ConvertToString); ok {
			return x.ConvertToString
		}
	}
	return nil
}

func (x *Transformer) GetSharderTransformer() *SharderTransformer {
	if x != nil {
		if x, ok := x.Transformer.(*Transformer_SharderTransformer); ok {
			return x.SharderTransformer
		}
	}
	return nil
}

func (x *Transformer) GetSql() *SQLTransformer {
	if x != nil {
		if x, ok := x.Transformer.(*Transformer_Sql); ok {
			return x.Sql
		}
	}
	return nil
}

func (x *Transformer) GetDbt() *DBTTransformer {
	if x != nil {
		if x, ok := x.Transformer.(*Transformer_Dbt); ok {
			return x.Dbt
		}
	}
	return nil
}

func (x *Transformer) GetTableSplitterTransformer() *TableSplitterTransformer {
	if x != nil {
		if x, ok := x.Transformer.(*Transformer_TableSplitterTransformer); ok {
			return x.TableSplitterTransformer
		}
	}
	return nil
}

func (x *Transformer) GetFilterRows() *FilterRowsTransformer {
	if x != nil {
		if x, ok := x.Transformer.(*Transformer_FilterRows); ok {
			return x.FilterRows
		}
	}
	return nil
}

func (x *Transformer) GetNumberToFloatTransformer() *NumberToFloatTransformer {
	if x != nil {
		if x, ok := x.Transformer.(*Transformer_NumberToFloatTransformer); ok {
			return x.NumberToFloatTransformer
		}
	}
	return nil
}

func (x *Transformer) GetJsonMapperTransformer() *JsonParserTransformer {
	if x != nil {
		if x, ok := x.Transformer.(*Transformer_JsonMapperTransformer); ok {
			return x.JsonMapperTransformer
		}
	}
	return nil
}

func (x *Transformer) GetCloudFunctionTransformer() *CloudFunctionTransformer {
	if x != nil {
		if x, ok := x.Transformer.(*Transformer_CloudFunctionTransformer); ok {
			return x.CloudFunctionTransformer
		}
	}
	return nil
}

type isTransformer_Transformer interface {
	isTransformer_Transformer()
}

type Transformer_MaskField struct {
	MaskField *MaskFieldTransformer `protobuf:"bytes,1,opt,name=mask_field,json=maskField,proto3,oneof"`
}

type Transformer_FilterColumns struct {
	FilterColumns *FilterColumnsTransformer `protobuf:"bytes,2,opt,name=filter_columns,json=filterColumns,proto3,oneof"`
}

type Transformer_SkipEvents struct {
	SkipEvents *SkipEventsTransformer `protobuf:"bytes,3,opt,name=skip_events,json=skipEvents,proto3,oneof"`
}

type Transformer_RenameTables struct {
	RenameTables *RenameTablesTransformer `protobuf:"bytes,4,opt,name=rename_tables,json=renameTables,proto3,oneof"`
}

type Transformer_ReplacePrimaryKey struct {
	ReplacePrimaryKey *ReplacePrimaryKeyTransformer `protobuf:"bytes,6,opt,name=replace_primary_key,json=replacePrimaryKey,proto3,oneof"`
}

type Transformer_ConvertToString struct {
	ConvertToString *ToStringTransformer `protobuf:"bytes,7,opt,name=convert_to_string,json=convertToString,proto3,oneof"`
}

type Transformer_SharderTransformer struct {
	SharderTransformer *SharderTransformer `protobuf:"bytes,9,opt,name=sharder_transformer,json=sharderTransformer,proto3,oneof"`
}

type Transformer_Sql struct {
	Sql *SQLTransformer `protobuf:"bytes,11,opt,name=sql,proto3,oneof"`
}

type Transformer_Dbt struct {
	Dbt *DBTTransformer `protobuf:"bytes,12,opt,name=dbt,proto3,oneof"`
}

type Transformer_TableSplitterTransformer struct {
	TableSplitterTransformer *TableSplitterTransformer `protobuf:"bytes,13,opt,name=table_splitter_transformer,json=tableSplitterTransformer,proto3,oneof"`
}

type Transformer_FilterRows struct {
	FilterRows *FilterRowsTransformer `protobuf:"bytes,14,opt,name=filter_rows,json=filterRows,proto3,oneof"`
}

type Transformer_NumberToFloatTransformer struct {
	NumberToFloatTransformer *NumberToFloatTransformer `protobuf:"bytes,15,opt,name=number_to_float_transformer,json=numberToFloatTransformer,proto3,oneof"`
}

type Transformer_JsonMapperTransformer struct {
	JsonMapperTransformer *JsonParserTransformer `protobuf:"bytes,17,opt,name=json_mapper_transformer,json=jsonMapperTransformer,proto3,oneof"`
}

type Transformer_CloudFunctionTransformer struct {
	CloudFunctionTransformer *CloudFunctionTransformer `protobuf:"bytes,18,opt,name=cloud_function_transformer,json=cloudFunctionTransformer,proto3,oneof"`
}

func (*Transformer_MaskField) isTransformer_Transformer() {}

func (*Transformer_FilterColumns) isTransformer_Transformer() {}

func (*Transformer_SkipEvents) isTransformer_Transformer() {}

func (*Transformer_RenameTables) isTransformer_Transformer() {}

func (*Transformer_ReplacePrimaryKey) isTransformer_Transformer() {}

func (*Transformer_ConvertToString) isTransformer_Transformer() {}

func (*Transformer_SharderTransformer) isTransformer_Transformer() {}

func (*Transformer_Sql) isTransformer_Transformer() {}

func (*Transformer_Dbt) isTransformer_Transformer() {}

func (*Transformer_TableSplitterTransformer) isTransformer_Transformer() {}

func (*Transformer_FilterRows) isTransformer_Transformer() {}

func (*Transformer_NumberToFloatTransformer) isTransformer_Transformer() {}

func (*Transformer_JsonMapperTransformer) isTransformer_Transformer() {}

func (*Transformer_CloudFunctionTransformer) isTransformer_Transformer() {}

type CloudFunctionTransformer struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Name          string                              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NameSpace     string                              `protobuf:"bytes,2,opt,name=name_space,json=nameSpace,proto3" json:"name_space,omitempty"`
	Options       *endpoint.DataTransformationOptions `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloudFunctionTransformer) Reset() {
	*x = CloudFunctionTransformer{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudFunctionTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudFunctionTransformer) ProtoMessage() {}

func (x *CloudFunctionTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudFunctionTransformer.ProtoReflect.Descriptor instead.
func (*CloudFunctionTransformer) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{32}
}

func (x *CloudFunctionTransformer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudFunctionTransformer) GetNameSpace() string {
	if x != nil {
		return x.NameSpace
	}
	return ""
}

func (x *CloudFunctionTransformer) GetOptions() *endpoint.DataTransformationOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type JsonParserTransformer struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Topic         string                        `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Config        *endpoint.GenericParserCommon `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JsonParserTransformer) Reset() {
	*x = JsonParserTransformer{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JsonParserTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonParserTransformer) ProtoMessage() {}

func (x *JsonParserTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonParserTransformer.ProtoReflect.Descriptor instead.
func (*JsonParserTransformer) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{33}
}

func (x *JsonParserTransformer) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *JsonParserTransformer) GetConfig() *endpoint.GenericParserCommon {
	if x != nil {
		return x.Config
	}
	return nil
}

// Transformation is converting data using special transformer functions.
// These functions are executed on a data stream, applied to each data change item,
// and transform them.
// A transformer can be run at both the metadata and data levels.
// Data can only be transformed if the source and target are of different types.
type Transformation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Transformers are set as a list.
	// When activating a transfer, a transformation plan is made for the tables that
	// match the specified criteria.
	// Transformers are applied to the tables in the sequence specified in the list.
	Transformers  []*Transformer `protobuf:"bytes,1,rep,name=transformers,proto3" json:"transformers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Transformation) Reset() {
	*x = Transformation{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transformation) ProtoMessage() {}

func (x *Transformation) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transformation.ProtoReflect.Descriptor instead.
func (*Transformation) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{34}
}

func (x *Transformation) GetTransformers() []*Transformer {
	if x != nil {
		return x.Transformers
	}
	return nil
}

type DataObjects struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	IncludeObjects []string               `protobuf:"bytes,1,rep,name=include_objects,json=includeObjects,proto3" json:"include_objects,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DataObjects) Reset() {
	*x = DataObjects{}
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataObjects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataObjects) ProtoMessage() {}

func (x *DataObjects) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_transfer_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataObjects.ProtoReflect.Descriptor instead.
func (*DataObjects) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP(), []int{35}
}

func (x *DataObjects) GetIncludeObjects() []string {
	if x != nil {
		return x.IncludeObjects
	}
	return nil
}

var File_doublecloud_transfer_v1_transfer_proto protoreflect.FileDescriptor

var file_doublecloud_transfer_v1_transfer_proto_rawDesc = []byte{
	0x0a, 0x26, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x1a, 0x2d, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x26, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc0, 0x06, 0x0a, 0x08, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x53, 0x0a, 0x10, 0x72, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x72, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x0f, 0x72,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x4f,
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x47, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x4a,
	0x04, 0x08, 0x0d, 0x10, 0x0f, 0x4a, 0x04, 0x08, 0x12, 0x10, 0x13, 0x22, 0xd1, 0x01, 0x0a, 0x07,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x10, 0x64, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x05, 0x22,
	0x36, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0xbf, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x4e, 0x0a, 0x08, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48,
	0x00, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4e, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x03, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x22, 0xdb, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x54, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x38, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x72, 0x6f,
	0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xa4, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x10, 0x44, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x37,
	0x0a, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52,
	0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x03,
	0x10, 0x08, 0x22, 0xb8, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x4c, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00, 0x52,
	0x0c, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x52, 0x0a,
	0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48,
	0x00, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x0e, 0x0a,
	0x0c, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x35, 0x0a,
	0x0e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x4a, 0x04,
	0x08, 0x01, 0x10, 0x04, 0x22, 0x7a, 0x0a, 0x0c, 0x4d, 0x61, 0x73, 0x6b, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x12, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x48, 0x00, 0x52, 0x10, 0x6d,
	0x61, 0x73, 0x6b, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x42,
	0x0f, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x3e, 0x0a, 0x10, 0x4d, 0x61, 0x73, 0x6b, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x61, 0x6c, 0x74,
	0x22, 0x5c, 0x0a, 0x0c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x61,
	0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x22, 0xb2, 0x01, 0x0a, 0x14, 0x4d, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x06, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x73, 0x6b, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x18, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x22, 0x3a, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x43, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x64, 0x0a, 0x17, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0d, 0x72,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x56, 0x0a, 0x15, 0x53, 0x6b, 0x69, 0x70, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12,
	0x3d, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x71,
	0x0a, 0x1c, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x4b, 0x65, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x3d,
	0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x22, 0x96, 0x01, 0x0a, 0x13, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x06, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x12, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x12, 0x3d, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x40, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x16, 0x52, 0x61, 0x77, 0x44, 0x6f, 0x63,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x12, 0x3d, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x4d, 0x0a, 0x19, 0x52,
	0x61, 0x77, 0x43, 0x64, 0x63, 0x44, 0x6f, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x65, 0x0a, 0x0e, 0x53, 0x51,
	0x4c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x06,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x22, 0xa5, 0x03, 0x0a, 0x0e, 0x44, 0x42, 0x54, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x67, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x69, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x69, 0x74, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x42, 0x54, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcf, 0x01, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55,
	0x49, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10,
	0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x41, 0x52, 0x53, 0x45, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x55, 0x4e, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x45, 0x44, 0x10, 0x06, 0x12, 0x16, 0x0a,
	0x12, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53,
	0x48, 0x4f, 0x54, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x08, 0x22, 0x8f, 0x01, 0x0a, 0x18, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x22, 0x6e, 0x0a, 0x15, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x59, 0x0a, 0x18, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xc2, 0x0a, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x0a, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x73,
	0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x5a, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x12, 0x51, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6b, 0x69, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x57, 0x0a, 0x0d, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0c, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x67,
	0x0a, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x5a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x5e, 0x0a, 0x13, 0x73, 0x68, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x12, 0x73, 0x68, 0x61, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x51, 0x4c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x00, 0x52, 0x03, 0x73, 0x71, 0x6c,
	0x12, 0x3b, 0x0a, 0x03, 0x64, 0x62, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x42, 0x54, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x00, 0x52, 0x03, 0x64, 0x62, 0x74, 0x12, 0x71, 0x0a,
	0x1a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x48, 0x00, 0x52, 0x18, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x12, 0x51, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x6f, 0x77, 0x73, 0x12, 0x72, 0x0a, 0x1b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x6f,
	0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x00, 0x52, 0x18, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x68, 0x0a, 0x17, 0x6a, 0x73, 0x6f, 0x6e, 0x5f,
	0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x00, 0x52, 0x15, 0x6a, 0x73, 0x6f, 0x6e,
	0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x12, 0x71, 0x0a, 0x1a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x00, 0x52, 0x18, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a,
	0x04, 0x08, 0x0a, 0x10, 0x0b, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x22, 0xa4, 0x01, 0x0a, 0x18,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x7c, 0x0a, 0x15, 0x4a, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x4d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x5a, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x22, 0x36, 0x0a, 0x0b,
	0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2a, 0x70, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f,
	0x41, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03, 0x2a, 0x9b, 0x01, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x04,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x05, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4e, 0x41, 0x50,
	0x53, 0x48, 0x4f, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f,
	0x4e, 0x45, 0x10, 0x08, 0x2a, 0xf1, 0x03, 0x0a, 0x1f, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x2e, 0x52, 0x45, 0x47, 0x55,
	0x4c, 0x41, 0x52, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28,
	0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54,
	0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56,
	0x41, 0x4c, 0x5f, 0x31, 0x35, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45,
	0x47, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c,
	0x5f, 0x33, 0x30, 0x4d, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x47, 0x55,
	0x4c, 0x41, 0x52, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x48,
	0x4f, 0x55, 0x52, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52,
	0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x32, 0x48, 0x4f, 0x55,
	0x52, 0x10, 0x05, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x53,
	0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x33, 0x48, 0x4f, 0x55, 0x52, 0x10,
	0x06, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x53, 0x4e, 0x41,
	0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x36, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x07, 0x12,
	0x2c, 0x0a, 0x28, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53,
	0x48, 0x4f, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x38, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x08, 0x12, 0x2d, 0x0a,
	0x29, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f,
	0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x56, 0x41, 0x4c, 0x5f, 0x31, 0x32, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x09, 0x12, 0x2a, 0x0a, 0x26,
	0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54,
	0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56,
	0x41, 0x4c, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x0a, 0x2a, 0x4c, 0x0a, 0x06, 0x46, 0x6c, 0x61, 0x76,
	0x6f, 0x72, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4d,
	0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04,
	0x54, 0x49, 0x4e, 0x59, 0x10, 0x04, 0x42, 0x45, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_doublecloud_transfer_v1_transfer_proto_rawDescOnce sync.Once
	file_doublecloud_transfer_v1_transfer_proto_rawDescData = file_doublecloud_transfer_v1_transfer_proto_rawDesc
)

func file_doublecloud_transfer_v1_transfer_proto_rawDescGZIP() []byte {
	file_doublecloud_transfer_v1_transfer_proto_rawDescOnce.Do(func() {
		file_doublecloud_transfer_v1_transfer_proto_rawDescData = protoimpl.X.CompressGZIP(file_doublecloud_transfer_v1_transfer_proto_rawDescData)
	})
	return file_doublecloud_transfer_v1_transfer_proto_rawDescData
}

var file_doublecloud_transfer_v1_transfer_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_doublecloud_transfer_v1_transfer_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_doublecloud_transfer_v1_transfer_proto_goTypes = []any{
	(TransferType)(0),                          // 0: doublecloud.transfer.v1.TransferType
	(TransferStatus)(0),                        // 1: doublecloud.transfer.v1.TransferStatus
	(RegularSnapshotScheduleInterval)(0),       // 2: doublecloud.transfer.v1.RegularSnapshotScheduleInterval
	(Flavor)(0),                                // 3: doublecloud.transfer.v1.Flavor
	(DBTTransformer_Operation)(0),              // 4: doublecloud.transfer.v1.DBTTransformer.Operation
	(*Transfer)(nil),                           // 5: doublecloud.transfer.v1.Transfer
	(*Runtime)(nil),                            // 6: doublecloud.transfer.v1.Runtime
	(*ServerlessRuntime)(nil),                  // 7: doublecloud.transfer.v1.ServerlessRuntime
	(*RegularSnapshot)(nil),                    // 8: doublecloud.transfer.v1.RegularSnapshot
	(*RegularSnapshotDisabled)(nil),            // 9: doublecloud.transfer.v1.RegularSnapshotDisabled
	(*RegularSnapshotSettings)(nil),            // 10: doublecloud.transfer.v1.RegularSnapshotSettings
	(*IncrementalTable)(nil),                   // 11: doublecloud.transfer.v1.IncrementalTable
	(*DedicatedRuntime)(nil),                   // 12: doublecloud.transfer.v1.DedicatedRuntime
	(*Settings)(nil),                           // 13: doublecloud.transfer.v1.Settings
	(*AutoSettings)(nil),                       // 14: doublecloud.transfer.v1.AutoSettings
	(*ManualSettings)(nil),                     // 15: doublecloud.transfer.v1.ManualSettings
	(*MaskFunction)(nil),                       // 16: doublecloud.transfer.v1.MaskFunction
	(*MaskFunctionHash)(nil),                   // 17: doublecloud.transfer.v1.MaskFunctionHash
	(*TablesFilter)(nil),                       // 18: doublecloud.transfer.v1.TablesFilter
	(*ColumnsFilter)(nil),                      // 19: doublecloud.transfer.v1.ColumnsFilter
	(*MaskFieldTransformer)(nil),               // 20: doublecloud.transfer.v1.MaskFieldTransformer
	(*FilterColumnsTransformer)(nil),           // 21: doublecloud.transfer.v1.FilterColumnsTransformer
	(*Table)(nil),                              // 22: doublecloud.transfer.v1.Table
	(*RenameTable)(nil),                        // 23: doublecloud.transfer.v1.RenameTable
	(*RenameTablesTransformer)(nil),            // 24: doublecloud.transfer.v1.RenameTablesTransformer
	(*SkipEventsTransformer)(nil),              // 25: doublecloud.transfer.v1.SkipEventsTransformer
	(*ReplacePrimaryKeyTransformer)(nil),       // 26: doublecloud.transfer.v1.ReplacePrimaryKeyTransformer
	(*ToStringTransformer)(nil),                // 27: doublecloud.transfer.v1.ToStringTransformer
	(*SharderTransformer)(nil),                 // 28: doublecloud.transfer.v1.SharderTransformer
	(*RawDocGroupTransformer)(nil),             // 29: doublecloud.transfer.v1.RawDocGroupTransformer
	(*RawCdcDocGroupTransformer)(nil),          // 30: doublecloud.transfer.v1.RawCdcDocGroupTransformer
	(*SQLTransformer)(nil),                     // 31: doublecloud.transfer.v1.SQLTransformer
	(*DBTTransformer)(nil),                     // 32: doublecloud.transfer.v1.DBTTransformer
	(*TableSplitterTransformer)(nil),           // 33: doublecloud.transfer.v1.TableSplitterTransformer
	(*FilterRowsTransformer)(nil),              // 34: doublecloud.transfer.v1.FilterRowsTransformer
	(*NumberToFloatTransformer)(nil),           // 35: doublecloud.transfer.v1.NumberToFloatTransformer
	(*Transformer)(nil),                        // 36: doublecloud.transfer.v1.Transformer
	(*CloudFunctionTransformer)(nil),           // 37: doublecloud.transfer.v1.CloudFunctionTransformer
	(*JsonParserTransformer)(nil),              // 38: doublecloud.transfer.v1.JsonParserTransformer
	(*Transformation)(nil),                     // 39: doublecloud.transfer.v1.Transformation
	(*DataObjects)(nil),                        // 40: doublecloud.transfer.v1.DataObjects
	nil,                                        // 41: doublecloud.transfer.v1.Transfer.LabelsEntry
	(*Endpoint)(nil),                           // 42: doublecloud.transfer.v1.Endpoint
	(*endpoint.DataTransformationOptions)(nil), // 43: doublecloud.transfer.v1.endpoint.DataTransformationOptions
	(*endpoint.GenericParserCommon)(nil),       // 44: doublecloud.transfer.v1.endpoint.GenericParserCommon
}
var file_doublecloud_transfer_v1_transfer_proto_depIdxs = []int32{
	41, // 0: doublecloud.transfer.v1.Transfer.labels:type_name -> doublecloud.transfer.v1.Transfer.LabelsEntry
	42, // 1: doublecloud.transfer.v1.Transfer.source:type_name -> doublecloud.transfer.v1.Endpoint
	42, // 2: doublecloud.transfer.v1.Transfer.target:type_name -> doublecloud.transfer.v1.Endpoint
	6,  // 3: doublecloud.transfer.v1.Transfer.runtime:type_name -> doublecloud.transfer.v1.Runtime
	1,  // 4: doublecloud.transfer.v1.Transfer.status:type_name -> doublecloud.transfer.v1.TransferStatus
	0,  // 5: doublecloud.transfer.v1.Transfer.type:type_name -> doublecloud.transfer.v1.TransferType
	8,  // 6: doublecloud.transfer.v1.Transfer.regular_snapshot:type_name -> doublecloud.transfer.v1.RegularSnapshot
	39, // 7: doublecloud.transfer.v1.Transfer.transformation:type_name -> doublecloud.transfer.v1.Transformation
	40, // 8: doublecloud.transfer.v1.Transfer.data_objects:type_name -> doublecloud.transfer.v1.DataObjects
	7,  // 9: doublecloud.transfer.v1.Runtime.serverless_runtime:type_name -> doublecloud.transfer.v1.ServerlessRuntime
	12, // 10: doublecloud.transfer.v1.Runtime.dedicated_runtime:type_name -> doublecloud.transfer.v1.DedicatedRuntime
	10, // 11: doublecloud.transfer.v1.RegularSnapshot.settings:type_name -> doublecloud.transfer.v1.RegularSnapshotSettings
	9,  // 12: doublecloud.transfer.v1.RegularSnapshot.disabled:type_name -> doublecloud.transfer.v1.RegularSnapshotDisabled
	2,  // 13: doublecloud.transfer.v1.RegularSnapshotSettings.schedule:type_name -> doublecloud.transfer.v1.RegularSnapshotScheduleInterval
	11, // 14: doublecloud.transfer.v1.RegularSnapshotSettings.tables:type_name -> doublecloud.transfer.v1.IncrementalTable
	3,  // 15: doublecloud.transfer.v1.DedicatedRuntime.flavor:type_name -> doublecloud.transfer.v1.Flavor
	13, // 16: doublecloud.transfer.v1.DedicatedRuntime.settings:type_name -> doublecloud.transfer.v1.Settings
	14, // 17: doublecloud.transfer.v1.Settings.auto_settings:type_name -> doublecloud.transfer.v1.AutoSettings
	15, // 18: doublecloud.transfer.v1.Settings.manual_settings:type_name -> doublecloud.transfer.v1.ManualSettings
	17, // 19: doublecloud.transfer.v1.MaskFunction.mask_function_hash:type_name -> doublecloud.transfer.v1.MaskFunctionHash
	18, // 20: doublecloud.transfer.v1.MaskFieldTransformer.tables:type_name -> doublecloud.transfer.v1.TablesFilter
	16, // 21: doublecloud.transfer.v1.MaskFieldTransformer.function:type_name -> doublecloud.transfer.v1.MaskFunction
	18, // 22: doublecloud.transfer.v1.FilterColumnsTransformer.tables:type_name -> doublecloud.transfer.v1.TablesFilter
	19, // 23: doublecloud.transfer.v1.FilterColumnsTransformer.columns:type_name -> doublecloud.transfer.v1.ColumnsFilter
	22, // 24: doublecloud.transfer.v1.RenameTable.original_name:type_name -> doublecloud.transfer.v1.Table
	22, // 25: doublecloud.transfer.v1.RenameTable.new_name:type_name -> doublecloud.transfer.v1.Table
	23, // 26: doublecloud.transfer.v1.RenameTablesTransformer.rename_tables:type_name -> doublecloud.transfer.v1.RenameTable
	18, // 27: doublecloud.transfer.v1.SkipEventsTransformer.tables:type_name -> doublecloud.transfer.v1.TablesFilter
	18, // 28: doublecloud.transfer.v1.ReplacePrimaryKeyTransformer.tables:type_name -> doublecloud.transfer.v1.TablesFilter
	18, // 29: doublecloud.transfer.v1.ToStringTransformer.tables:type_name -> doublecloud.transfer.v1.TablesFilter
	19, // 30: doublecloud.transfer.v1.ToStringTransformer.columns:type_name -> doublecloud.transfer.v1.ColumnsFilter
	18, // 31: doublecloud.transfer.v1.SharderTransformer.tables:type_name -> doublecloud.transfer.v1.TablesFilter
	19, // 32: doublecloud.transfer.v1.SharderTransformer.columns:type_name -> doublecloud.transfer.v1.ColumnsFilter
	18, // 33: doublecloud.transfer.v1.RawDocGroupTransformer.tables:type_name -> doublecloud.transfer.v1.TablesFilter
	18, // 34: doublecloud.transfer.v1.SQLTransformer.tables:type_name -> doublecloud.transfer.v1.TablesFilter
	4,  // 35: doublecloud.transfer.v1.DBTTransformer.operation:type_name -> doublecloud.transfer.v1.DBTTransformer.Operation
	18, // 36: doublecloud.transfer.v1.TableSplitterTransformer.tables:type_name -> doublecloud.transfer.v1.TablesFilter
	18, // 37: doublecloud.transfer.v1.FilterRowsTransformer.tables:type_name -> doublecloud.transfer.v1.TablesFilter
	18, // 38: doublecloud.transfer.v1.NumberToFloatTransformer.tables:type_name -> doublecloud.transfer.v1.TablesFilter
	20, // 39: doublecloud.transfer.v1.Transformer.mask_field:type_name -> doublecloud.transfer.v1.MaskFieldTransformer
	21, // 40: doublecloud.transfer.v1.Transformer.filter_columns:type_name -> doublecloud.transfer.v1.FilterColumnsTransformer
	25, // 41: doublecloud.transfer.v1.Transformer.skip_events:type_name -> doublecloud.transfer.v1.SkipEventsTransformer
	24, // 42: doublecloud.transfer.v1.Transformer.rename_tables:type_name -> doublecloud.transfer.v1.RenameTablesTransformer
	26, // 43: doublecloud.transfer.v1.Transformer.replace_primary_key:type_name -> doublecloud.transfer.v1.ReplacePrimaryKeyTransformer
	27, // 44: doublecloud.transfer.v1.Transformer.convert_to_string:type_name -> doublecloud.transfer.v1.ToStringTransformer
	28, // 45: doublecloud.transfer.v1.Transformer.sharder_transformer:type_name -> doublecloud.transfer.v1.SharderTransformer
	31, // 46: doublecloud.transfer.v1.Transformer.sql:type_name -> doublecloud.transfer.v1.SQLTransformer
	32, // 47: doublecloud.transfer.v1.Transformer.dbt:type_name -> doublecloud.transfer.v1.DBTTransformer
	33, // 48: doublecloud.transfer.v1.Transformer.table_splitter_transformer:type_name -> doublecloud.transfer.v1.TableSplitterTransformer
	34, // 49: doublecloud.transfer.v1.Transformer.filter_rows:type_name -> doublecloud.transfer.v1.FilterRowsTransformer
	35, // 50: doublecloud.transfer.v1.Transformer.number_to_float_transformer:type_name -> doublecloud.transfer.v1.NumberToFloatTransformer
	38, // 51: doublecloud.transfer.v1.Transformer.json_mapper_transformer:type_name -> doublecloud.transfer.v1.JsonParserTransformer
	37, // 52: doublecloud.transfer.v1.Transformer.cloud_function_transformer:type_name -> doublecloud.transfer.v1.CloudFunctionTransformer
	43, // 53: doublecloud.transfer.v1.CloudFunctionTransformer.options:type_name -> doublecloud.transfer.v1.endpoint.DataTransformationOptions
	44, // 54: doublecloud.transfer.v1.JsonParserTransformer.config:type_name -> doublecloud.transfer.v1.endpoint.GenericParserCommon
	36, // 55: doublecloud.transfer.v1.Transformation.transformers:type_name -> doublecloud.transfer.v1.Transformer
	56, // [56:56] is the sub-list for method output_type
	56, // [56:56] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_doublecloud_transfer_v1_transfer_proto_init() }
func file_doublecloud_transfer_v1_transfer_proto_init() {
	if File_doublecloud_transfer_v1_transfer_proto != nil {
		return
	}
	file_doublecloud_transfer_v1_endpoint_proto_init()
	file_doublecloud_transfer_v1_transfer_proto_msgTypes[1].OneofWrappers = []any{
		(*Runtime_ServerlessRuntime)(nil),
		(*Runtime_DedicatedRuntime)(nil),
	}
	file_doublecloud_transfer_v1_transfer_proto_msgTypes[3].OneofWrappers = []any{
		(*RegularSnapshot_Settings)(nil),
		(*RegularSnapshot_Disabled)(nil),
	}
	file_doublecloud_transfer_v1_transfer_proto_msgTypes[8].OneofWrappers = []any{
		(*Settings_AutoSettings)(nil),
		(*Settings_ManualSettings)(nil),
	}
	file_doublecloud_transfer_v1_transfer_proto_msgTypes[11].OneofWrappers = []any{
		(*MaskFunction_MaskFunctionHash)(nil),
	}
	file_doublecloud_transfer_v1_transfer_proto_msgTypes[31].OneofWrappers = []any{
		(*Transformer_MaskField)(nil),
		(*Transformer_FilterColumns)(nil),
		(*Transformer_SkipEvents)(nil),
		(*Transformer_RenameTables)(nil),
		(*Transformer_ReplacePrimaryKey)(nil),
		(*Transformer_ConvertToString)(nil),
		(*Transformer_SharderTransformer)(nil),
		(*Transformer_Sql)(nil),
		(*Transformer_Dbt)(nil),
		(*Transformer_TableSplitterTransformer)(nil),
		(*Transformer_FilterRows)(nil),
		(*Transformer_NumberToFloatTransformer)(nil),
		(*Transformer_JsonMapperTransformer)(nil),
		(*Transformer_CloudFunctionTransformer)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_doublecloud_transfer_v1_transfer_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_doublecloud_transfer_v1_transfer_proto_goTypes,
		DependencyIndexes: file_doublecloud_transfer_v1_transfer_proto_depIdxs,
		EnumInfos:         file_doublecloud_transfer_v1_transfer_proto_enumTypes,
		MessageInfos:      file_doublecloud_transfer_v1_transfer_proto_msgTypes,
	}.Build()
	File_doublecloud_transfer_v1_transfer_proto = out.File
	file_doublecloud_transfer_v1_transfer_proto_rawDesc = nil
	file_doublecloud_transfer_v1_transfer_proto_goTypes = nil
	file_doublecloud_transfer_v1_transfer_proto_depIdxs = nil
}
