// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: doublecloud/transfer/v1/endpoint.proto

package transfer

import (
	endpoint "github.com/doublecloud/go-genproto/doublecloud/transfer/v1/endpoint"
	airbyte "github.com/doublecloud/go-genproto/doublecloud/transfer/v1/endpoint/airbyte"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Endpoint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectId     string                 `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Labels        map[string]string      `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Settings      *EndpointSettings      `protobuf:"bytes,52,opt,name=settings,proto3" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Endpoint) Reset() {
	*x = Endpoint{}
	mi := &file_doublecloud_transfer_v1_endpoint_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoint) ProtoMessage() {}

func (x *Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_endpoint_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoint.ProtoReflect.Descriptor instead.
func (*Endpoint) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_endpoint_proto_rawDescGZIP(), []int{0}
}

func (x *Endpoint) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Endpoint) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Endpoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Endpoint) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Endpoint) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Endpoint) GetSettings() *EndpointSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type EndpointSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Settings:
	//
	//	*EndpointSettings_MysqlSource
	//	*EndpointSettings_PostgresSource
	//	*EndpointSettings_KafkaSource
	//	*EndpointSettings_MongoSource
	//	*EndpointSettings_ClickhouseSource
	//	*EndpointSettings_MysqlTarget
	//	*EndpointSettings_PostgresTarget
	//	*EndpointSettings_ClickhouseTarget
	//	*EndpointSettings_ObjectStorageTarget
	//	*EndpointSettings_KafkaTarget
	//	*EndpointSettings_MongoTarget
	//	*EndpointSettings_S3Source
	//	*EndpointSettings_AwsCloudtrailSource
	//	*EndpointSettings_BigQuerySource
	//	*EndpointSettings_FacebookMarketingSource
	//	*EndpointSettings_GoogleAdsSource
	//	*EndpointSettings_AmazonAdsSource
	//	*EndpointSettings_InstagramSource
	//	*EndpointSettings_LinkedinAdsSource
	//	*EndpointSettings_MssqlSource
	//	*EndpointSettings_RedshiftSource
	//	*EndpointSettings_SnowflakeSource
	//	*EndpointSettings_ObjectStorageSource
	//	*EndpointSettings_DatadogTarget
	//	*EndpointSettings_JiraSource
	//	*EndpointSettings_HubspotSource
	//	*EndpointSettings_CoralogixTarget
	//	*EndpointSettings_BigqueryTarget
	//	*EndpointSettings_MetricaSource
	//	*EndpointSettings_DynamodbSource
	//	*EndpointSettings_KinesisSource
	Settings      isEndpointSettings_Settings `protobuf_oneof:"settings"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndpointSettings) Reset() {
	*x = EndpointSettings{}
	mi := &file_doublecloud_transfer_v1_endpoint_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndpointSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointSettings) ProtoMessage() {}

func (x *EndpointSettings) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_endpoint_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointSettings.ProtoReflect.Descriptor instead.
func (*EndpointSettings) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_endpoint_proto_rawDescGZIP(), []int{1}
}

func (x *EndpointSettings) GetSettings() isEndpointSettings_Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *EndpointSettings) GetMysqlSource() *endpoint.MysqlSource {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_MysqlSource); ok {
			return x.MysqlSource
		}
	}
	return nil
}

func (x *EndpointSettings) GetPostgresSource() *endpoint.PostgresSource {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_PostgresSource); ok {
			return x.PostgresSource
		}
	}
	return nil
}

func (x *EndpointSettings) GetKafkaSource() *endpoint.KafkaSource {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_KafkaSource); ok {
			return x.KafkaSource
		}
	}
	return nil
}

func (x *EndpointSettings) GetMongoSource() *endpoint.MongoSource {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_MongoSource); ok {
			return x.MongoSource
		}
	}
	return nil
}

func (x *EndpointSettings) GetClickhouseSource() *endpoint.ClickhouseSource {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_ClickhouseSource); ok {
			return x.ClickhouseSource
		}
	}
	return nil
}

func (x *EndpointSettings) GetMysqlTarget() *endpoint.MysqlTarget {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_MysqlTarget); ok {
			return x.MysqlTarget
		}
	}
	return nil
}

func (x *EndpointSettings) GetPostgresTarget() *endpoint.PostgresTarget {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_PostgresTarget); ok {
			return x.PostgresTarget
		}
	}
	return nil
}

func (x *EndpointSettings) GetClickhouseTarget() *endpoint.ClickhouseTarget {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_ClickhouseTarget); ok {
			return x.ClickhouseTarget
		}
	}
	return nil
}

func (x *EndpointSettings) GetObjectStorageTarget() *endpoint.ObjectStorageTarget {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_ObjectStorageTarget); ok {
			return x.ObjectStorageTarget
		}
	}
	return nil
}

func (x *EndpointSettings) GetKafkaTarget() *endpoint.KafkaTarget {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_KafkaTarget); ok {
			return x.KafkaTarget
		}
	}
	return nil
}

func (x *EndpointSettings) GetMongoTarget() *endpoint.MongoTarget {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_MongoTarget); ok {
			return x.MongoTarget
		}
	}
	return nil
}

func (x *EndpointSettings) GetS3Source() *airbyte.S3Source {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_S3Source); ok {
			return x.S3Source
		}
	}
	return nil
}

func (x *EndpointSettings) GetAwsCloudtrailSource() *airbyte.AWSCloudTrailSource {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_AwsCloudtrailSource); ok {
			return x.AwsCloudtrailSource
		}
	}
	return nil
}

func (x *EndpointSettings) GetBigQuerySource() *airbyte.BigQuerySource {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_BigQuerySource); ok {
			return x.BigQuerySource
		}
	}
	return nil
}

func (x *EndpointSettings) GetFacebookMarketingSource() *airbyte.FacebookMarketingSource {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_FacebookMarketingSource); ok {
			return x.FacebookMarketingSource
		}
	}
	return nil
}

func (x *EndpointSettings) GetGoogleAdsSource() *airbyte.GoogleAdsSource {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_GoogleAdsSource); ok {
			return x.GoogleAdsSource
		}
	}
	return nil
}

func (x *EndpointSettings) GetAmazonAdsSource() *airbyte.AmazonAdsSource {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_AmazonAdsSource); ok {
			return x.AmazonAdsSource
		}
	}
	return nil
}

func (x *EndpointSettings) GetInstagramSource() *airbyte.InstagramSource {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_InstagramSource); ok {
			return x.InstagramSource
		}
	}
	return nil
}

func (x *EndpointSettings) GetLinkedinAdsSource() *airbyte.LinkedinAdsSource {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_LinkedinAdsSource); ok {
			return x.LinkedinAdsSource
		}
	}
	return nil
}

func (x *EndpointSettings) GetMssqlSource() *airbyte.MSSQLSource {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_MssqlSource); ok {
			return x.MssqlSource
		}
	}
	return nil
}

func (x *EndpointSettings) GetRedshiftSource() *airbyte.RedshiftSource {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_RedshiftSource); ok {
			return x.RedshiftSource
		}
	}
	return nil
}

func (x *EndpointSettings) GetSnowflakeSource() *airbyte.SnowflakeSource {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_SnowflakeSource); ok {
			return x.SnowflakeSource
		}
	}
	return nil
}

func (x *EndpointSettings) GetObjectStorageSource() *endpoint.ObjectStorageSource {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_ObjectStorageSource); ok {
			return x.ObjectStorageSource
		}
	}
	return nil
}

func (x *EndpointSettings) GetDatadogTarget() *endpoint.DatadogTarget {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_DatadogTarget); ok {
			return x.DatadogTarget
		}
	}
	return nil
}

func (x *EndpointSettings) GetJiraSource() *airbyte.JiraSource {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_JiraSource); ok {
			return x.JiraSource
		}
	}
	return nil
}

func (x *EndpointSettings) GetHubspotSource() *airbyte.HubspotSource {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_HubspotSource); ok {
			return x.HubspotSource
		}
	}
	return nil
}

func (x *EndpointSettings) GetCoralogixTarget() *endpoint.CoralogixTarget {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_CoralogixTarget); ok {
			return x.CoralogixTarget
		}
	}
	return nil
}

func (x *EndpointSettings) GetBigqueryTarget() *endpoint.BigQueryTarget {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_BigqueryTarget); ok {
			return x.BigqueryTarget
		}
	}
	return nil
}

func (x *EndpointSettings) GetMetricaSource() *endpoint.MetricaSource {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_MetricaSource); ok {
			return x.MetricaSource
		}
	}
	return nil
}

func (x *EndpointSettings) GetDynamodbSource() *airbyte.DynamodbSource {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_DynamodbSource); ok {
			return x.DynamodbSource
		}
	}
	return nil
}

func (x *EndpointSettings) GetKinesisSource() *endpoint.KinesisSource {
	if x != nil {
		if x, ok := x.Settings.(*EndpointSettings_KinesisSource); ok {
			return x.KinesisSource
		}
	}
	return nil
}

type isEndpointSettings_Settings interface {
	isEndpointSettings_Settings()
}

type EndpointSettings_MysqlSource struct {
	MysqlSource *endpoint.MysqlSource `protobuf:"bytes,1,opt,name=mysql_source,json=mysqlSource,proto3,oneof"`
}

type EndpointSettings_PostgresSource struct {
	PostgresSource *endpoint.PostgresSource `protobuf:"bytes,2,opt,name=postgres_source,json=postgresSource,proto3,oneof"`
}

type EndpointSettings_KafkaSource struct {
	KafkaSource *endpoint.KafkaSource `protobuf:"bytes,8,opt,name=kafka_source,json=kafkaSource,proto3,oneof"`
}

type EndpointSettings_MongoSource struct {
	MongoSource *endpoint.MongoSource `protobuf:"bytes,9,opt,name=mongo_source,json=mongoSource,proto3,oneof"`
}

type EndpointSettings_ClickhouseSource struct {
	ClickhouseSource *endpoint.ClickhouseSource `protobuf:"bytes,16,opt,name=clickhouse_source,json=clickhouseSource,proto3,oneof"`
}

type EndpointSettings_MysqlTarget struct {
	MysqlTarget *endpoint.MysqlTarget `protobuf:"bytes,101,opt,name=mysql_target,json=mysqlTarget,proto3,oneof"`
}

type EndpointSettings_PostgresTarget struct {
	PostgresTarget *endpoint.PostgresTarget `protobuf:"bytes,102,opt,name=postgres_target,json=postgresTarget,proto3,oneof"`
}

type EndpointSettings_ClickhouseTarget struct {
	ClickhouseTarget *endpoint.ClickhouseTarget `protobuf:"bytes,104,opt,name=clickhouse_target,json=clickhouseTarget,proto3,oneof"`
}

type EndpointSettings_ObjectStorageTarget struct {
	ObjectStorageTarget *endpoint.ObjectStorageTarget `protobuf:"bytes,109,opt,name=object_storage_target,json=objectStorageTarget,proto3,oneof"`
}

type EndpointSettings_KafkaTarget struct {
	KafkaTarget *endpoint.KafkaTarget `protobuf:"bytes,110,opt,name=kafka_target,json=kafkaTarget,proto3,oneof"`
}

type EndpointSettings_MongoTarget struct {
	MongoTarget *endpoint.MongoTarget `protobuf:"bytes,111,opt,name=mongo_target,json=mongoTarget,proto3,oneof"`
}

type EndpointSettings_S3Source struct {
	S3Source *airbyte.S3Source `protobuf:"bytes,124,opt,name=s3_source,json=s3Source,proto3,oneof"`
}

type EndpointSettings_AwsCloudtrailSource struct {
	AwsCloudtrailSource *airbyte.AWSCloudTrailSource `protobuf:"bytes,127,opt,name=aws_cloudtrail_source,json=awsCloudtrailSource,proto3,oneof"`
}

type EndpointSettings_BigQuerySource struct {
	BigQuerySource *airbyte.BigQuerySource `protobuf:"bytes,128,opt,name=big_query_source,json=bigQuerySource,proto3,oneof"`
}

type EndpointSettings_FacebookMarketingSource struct {
	FacebookMarketingSource *airbyte.FacebookMarketingSource `protobuf:"bytes,130,opt,name=facebook_marketing_source,json=facebookMarketingSource,proto3,oneof"`
}

type EndpointSettings_GoogleAdsSource struct {
	GoogleAdsSource *airbyte.GoogleAdsSource `protobuf:"bytes,132,opt,name=google_ads_source,json=googleAdsSource,proto3,oneof"`
}

type EndpointSettings_AmazonAdsSource struct {
	AmazonAdsSource *airbyte.AmazonAdsSource `protobuf:"bytes,134,opt,name=amazon_ads_source,json=amazonAdsSource,proto3,oneof"`
}

type EndpointSettings_InstagramSource struct {
	InstagramSource *airbyte.InstagramSource `protobuf:"bytes,136,opt,name=instagram_source,json=instagramSource,proto3,oneof"`
}

type EndpointSettings_LinkedinAdsSource struct {
	LinkedinAdsSource *airbyte.LinkedinAdsSource `protobuf:"bytes,137,opt,name=linkedin_ads_source,json=linkedinAdsSource,proto3,oneof"`
}

type EndpointSettings_MssqlSource struct {
	MssqlSource *airbyte.MSSQLSource `protobuf:"bytes,138,opt,name=mssql_source,json=mssqlSource,proto3,oneof"`
}

type EndpointSettings_RedshiftSource struct {
	RedshiftSource *airbyte.RedshiftSource `protobuf:"bytes,139,opt,name=redshift_source,json=redshiftSource,proto3,oneof"`
}

type EndpointSettings_SnowflakeSource struct {
	SnowflakeSource *airbyte.SnowflakeSource `protobuf:"bytes,148,opt,name=snowflake_source,json=snowflakeSource,proto3,oneof"`
}

type EndpointSettings_ObjectStorageSource struct {
	ObjectStorageSource *endpoint.ObjectStorageSource `protobuf:"bytes,153,opt,name=object_storage_source,json=objectStorageSource,proto3,oneof"`
}

type EndpointSettings_DatadogTarget struct {
	DatadogTarget *endpoint.DatadogTarget `protobuf:"bytes,154,opt,name=datadog_target,json=datadogTarget,proto3,oneof"`
}

type EndpointSettings_JiraSource struct {
	JiraSource *airbyte.JiraSource `protobuf:"bytes,155,opt,name=jira_source,json=jiraSource,proto3,oneof"`
}

type EndpointSettings_HubspotSource struct {
	HubspotSource *airbyte.HubspotSource `protobuf:"bytes,156,opt,name=hubspot_source,json=hubspotSource,proto3,oneof"`
}

type EndpointSettings_CoralogixTarget struct {
	CoralogixTarget *endpoint.CoralogixTarget `protobuf:"bytes,157,opt,name=coralogix_target,json=coralogixTarget,proto3,oneof"`
}

type EndpointSettings_BigqueryTarget struct {
	BigqueryTarget *endpoint.BigQueryTarget `protobuf:"bytes,158,opt,name=bigquery_target,json=bigqueryTarget,proto3,oneof"`
}

type EndpointSettings_MetricaSource struct {
	MetricaSource *endpoint.MetricaSource `protobuf:"bytes,160,opt,name=metrica_source,json=metricaSource,proto3,oneof"`
}

type EndpointSettings_DynamodbSource struct {
	DynamodbSource *airbyte.DynamodbSource `protobuf:"bytes,163,opt,name=dynamodb_source,json=dynamodbSource,proto3,oneof"`
}

type EndpointSettings_KinesisSource struct {
	KinesisSource *endpoint.KinesisSource `protobuf:"bytes,164,opt,name=kinesis_source,json=kinesisSource,proto3,oneof"`
}

func (*EndpointSettings_MysqlSource) isEndpointSettings_Settings() {}

func (*EndpointSettings_PostgresSource) isEndpointSettings_Settings() {}

func (*EndpointSettings_KafkaSource) isEndpointSettings_Settings() {}

func (*EndpointSettings_MongoSource) isEndpointSettings_Settings() {}

func (*EndpointSettings_ClickhouseSource) isEndpointSettings_Settings() {}

func (*EndpointSettings_MysqlTarget) isEndpointSettings_Settings() {}

func (*EndpointSettings_PostgresTarget) isEndpointSettings_Settings() {}

func (*EndpointSettings_ClickhouseTarget) isEndpointSettings_Settings() {}

func (*EndpointSettings_ObjectStorageTarget) isEndpointSettings_Settings() {}

func (*EndpointSettings_KafkaTarget) isEndpointSettings_Settings() {}

func (*EndpointSettings_MongoTarget) isEndpointSettings_Settings() {}

func (*EndpointSettings_S3Source) isEndpointSettings_Settings() {}

func (*EndpointSettings_AwsCloudtrailSource) isEndpointSettings_Settings() {}

func (*EndpointSettings_BigQuerySource) isEndpointSettings_Settings() {}

func (*EndpointSettings_FacebookMarketingSource) isEndpointSettings_Settings() {}

func (*EndpointSettings_GoogleAdsSource) isEndpointSettings_Settings() {}

func (*EndpointSettings_AmazonAdsSource) isEndpointSettings_Settings() {}

func (*EndpointSettings_InstagramSource) isEndpointSettings_Settings() {}

func (*EndpointSettings_LinkedinAdsSource) isEndpointSettings_Settings() {}

func (*EndpointSettings_MssqlSource) isEndpointSettings_Settings() {}

func (*EndpointSettings_RedshiftSource) isEndpointSettings_Settings() {}

func (*EndpointSettings_SnowflakeSource) isEndpointSettings_Settings() {}

func (*EndpointSettings_ObjectStorageSource) isEndpointSettings_Settings() {}

func (*EndpointSettings_DatadogTarget) isEndpointSettings_Settings() {}

func (*EndpointSettings_JiraSource) isEndpointSettings_Settings() {}

func (*EndpointSettings_HubspotSource) isEndpointSettings_Settings() {}

func (*EndpointSettings_CoralogixTarget) isEndpointSettings_Settings() {}

func (*EndpointSettings_BigqueryTarget) isEndpointSettings_Settings() {}

func (*EndpointSettings_MetricaSource) isEndpointSettings_Settings() {}

func (*EndpointSettings_DynamodbSource) isEndpointSettings_Settings() {}

func (*EndpointSettings_KinesisSource) isEndpointSettings_Settings() {}

var File_doublecloud_transfer_v1_endpoint_proto protoreflect.FileDescriptor

var file_doublecloud_transfer_v1_endpoint_proto_rawDesc = []byte{
	0x0a, 0x26, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x1a, 0x31, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x61, 0x69, 0x72, 0x62, 0x79,
	0x74, 0x65, 0x2f, 0x73, 0x33, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x3e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x61, 0x69, 0x72, 0x62, 0x79, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x64,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x45, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x61, 0x69, 0x72, 0x62, 0x79, 0x74, 0x65, 0x2f, 0x61, 0x77, 0x73,
	0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x61, 0x69, 0x72, 0x62,
	0x79, 0x74, 0x65, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x61, 0x69, 0x72, 0x62,
	0x79, 0x74, 0x65, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x61, 0x69, 0x72, 0x62,
	0x79, 0x74, 0x65, 0x2f, 0x6d, 0x73, 0x73, 0x71, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x40, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x61, 0x69, 0x72, 0x62, 0x79, 0x74, 0x65,
	0x2f, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x48, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x61, 0x69, 0x72, 0x62, 0x79,
	0x74, 0x65, 0x2f, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x42, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x61, 0x69, 0x72, 0x62, 0x79, 0x74, 0x65, 0x2f, 0x6c, 0x69, 0x6e,
	0x6b, 0x65, 0x64, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x61, 0x69, 0x72, 0x62, 0x79, 0x74, 0x65,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x40, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x61, 0x69, 0x72, 0x62, 0x79, 0x74,
	0x65, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x73, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x61, 0x69, 0x72, 0x62,
	0x79, 0x74, 0x65, 0x2f, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x61, 0x69, 0x72,
	0x62, 0x79, 0x74, 0x65, 0x2f, 0x6a, 0x69, 0x72, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3d, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x61, 0x69, 0x72, 0x62, 0x79, 0x74, 0x65,
	0x2f, 0x68, 0x75, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc4, 0x02, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x45,
	0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x34, 0x22, 0xd9, 0x18, 0x0a,
	0x10, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x52, 0x0a, 0x0c, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x52, 0x0a, 0x0c, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4b, 0x61, 0x66, 0x6b,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6d,
	0x6f, 0x6e, 0x67, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x61, 0x0a, 0x11, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x52, 0x0a,
	0x0c, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x5b, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0e,
	0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x61,
	0x0a, 0x11, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x6b, 0x0a, 0x15, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x52,
	0x0a, 0x0c, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x6e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x52, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x6e, 0x67,
	0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x67, 0x6f,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x51, 0x0a, 0x09, 0x73, 0x33, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x69, 0x72,
	0x62, 0x79, 0x74, 0x65, 0x2e, 0x53, 0x33, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x73, 0x33, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x73, 0x0a, 0x15, 0x61, 0x77, 0x73,
	0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x69, 0x72, 0x62,
	0x79, 0x74, 0x65, 0x2e, 0x41, 0x57, 0x53, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x72, 0x61, 0x69,
	0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x13, 0x61, 0x77, 0x73, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x65,
	0x0a, 0x10, 0x62, 0x69, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x69, 0x72,
	0x62, 0x79, 0x74, 0x65, 0x2e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x19, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x69,
	0x72, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x17, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x68, 0x0a, 0x11, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x5f, 0x61, 0x64, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x84, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x69, 0x72, 0x62, 0x79, 0x74, 0x65, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x0f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x68, 0x0a, 0x11, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x73,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x61, 0x69, 0x72, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e,
	0x41, 0x64, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x6d, 0x61,
	0x7a, 0x6f, 0x6e, 0x41, 0x64, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x10,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x69, 0x72, 0x62, 0x79,
	0x74, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x13, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x69,
	0x6e, 0x5f, 0x61, 0x64, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x89, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x69, 0x72, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x69, 0x6e, 0x41, 0x64, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x11, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x69, 0x6e, 0x41, 0x64, 0x73, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x0c, 0x6d, 0x73, 0x73, 0x71, 0x6c, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x61, 0x69, 0x72, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x4d, 0x53, 0x53, 0x51, 0x4c, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x73, 0x73, 0x71, 0x6c, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x64, 0x0a, 0x0f, 0x72, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x61, 0x69, 0x72, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x10, 0x73, 0x6e, 0x6f, 0x77,
	0x66, 0x6c, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x94, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x69, 0x72, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x53,
	0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x0f, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x6c, 0x0a, 0x15, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x13, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x59, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x64, 0x6f, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x64, 0x6f, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x58, 0x0a, 0x0b, 0x6a, 0x69,
	0x72, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x61, 0x69, 0x72, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x4a, 0x69, 0x72, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6a, 0x69, 0x72, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x61, 0x0a, 0x0e, 0x68, 0x75, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x61, 0x69, 0x72, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x48, 0x75, 0x62, 0x73, 0x70, 0x6f, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x68, 0x75, 0x62, 0x73, 0x70, 0x6f,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x10, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x9d, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x5c, 0x0a, 0x0f, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x9e, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x59, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x64, 0x0a, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x61,
	0x69, 0x72, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64,
	0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x6b, 0x69, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x4b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x0d, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4a, 0x04,
	0x08, 0x03, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x10, 0x4a, 0x04, 0x08, 0x11, 0x10, 0x65,
	0x4a, 0x04, 0x08, 0x67, 0x10, 0x68, 0x4a, 0x04, 0x08, 0x69, 0x10, 0x6d, 0x4a, 0x04, 0x08, 0x70,
	0x10, 0x7c, 0x4a, 0x04, 0x08, 0x7d, 0x10, 0x7f, 0x4a, 0x06, 0x08, 0x81, 0x01, 0x10, 0x82, 0x01,
	0x4a, 0x06, 0x08, 0x83, 0x01, 0x10, 0x84, 0x01, 0x4a, 0x06, 0x08, 0x85, 0x01, 0x10, 0x86, 0x01,
	0x4a, 0x06, 0x08, 0x87, 0x01, 0x10, 0x88, 0x01, 0x4a, 0x06, 0x08, 0x8c, 0x01, 0x10, 0x94, 0x01,
	0x4a, 0x06, 0x08, 0x95, 0x01, 0x10, 0x99, 0x01, 0x4a, 0x06, 0x08, 0x9f, 0x01, 0x10, 0xa0, 0x01,
	0x4a, 0x06, 0x08, 0xa1, 0x01, 0x10, 0xa3, 0x01, 0x42, 0x45, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_doublecloud_transfer_v1_endpoint_proto_rawDescOnce sync.Once
	file_doublecloud_transfer_v1_endpoint_proto_rawDescData = file_doublecloud_transfer_v1_endpoint_proto_rawDesc
)

func file_doublecloud_transfer_v1_endpoint_proto_rawDescGZIP() []byte {
	file_doublecloud_transfer_v1_endpoint_proto_rawDescOnce.Do(func() {
		file_doublecloud_transfer_v1_endpoint_proto_rawDescData = protoimpl.X.CompressGZIP(file_doublecloud_transfer_v1_endpoint_proto_rawDescData)
	})
	return file_doublecloud_transfer_v1_endpoint_proto_rawDescData
}

var file_doublecloud_transfer_v1_endpoint_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_doublecloud_transfer_v1_endpoint_proto_goTypes = []any{
	(*Endpoint)(nil),                        // 0: doublecloud.transfer.v1.Endpoint
	(*EndpointSettings)(nil),                // 1: doublecloud.transfer.v1.EndpointSettings
	nil,                                     // 2: doublecloud.transfer.v1.Endpoint.LabelsEntry
	(*endpoint.MysqlSource)(nil),            // 3: doublecloud.transfer.v1.endpoint.MysqlSource
	(*endpoint.PostgresSource)(nil),         // 4: doublecloud.transfer.v1.endpoint.PostgresSource
	(*endpoint.KafkaSource)(nil),            // 5: doublecloud.transfer.v1.endpoint.KafkaSource
	(*endpoint.MongoSource)(nil),            // 6: doublecloud.transfer.v1.endpoint.MongoSource
	(*endpoint.ClickhouseSource)(nil),       // 7: doublecloud.transfer.v1.endpoint.ClickhouseSource
	(*endpoint.MysqlTarget)(nil),            // 8: doublecloud.transfer.v1.endpoint.MysqlTarget
	(*endpoint.PostgresTarget)(nil),         // 9: doublecloud.transfer.v1.endpoint.PostgresTarget
	(*endpoint.ClickhouseTarget)(nil),       // 10: doublecloud.transfer.v1.endpoint.ClickhouseTarget
	(*endpoint.ObjectStorageTarget)(nil),    // 11: doublecloud.transfer.v1.endpoint.ObjectStorageTarget
	(*endpoint.KafkaTarget)(nil),            // 12: doublecloud.transfer.v1.endpoint.KafkaTarget
	(*endpoint.MongoTarget)(nil),            // 13: doublecloud.transfer.v1.endpoint.MongoTarget
	(*airbyte.S3Source)(nil),                // 14: doublecloud.transfer.v1.endpoint.airbyte.S3Source
	(*airbyte.AWSCloudTrailSource)(nil),     // 15: doublecloud.transfer.v1.endpoint.airbyte.AWSCloudTrailSource
	(*airbyte.BigQuerySource)(nil),          // 16: doublecloud.transfer.v1.endpoint.airbyte.BigQuerySource
	(*airbyte.FacebookMarketingSource)(nil), // 17: doublecloud.transfer.v1.endpoint.airbyte.FacebookMarketingSource
	(*airbyte.GoogleAdsSource)(nil),         // 18: doublecloud.transfer.v1.endpoint.airbyte.GoogleAdsSource
	(*airbyte.AmazonAdsSource)(nil),         // 19: doublecloud.transfer.v1.endpoint.airbyte.AmazonAdsSource
	(*airbyte.InstagramSource)(nil),         // 20: doublecloud.transfer.v1.endpoint.airbyte.InstagramSource
	(*airbyte.LinkedinAdsSource)(nil),       // 21: doublecloud.transfer.v1.endpoint.airbyte.LinkedinAdsSource
	(*airbyte.MSSQLSource)(nil),             // 22: doublecloud.transfer.v1.endpoint.airbyte.MSSQLSource
	(*airbyte.RedshiftSource)(nil),          // 23: doublecloud.transfer.v1.endpoint.airbyte.RedshiftSource
	(*airbyte.SnowflakeSource)(nil),         // 24: doublecloud.transfer.v1.endpoint.airbyte.SnowflakeSource
	(*endpoint.ObjectStorageSource)(nil),    // 25: doublecloud.transfer.v1.endpoint.ObjectStorageSource
	(*endpoint.DatadogTarget)(nil),          // 26: doublecloud.transfer.v1.endpoint.DatadogTarget
	(*airbyte.JiraSource)(nil),              // 27: doublecloud.transfer.v1.endpoint.airbyte.JiraSource
	(*airbyte.HubspotSource)(nil),           // 28: doublecloud.transfer.v1.endpoint.airbyte.HubspotSource
	(*endpoint.CoralogixTarget)(nil),        // 29: doublecloud.transfer.v1.endpoint.CoralogixTarget
	(*endpoint.BigQueryTarget)(nil),         // 30: doublecloud.transfer.v1.endpoint.BigQueryTarget
	(*endpoint.MetricaSource)(nil),          // 31: doublecloud.transfer.v1.endpoint.MetricaSource
	(*airbyte.DynamodbSource)(nil),          // 32: doublecloud.transfer.v1.endpoint.airbyte.DynamodbSource
	(*endpoint.KinesisSource)(nil),          // 33: doublecloud.transfer.v1.endpoint.KinesisSource
}
var file_doublecloud_transfer_v1_endpoint_proto_depIdxs = []int32{
	2,  // 0: doublecloud.transfer.v1.Endpoint.labels:type_name -> doublecloud.transfer.v1.Endpoint.LabelsEntry
	1,  // 1: doublecloud.transfer.v1.Endpoint.settings:type_name -> doublecloud.transfer.v1.EndpointSettings
	3,  // 2: doublecloud.transfer.v1.EndpointSettings.mysql_source:type_name -> doublecloud.transfer.v1.endpoint.MysqlSource
	4,  // 3: doublecloud.transfer.v1.EndpointSettings.postgres_source:type_name -> doublecloud.transfer.v1.endpoint.PostgresSource
	5,  // 4: doublecloud.transfer.v1.EndpointSettings.kafka_source:type_name -> doublecloud.transfer.v1.endpoint.KafkaSource
	6,  // 5: doublecloud.transfer.v1.EndpointSettings.mongo_source:type_name -> doublecloud.transfer.v1.endpoint.MongoSource
	7,  // 6: doublecloud.transfer.v1.EndpointSettings.clickhouse_source:type_name -> doublecloud.transfer.v1.endpoint.ClickhouseSource
	8,  // 7: doublecloud.transfer.v1.EndpointSettings.mysql_target:type_name -> doublecloud.transfer.v1.endpoint.MysqlTarget
	9,  // 8: doublecloud.transfer.v1.EndpointSettings.postgres_target:type_name -> doublecloud.transfer.v1.endpoint.PostgresTarget
	10, // 9: doublecloud.transfer.v1.EndpointSettings.clickhouse_target:type_name -> doublecloud.transfer.v1.endpoint.ClickhouseTarget
	11, // 10: doublecloud.transfer.v1.EndpointSettings.object_storage_target:type_name -> doublecloud.transfer.v1.endpoint.ObjectStorageTarget
	12, // 11: doublecloud.transfer.v1.EndpointSettings.kafka_target:type_name -> doublecloud.transfer.v1.endpoint.KafkaTarget
	13, // 12: doublecloud.transfer.v1.EndpointSettings.mongo_target:type_name -> doublecloud.transfer.v1.endpoint.MongoTarget
	14, // 13: doublecloud.transfer.v1.EndpointSettings.s3_source:type_name -> doublecloud.transfer.v1.endpoint.airbyte.S3Source
	15, // 14: doublecloud.transfer.v1.EndpointSettings.aws_cloudtrail_source:type_name -> doublecloud.transfer.v1.endpoint.airbyte.AWSCloudTrailSource
	16, // 15: doublecloud.transfer.v1.EndpointSettings.big_query_source:type_name -> doublecloud.transfer.v1.endpoint.airbyte.BigQuerySource
	17, // 16: doublecloud.transfer.v1.EndpointSettings.facebook_marketing_source:type_name -> doublecloud.transfer.v1.endpoint.airbyte.FacebookMarketingSource
	18, // 17: doublecloud.transfer.v1.EndpointSettings.google_ads_source:type_name -> doublecloud.transfer.v1.endpoint.airbyte.GoogleAdsSource
	19, // 18: doublecloud.transfer.v1.EndpointSettings.amazon_ads_source:type_name -> doublecloud.transfer.v1.endpoint.airbyte.AmazonAdsSource
	20, // 19: doublecloud.transfer.v1.EndpointSettings.instagram_source:type_name -> doublecloud.transfer.v1.endpoint.airbyte.InstagramSource
	21, // 20: doublecloud.transfer.v1.EndpointSettings.linkedin_ads_source:type_name -> doublecloud.transfer.v1.endpoint.airbyte.LinkedinAdsSource
	22, // 21: doublecloud.transfer.v1.EndpointSettings.mssql_source:type_name -> doublecloud.transfer.v1.endpoint.airbyte.MSSQLSource
	23, // 22: doublecloud.transfer.v1.EndpointSettings.redshift_source:type_name -> doublecloud.transfer.v1.endpoint.airbyte.RedshiftSource
	24, // 23: doublecloud.transfer.v1.EndpointSettings.snowflake_source:type_name -> doublecloud.transfer.v1.endpoint.airbyte.SnowflakeSource
	25, // 24: doublecloud.transfer.v1.EndpointSettings.object_storage_source:type_name -> doublecloud.transfer.v1.endpoint.ObjectStorageSource
	26, // 25: doublecloud.transfer.v1.EndpointSettings.datadog_target:type_name -> doublecloud.transfer.v1.endpoint.DatadogTarget
	27, // 26: doublecloud.transfer.v1.EndpointSettings.jira_source:type_name -> doublecloud.transfer.v1.endpoint.airbyte.JiraSource
	28, // 27: doublecloud.transfer.v1.EndpointSettings.hubspot_source:type_name -> doublecloud.transfer.v1.endpoint.airbyte.HubspotSource
	29, // 28: doublecloud.transfer.v1.EndpointSettings.coralogix_target:type_name -> doublecloud.transfer.v1.endpoint.CoralogixTarget
	30, // 29: doublecloud.transfer.v1.EndpointSettings.bigquery_target:type_name -> doublecloud.transfer.v1.endpoint.BigQueryTarget
	31, // 30: doublecloud.transfer.v1.EndpointSettings.metrica_source:type_name -> doublecloud.transfer.v1.endpoint.MetricaSource
	32, // 31: doublecloud.transfer.v1.EndpointSettings.dynamodb_source:type_name -> doublecloud.transfer.v1.endpoint.airbyte.DynamodbSource
	33, // 32: doublecloud.transfer.v1.EndpointSettings.kinesis_source:type_name -> doublecloud.transfer.v1.endpoint.KinesisSource
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_doublecloud_transfer_v1_endpoint_proto_init() }
func file_doublecloud_transfer_v1_endpoint_proto_init() {
	if File_doublecloud_transfer_v1_endpoint_proto != nil {
		return
	}
	file_doublecloud_transfer_v1_endpoint_proto_msgTypes[1].OneofWrappers = []any{
		(*EndpointSettings_MysqlSource)(nil),
		(*EndpointSettings_PostgresSource)(nil),
		(*EndpointSettings_KafkaSource)(nil),
		(*EndpointSettings_MongoSource)(nil),
		(*EndpointSettings_ClickhouseSource)(nil),
		(*EndpointSettings_MysqlTarget)(nil),
		(*EndpointSettings_PostgresTarget)(nil),
		(*EndpointSettings_ClickhouseTarget)(nil),
		(*EndpointSettings_ObjectStorageTarget)(nil),
		(*EndpointSettings_KafkaTarget)(nil),
		(*EndpointSettings_MongoTarget)(nil),
		(*EndpointSettings_S3Source)(nil),
		(*EndpointSettings_AwsCloudtrailSource)(nil),
		(*EndpointSettings_BigQuerySource)(nil),
		(*EndpointSettings_FacebookMarketingSource)(nil),
		(*EndpointSettings_GoogleAdsSource)(nil),
		(*EndpointSettings_AmazonAdsSource)(nil),
		(*EndpointSettings_InstagramSource)(nil),
		(*EndpointSettings_LinkedinAdsSource)(nil),
		(*EndpointSettings_MssqlSource)(nil),
		(*EndpointSettings_RedshiftSource)(nil),
		(*EndpointSettings_SnowflakeSource)(nil),
		(*EndpointSettings_ObjectStorageSource)(nil),
		(*EndpointSettings_DatadogTarget)(nil),
		(*EndpointSettings_JiraSource)(nil),
		(*EndpointSettings_HubspotSource)(nil),
		(*EndpointSettings_CoralogixTarget)(nil),
		(*EndpointSettings_BigqueryTarget)(nil),
		(*EndpointSettings_MetricaSource)(nil),
		(*EndpointSettings_DynamodbSource)(nil),
		(*EndpointSettings_KinesisSource)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_doublecloud_transfer_v1_endpoint_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_doublecloud_transfer_v1_endpoint_proto_goTypes,
		DependencyIndexes: file_doublecloud_transfer_v1_endpoint_proto_depIdxs,
		MessageInfos:      file_doublecloud_transfer_v1_endpoint_proto_msgTypes,
	}.Build()
	File_doublecloud_transfer_v1_endpoint_proto = out.File
	file_doublecloud_transfer_v1_endpoint_proto_rawDesc = nil
	file_doublecloud_transfer_v1_endpoint_proto_goTypes = nil
	file_doublecloud_transfer_v1_endpoint_proto_depIdxs = nil
}
