// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: doublecloud/transfer/v1/endpoint/kafka.proto

package endpoint

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KafkaMechanism int32

const (
	KafkaMechanism_KAFKA_MECHANISM_UNSPECIFIED KafkaMechanism = 0
	KafkaMechanism_KAFKA_MECHANISM_SHA256      KafkaMechanism = 1
	KafkaMechanism_KAFKA_MECHANISM_SHA512      KafkaMechanism = 2
)

// Enum value maps for KafkaMechanism.
var (
	KafkaMechanism_name = map[int32]string{
		0: "KAFKA_MECHANISM_UNSPECIFIED",
		1: "KAFKA_MECHANISM_SHA256",
		2: "KAFKA_MECHANISM_SHA512",
	}
	KafkaMechanism_value = map[string]int32{
		"KAFKA_MECHANISM_UNSPECIFIED": 0,
		"KAFKA_MECHANISM_SHA256":      1,
		"KAFKA_MECHANISM_SHA512":      2,
	}
)

func (x KafkaMechanism) Enum() *KafkaMechanism {
	p := new(KafkaMechanism)
	*p = x
	return p
}

func (x KafkaMechanism) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KafkaMechanism) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_transfer_v1_endpoint_kafka_proto_enumTypes[0].Descriptor()
}

func (KafkaMechanism) Type() protoreflect.EnumType {
	return &file_doublecloud_transfer_v1_endpoint_kafka_proto_enumTypes[0]
}

func (x KafkaMechanism) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KafkaMechanism.Descriptor instead.
func (KafkaMechanism) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_endpoint_kafka_proto_rawDescGZIP(), []int{0}
}

type KafkaCompressionEncoding int32

const (
	KafkaCompressionEncoding_KAFKA_COMPRESSION_ENCODING_UNSPECIFIED KafkaCompressionEncoding = 0
	KafkaCompressionEncoding_KAFKA_COMPRESSION_ENCODING_GZIP        KafkaCompressionEncoding = 1
	KafkaCompressionEncoding_KAFKA_COMPRESSION_ENCODING_SNAPPY      KafkaCompressionEncoding = 2
	KafkaCompressionEncoding_KAFKA_COMPRESSION_ENCODING_LZ4         KafkaCompressionEncoding = 3
	KafkaCompressionEncoding_KAFKA_COMPRESSION_ENCODING_ZSTD        KafkaCompressionEncoding = 4
)

// Enum value maps for KafkaCompressionEncoding.
var (
	KafkaCompressionEncoding_name = map[int32]string{
		0: "KAFKA_COMPRESSION_ENCODING_UNSPECIFIED",
		1: "KAFKA_COMPRESSION_ENCODING_GZIP",
		2: "KAFKA_COMPRESSION_ENCODING_SNAPPY",
		3: "KAFKA_COMPRESSION_ENCODING_LZ4",
		4: "KAFKA_COMPRESSION_ENCODING_ZSTD",
	}
	KafkaCompressionEncoding_value = map[string]int32{
		"KAFKA_COMPRESSION_ENCODING_UNSPECIFIED": 0,
		"KAFKA_COMPRESSION_ENCODING_GZIP":        1,
		"KAFKA_COMPRESSION_ENCODING_SNAPPY":      2,
		"KAFKA_COMPRESSION_ENCODING_LZ4":         3,
		"KAFKA_COMPRESSION_ENCODING_ZSTD":        4,
	}
)

func (x KafkaCompressionEncoding) Enum() *KafkaCompressionEncoding {
	p := new(KafkaCompressionEncoding)
	*p = x
	return p
}

func (x KafkaCompressionEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KafkaCompressionEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_doublecloud_transfer_v1_endpoint_kafka_proto_enumTypes[1].Descriptor()
}

func (KafkaCompressionEncoding) Type() protoreflect.EnumType {
	return &file_doublecloud_transfer_v1_endpoint_kafka_proto_enumTypes[1]
}

func (x KafkaCompressionEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KafkaCompressionEncoding.Descriptor instead.
func (KafkaCompressionEncoding) EnumDescriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_endpoint_kafka_proto_rawDescGZIP(), []int{1}
}

type KafkaConnectionOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Connection:
	//
	//	*KafkaConnectionOptions_ClusterId
	//	*KafkaConnectionOptions_OnPremise
	Connection    isKafkaConnectionOptions_Connection `protobuf_oneof:"connection"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KafkaConnectionOptions) Reset() {
	*x = KafkaConnectionOptions{}
	mi := &file_doublecloud_transfer_v1_endpoint_kafka_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaConnectionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaConnectionOptions) ProtoMessage() {}

func (x *KafkaConnectionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_endpoint_kafka_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaConnectionOptions.ProtoReflect.Descriptor instead.
func (*KafkaConnectionOptions) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_endpoint_kafka_proto_rawDescGZIP(), []int{0}
}

func (x *KafkaConnectionOptions) GetConnection() isKafkaConnectionOptions_Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *KafkaConnectionOptions) GetClusterId() string {
	if x != nil {
		if x, ok := x.Connection.(*KafkaConnectionOptions_ClusterId); ok {
			return x.ClusterId
		}
	}
	return ""
}

func (x *KafkaConnectionOptions) GetOnPremise() *OnPremiseKafka {
	if x != nil {
		if x, ok := x.Connection.(*KafkaConnectionOptions_OnPremise); ok {
			return x.OnPremise
		}
	}
	return nil
}

type isKafkaConnectionOptions_Connection interface {
	isKafkaConnectionOptions_Connection()
}

type KafkaConnectionOptions_ClusterId struct {
	// Managed Service for Kafka cluster ID
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3,oneof"`
}

type KafkaConnectionOptions_OnPremise struct {
	// Connection options for on-premise Kafka
	OnPremise *OnPremiseKafka `protobuf:"bytes,2,opt,name=on_premise,json=onPremise,proto3,oneof"`
}

func (*KafkaConnectionOptions_ClusterId) isKafkaConnectionOptions_Connection() {}

func (*KafkaConnectionOptions_OnPremise) isKafkaConnectionOptions_Connection() {}

type OnPremiseKafka struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Kafka broker URLs
	BrokerUrls []string `protobuf:"bytes,1,rep,name=broker_urls,json=brokerUrls,proto3" json:"broker_urls,omitempty"`
	// TLS settings for broker connection. Disabled by default.
	TlsMode       *TLSMode `protobuf:"bytes,5,opt,name=tls_mode,json=tlsMode,proto3" json:"tls_mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OnPremiseKafka) Reset() {
	*x = OnPremiseKafka{}
	mi := &file_doublecloud_transfer_v1_endpoint_kafka_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnPremiseKafka) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnPremiseKafka) ProtoMessage() {}

func (x *OnPremiseKafka) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_endpoint_kafka_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnPremiseKafka.ProtoReflect.Descriptor instead.
func (*OnPremiseKafka) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_endpoint_kafka_proto_rawDescGZIP(), []int{1}
}

func (x *OnPremiseKafka) GetBrokerUrls() []string {
	if x != nil {
		return x.BrokerUrls
	}
	return nil
}

func (x *OnPremiseKafka) GetTlsMode() *TLSMode {
	if x != nil {
		return x.TlsMode
	}
	return nil
}

type KafkaAuth struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Security:
	//
	//	*KafkaAuth_Sasl
	//	*KafkaAuth_NoAuth
	Security      isKafkaAuth_Security `protobuf_oneof:"security"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KafkaAuth) Reset() {
	*x = KafkaAuth{}
	mi := &file_doublecloud_transfer_v1_endpoint_kafka_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaAuth) ProtoMessage() {}

func (x *KafkaAuth) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_endpoint_kafka_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaAuth.ProtoReflect.Descriptor instead.
func (*KafkaAuth) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_endpoint_kafka_proto_rawDescGZIP(), []int{2}
}

func (x *KafkaAuth) GetSecurity() isKafkaAuth_Security {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *KafkaAuth) GetSasl() *KafkaSaslSecurity {
	if x != nil {
		if x, ok := x.Security.(*KafkaAuth_Sasl); ok {
			return x.Sasl
		}
	}
	return nil
}

func (x *KafkaAuth) GetNoAuth() *NoAuth {
	if x != nil {
		if x, ok := x.Security.(*KafkaAuth_NoAuth); ok {
			return x.NoAuth
		}
	}
	return nil
}

type isKafkaAuth_Security interface {
	isKafkaAuth_Security()
}

type KafkaAuth_Sasl struct {
	// Authentication with SASL
	Sasl *KafkaSaslSecurity `protobuf:"bytes,1,opt,name=sasl,proto3,oneof"`
}

type KafkaAuth_NoAuth struct {
	// No authentication
	NoAuth *NoAuth `protobuf:"bytes,2,opt,name=no_auth,json=noAuth,proto3,oneof"`
}

func (*KafkaAuth_Sasl) isKafkaAuth_Security() {}

func (*KafkaAuth_NoAuth) isKafkaAuth_Security() {}

type KafkaSaslSecurity struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// User name
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// SASL mechanism for authentication
	Mechanism KafkaMechanism `protobuf:"varint,3,opt,name=mechanism,proto3,enum=doublecloud.transfer.v1.endpoint.KafkaMechanism" json:"mechanism,omitempty"`
	// Password for user
	Password      *Secret `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KafkaSaslSecurity) Reset() {
	*x = KafkaSaslSecurity{}
	mi := &file_doublecloud_transfer_v1_endpoint_kafka_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaSaslSecurity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaSaslSecurity) ProtoMessage() {}

func (x *KafkaSaslSecurity) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_endpoint_kafka_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaSaslSecurity.ProtoReflect.Descriptor instead.
func (*KafkaSaslSecurity) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_endpoint_kafka_proto_rawDescGZIP(), []int{3}
}

func (x *KafkaSaslSecurity) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *KafkaSaslSecurity) GetMechanism() KafkaMechanism {
	if x != nil {
		return x.Mechanism
	}
	return KafkaMechanism_KAFKA_MECHANISM_UNSPECIFIED
}

func (x *KafkaSaslSecurity) GetPassword() *Secret {
	if x != nil {
		return x.Password
	}
	return nil
}

type KafkaSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Connection settings
	Connection *KafkaConnectionOptions `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
	// Authentication settings
	Auth *KafkaAuth `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	// Full source topic name
	// Deprecated in favor of topic names
	//
	// Deprecated: Marked as deprecated in doublecloud/transfer/v1/endpoint/kafka.proto.
	TopicName string `protobuf:"bytes,4,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	// Data parsing rules
	Parser *Parser `protobuf:"bytes,7,opt,name=parser,proto3" json:"parser,omitempty"`
	// List of topic names to read
	TopicNames    []string `protobuf:"bytes,8,rep,name=topic_names,json=topicNames,proto3" json:"topic_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KafkaSource) Reset() {
	*x = KafkaSource{}
	mi := &file_doublecloud_transfer_v1_endpoint_kafka_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaSource) ProtoMessage() {}

func (x *KafkaSource) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_endpoint_kafka_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaSource.ProtoReflect.Descriptor instead.
func (*KafkaSource) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_endpoint_kafka_proto_rawDescGZIP(), []int{4}
}

func (x *KafkaSource) GetConnection() *KafkaConnectionOptions {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *KafkaSource) GetAuth() *KafkaAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

// Deprecated: Marked as deprecated in doublecloud/transfer/v1/endpoint/kafka.proto.
func (x *KafkaSource) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *KafkaSource) GetParser() *Parser {
	if x != nil {
		return x.Parser
	}
	return nil
}

func (x *KafkaSource) GetTopicNames() []string {
	if x != nil {
		return x.TopicNames
	}
	return nil
}

type KafkaTarget struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Connection settings
	Connection *KafkaConnectionOptions `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
	// Authentication settings
	Auth *KafkaAuth `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	// Target topic settings
	TopicSettings *KafkaTargetTopicSettings `protobuf:"bytes,7,opt,name=topic_settings,json=topicSettings,proto3" json:"topic_settings,omitempty"`
	// Data serialization format settings
	Serializer    *Serializer              `protobuf:"bytes,8,opt,name=serializer,proto3" json:"serializer,omitempty"`
	Compression   KafkaCompressionEncoding `protobuf:"varint,9,opt,name=compression,proto3,enum=doublecloud.transfer.v1.endpoint.KafkaCompressionEncoding" json:"compression,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KafkaTarget) Reset() {
	*x = KafkaTarget{}
	mi := &file_doublecloud_transfer_v1_endpoint_kafka_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaTarget) ProtoMessage() {}

func (x *KafkaTarget) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_endpoint_kafka_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaTarget.ProtoReflect.Descriptor instead.
func (*KafkaTarget) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_endpoint_kafka_proto_rawDescGZIP(), []int{5}
}

func (x *KafkaTarget) GetConnection() *KafkaConnectionOptions {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *KafkaTarget) GetAuth() *KafkaAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *KafkaTarget) GetTopicSettings() *KafkaTargetTopicSettings {
	if x != nil {
		return x.TopicSettings
	}
	return nil
}

func (x *KafkaTarget) GetSerializer() *Serializer {
	if x != nil {
		return x.Serializer
	}
	return nil
}

func (x *KafkaTarget) GetCompression() KafkaCompressionEncoding {
	if x != nil {
		return x.Compression
	}
	return KafkaCompressionEncoding_KAFKA_COMPRESSION_ENCODING_UNSPECIFIED
}

type KafkaTargetTopicSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to TopicSettings:
	//
	//	*KafkaTargetTopicSettings_Topic
	//	*KafkaTargetTopicSettings_TopicPrefix
	TopicSettings isKafkaTargetTopicSettings_TopicSettings `protobuf_oneof:"topic_settings"`
	// ConfigEntries for newly created topics by transfer
	TopicConfigEntries []*TopicConfigEntry `protobuf:"bytes,3,rep,name=topic_config_entries,json=topicConfigEntries,proto3" json:"topic_config_entries,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *KafkaTargetTopicSettings) Reset() {
	*x = KafkaTargetTopicSettings{}
	mi := &file_doublecloud_transfer_v1_endpoint_kafka_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaTargetTopicSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaTargetTopicSettings) ProtoMessage() {}

func (x *KafkaTargetTopicSettings) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_endpoint_kafka_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaTargetTopicSettings.ProtoReflect.Descriptor instead.
func (*KafkaTargetTopicSettings) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_endpoint_kafka_proto_rawDescGZIP(), []int{6}
}

func (x *KafkaTargetTopicSettings) GetTopicSettings() isKafkaTargetTopicSettings_TopicSettings {
	if x != nil {
		return x.TopicSettings
	}
	return nil
}

func (x *KafkaTargetTopicSettings) GetTopic() *KafkaTargetTopic {
	if x != nil {
		if x, ok := x.TopicSettings.(*KafkaTargetTopicSettings_Topic); ok {
			return x.Topic
		}
	}
	return nil
}

func (x *KafkaTargetTopicSettings) GetTopicPrefix() string {
	if x != nil {
		if x, ok := x.TopicSettings.(*KafkaTargetTopicSettings_TopicPrefix); ok {
			return x.TopicPrefix
		}
	}
	return ""
}

func (x *KafkaTargetTopicSettings) GetTopicConfigEntries() []*TopicConfigEntry {
	if x != nil {
		return x.TopicConfigEntries
	}
	return nil
}

type isKafkaTargetTopicSettings_TopicSettings interface {
	isKafkaTargetTopicSettings_TopicSettings()
}

type KafkaTargetTopicSettings_Topic struct {
	// Full topic name
	Topic *KafkaTargetTopic `protobuf:"bytes,1,opt,name=topic,proto3,oneof"`
}

type KafkaTargetTopicSettings_TopicPrefix struct {
	// Topic prefix
	//
	// Analogue of the Debezium setting database.server.name.
	// Messages will be sent to topic with name <topic_prefix>.<schema>.<table_name>.
	TopicPrefix string `protobuf:"bytes,2,opt,name=topic_prefix,json=topicPrefix,proto3,oneof"`
}

func (*KafkaTargetTopicSettings_Topic) isKafkaTargetTopicSettings_TopicSettings() {}

func (*KafkaTargetTopicSettings_TopicPrefix) isKafkaTargetTopicSettings_TopicSettings() {}

type KafkaTargetTopic struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Topic name
	TopicName string `protobuf:"bytes,1,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	// Save transactions order
	// Not to split events queue into separate per-table queues.
	SaveTxOrder   bool `protobuf:"varint,2,opt,name=save_tx_order,json=saveTxOrder,proto3" json:"save_tx_order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KafkaTargetTopic) Reset() {
	*x = KafkaTargetTopic{}
	mi := &file_doublecloud_transfer_v1_endpoint_kafka_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaTargetTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaTargetTopic) ProtoMessage() {}

func (x *KafkaTargetTopic) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_endpoint_kafka_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaTargetTopic.ProtoReflect.Descriptor instead.
func (*KafkaTargetTopic) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_endpoint_kafka_proto_rawDescGZIP(), []int{7}
}

func (x *KafkaTargetTopic) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *KafkaTargetTopic) GetSaveTxOrder() bool {
	if x != nil {
		return x.SaveTxOrder
	}
	return false
}

type TopicConfigEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConfigName    string                 `protobuf:"bytes,1,opt,name=config_name,json=configName,proto3" json:"config_name,omitempty"`
	ConfigValue   string                 `protobuf:"bytes,2,opt,name=config_value,json=configValue,proto3" json:"config_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopicConfigEntry) Reset() {
	*x = TopicConfigEntry{}
	mi := &file_doublecloud_transfer_v1_endpoint_kafka_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopicConfigEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicConfigEntry) ProtoMessage() {}

func (x *TopicConfigEntry) ProtoReflect() protoreflect.Message {
	mi := &file_doublecloud_transfer_v1_endpoint_kafka_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicConfigEntry.ProtoReflect.Descriptor instead.
func (*TopicConfigEntry) Descriptor() ([]byte, []int) {
	return file_doublecloud_transfer_v1_endpoint_kafka_proto_rawDescGZIP(), []int{8}
}

func (x *TopicConfigEntry) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

func (x *TopicConfigEntry) GetConfigValue() string {
	if x != nil {
		return x.ConfigValue
	}
	return ""
}

var File_doublecloud_transfer_v1_endpoint_kafka_proto protoreflect.FileDescriptor

var file_doublecloud_transfer_v1_endpoint_kafka_proto_rawDesc = string([]byte{
	0x0a, 0x2c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x1a, 0x2d, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x32, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x01, 0x0a, 0x16, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f,
	0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x51, 0x0a, 0x0a, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4f, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x73, 0x65,
	0x4b, 0x61, 0x66, 0x6b, 0x61, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69,
	0x73, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x7d, 0x0a, 0x0e, 0x4f, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x73, 0x65, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x55,
	0x72, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x74, 0x6c, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x4c, 0x53, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x74, 0x6c, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x05, 0x22,
	0xa7, 0x01, 0x0a, 0x09, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x41, 0x75, 0x74, 0x68, 0x12, 0x49, 0x0a,
	0x04, 0x73, 0x61, 0x73, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4b,
	0x61, 0x66, 0x6b, 0x61, 0x53, 0x61, 0x73, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x04, 0x73, 0x61, 0x73, 0x6c, 0x12, 0x43, 0x0a, 0x07, 0x6e, 0x6f, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x41,
	0x75, 0x74, 0x68, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x42, 0x0a, 0x0a,
	0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x22, 0xc3, 0x01, 0x0a, 0x11, 0x4b, 0x61,
	0x66, 0x6b, 0x61, 0x53, 0x61, 0x73, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x09, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x4d,
	0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52, 0x09, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e,
	0x69, 0x73, 0x6d, 0x12, 0x44, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22,
	0xba, 0x02, 0x0a, 0x0b, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x58, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0a, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x52, 0x06, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x07, 0x22, 0xbd, 0x03, 0x0a,
	0x0b, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x58, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x61, 0x0a, 0x0e, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0d, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4c, 0x0a, 0x0a, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x0a, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x07, 0x22, 0x83, 0x02, 0x0a,
	0x18, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4a, 0x0a, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4b, 0x61, 0x66, 0x6b,
	0x61, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x48, 0x00, 0x52, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x23, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x64, 0x0a, 0x14, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x42, 0x10, 0x0a, 0x0e, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x22, 0x55, 0x0a, 0x10, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x74, 0x78,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x61,
	0x76, 0x65, 0x54, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x56, 0x0a, 0x10, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x2a, 0x69, 0x0a, 0x0e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e,
	0x69, 0x73, 0x6d, 0x12, 0x1f, 0x0a, 0x1b, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x4d, 0x45, 0x43,
	0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x4d, 0x45,
	0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x01,
	0x12, 0x1a, 0x0a, 0x16, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e,
	0x49, 0x53, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x35, 0x31, 0x32, 0x10, 0x02, 0x2a, 0xdb, 0x01, 0x0a,
	0x18, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x26, 0x4b, 0x41, 0x46,
	0x4b, 0x41, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x47, 0x5a, 0x49, 0x50, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x4b, 0x41,
	0x46, 0x4b, 0x41, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x50, 0x59, 0x10,
	0x02, 0x12, 0x22, 0x0a, 0x1e, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x52,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x4c, 0x5a, 0x34, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x5a, 0x53, 0x54, 0x44, 0x10, 0x04, 0x42, 0x4e, 0x5a, 0x4c, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x3b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_doublecloud_transfer_v1_endpoint_kafka_proto_rawDescOnce sync.Once
	file_doublecloud_transfer_v1_endpoint_kafka_proto_rawDescData []byte
)

func file_doublecloud_transfer_v1_endpoint_kafka_proto_rawDescGZIP() []byte {
	file_doublecloud_transfer_v1_endpoint_kafka_proto_rawDescOnce.Do(func() {
		file_doublecloud_transfer_v1_endpoint_kafka_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_doublecloud_transfer_v1_endpoint_kafka_proto_rawDesc), len(file_doublecloud_transfer_v1_endpoint_kafka_proto_rawDesc)))
	})
	return file_doublecloud_transfer_v1_endpoint_kafka_proto_rawDescData
}

var file_doublecloud_transfer_v1_endpoint_kafka_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_doublecloud_transfer_v1_endpoint_kafka_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_doublecloud_transfer_v1_endpoint_kafka_proto_goTypes = []any{
	(KafkaMechanism)(0),              // 0: doublecloud.transfer.v1.endpoint.KafkaMechanism
	(KafkaCompressionEncoding)(0),    // 1: doublecloud.transfer.v1.endpoint.KafkaCompressionEncoding
	(*KafkaConnectionOptions)(nil),   // 2: doublecloud.transfer.v1.endpoint.KafkaConnectionOptions
	(*OnPremiseKafka)(nil),           // 3: doublecloud.transfer.v1.endpoint.OnPremiseKafka
	(*KafkaAuth)(nil),                // 4: doublecloud.transfer.v1.endpoint.KafkaAuth
	(*KafkaSaslSecurity)(nil),        // 5: doublecloud.transfer.v1.endpoint.KafkaSaslSecurity
	(*KafkaSource)(nil),              // 6: doublecloud.transfer.v1.endpoint.KafkaSource
	(*KafkaTarget)(nil),              // 7: doublecloud.transfer.v1.endpoint.KafkaTarget
	(*KafkaTargetTopicSettings)(nil), // 8: doublecloud.transfer.v1.endpoint.KafkaTargetTopicSettings
	(*KafkaTargetTopic)(nil),         // 9: doublecloud.transfer.v1.endpoint.KafkaTargetTopic
	(*TopicConfigEntry)(nil),         // 10: doublecloud.transfer.v1.endpoint.TopicConfigEntry
	(*TLSMode)(nil),                  // 11: doublecloud.transfer.v1.endpoint.TLSMode
	(*NoAuth)(nil),                   // 12: doublecloud.transfer.v1.endpoint.NoAuth
	(*Secret)(nil),                   // 13: doublecloud.transfer.v1.endpoint.Secret
	(*Parser)(nil),                   // 14: doublecloud.transfer.v1.endpoint.Parser
	(*Serializer)(nil),               // 15: doublecloud.transfer.v1.endpoint.Serializer
}
var file_doublecloud_transfer_v1_endpoint_kafka_proto_depIdxs = []int32{
	3,  // 0: doublecloud.transfer.v1.endpoint.KafkaConnectionOptions.on_premise:type_name -> doublecloud.transfer.v1.endpoint.OnPremiseKafka
	11, // 1: doublecloud.transfer.v1.endpoint.OnPremiseKafka.tls_mode:type_name -> doublecloud.transfer.v1.endpoint.TLSMode
	5,  // 2: doublecloud.transfer.v1.endpoint.KafkaAuth.sasl:type_name -> doublecloud.transfer.v1.endpoint.KafkaSaslSecurity
	12, // 3: doublecloud.transfer.v1.endpoint.KafkaAuth.no_auth:type_name -> doublecloud.transfer.v1.endpoint.NoAuth
	0,  // 4: doublecloud.transfer.v1.endpoint.KafkaSaslSecurity.mechanism:type_name -> doublecloud.transfer.v1.endpoint.KafkaMechanism
	13, // 5: doublecloud.transfer.v1.endpoint.KafkaSaslSecurity.password:type_name -> doublecloud.transfer.v1.endpoint.Secret
	2,  // 6: doublecloud.transfer.v1.endpoint.KafkaSource.connection:type_name -> doublecloud.transfer.v1.endpoint.KafkaConnectionOptions
	4,  // 7: doublecloud.transfer.v1.endpoint.KafkaSource.auth:type_name -> doublecloud.transfer.v1.endpoint.KafkaAuth
	14, // 8: doublecloud.transfer.v1.endpoint.KafkaSource.parser:type_name -> doublecloud.transfer.v1.endpoint.Parser
	2,  // 9: doublecloud.transfer.v1.endpoint.KafkaTarget.connection:type_name -> doublecloud.transfer.v1.endpoint.KafkaConnectionOptions
	4,  // 10: doublecloud.transfer.v1.endpoint.KafkaTarget.auth:type_name -> doublecloud.transfer.v1.endpoint.KafkaAuth
	8,  // 11: doublecloud.transfer.v1.endpoint.KafkaTarget.topic_settings:type_name -> doublecloud.transfer.v1.endpoint.KafkaTargetTopicSettings
	15, // 12: doublecloud.transfer.v1.endpoint.KafkaTarget.serializer:type_name -> doublecloud.transfer.v1.endpoint.Serializer
	1,  // 13: doublecloud.transfer.v1.endpoint.KafkaTarget.compression:type_name -> doublecloud.transfer.v1.endpoint.KafkaCompressionEncoding
	9,  // 14: doublecloud.transfer.v1.endpoint.KafkaTargetTopicSettings.topic:type_name -> doublecloud.transfer.v1.endpoint.KafkaTargetTopic
	10, // 15: doublecloud.transfer.v1.endpoint.KafkaTargetTopicSettings.topic_config_entries:type_name -> doublecloud.transfer.v1.endpoint.TopicConfigEntry
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_doublecloud_transfer_v1_endpoint_kafka_proto_init() }
func file_doublecloud_transfer_v1_endpoint_kafka_proto_init() {
	if File_doublecloud_transfer_v1_endpoint_kafka_proto != nil {
		return
	}
	file_doublecloud_transfer_v1_endpoint_common_proto_init()
	file_doublecloud_transfer_v1_endpoint_parsers_proto_init()
	file_doublecloud_transfer_v1_endpoint_serializers_proto_init()
	file_doublecloud_transfer_v1_endpoint_kafka_proto_msgTypes[0].OneofWrappers = []any{
		(*KafkaConnectionOptions_ClusterId)(nil),
		(*KafkaConnectionOptions_OnPremise)(nil),
	}
	file_doublecloud_transfer_v1_endpoint_kafka_proto_msgTypes[2].OneofWrappers = []any{
		(*KafkaAuth_Sasl)(nil),
		(*KafkaAuth_NoAuth)(nil),
	}
	file_doublecloud_transfer_v1_endpoint_kafka_proto_msgTypes[6].OneofWrappers = []any{
		(*KafkaTargetTopicSettings_Topic)(nil),
		(*KafkaTargetTopicSettings_TopicPrefix)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_doublecloud_transfer_v1_endpoint_kafka_proto_rawDesc), len(file_doublecloud_transfer_v1_endpoint_kafka_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_doublecloud_transfer_v1_endpoint_kafka_proto_goTypes,
		DependencyIndexes: file_doublecloud_transfer_v1_endpoint_kafka_proto_depIdxs,
		EnumInfos:         file_doublecloud_transfer_v1_endpoint_kafka_proto_enumTypes,
		MessageInfos:      file_doublecloud_transfer_v1_endpoint_kafka_proto_msgTypes,
	}.Build()
	File_doublecloud_transfer_v1_endpoint_kafka_proto = out.File
	file_doublecloud_transfer_v1_endpoint_kafka_proto_goTypes = nil
	file_doublecloud_transfer_v1_endpoint_kafka_proto_depIdxs = nil
}
